var searchIndex = {};
searchIndex["antidote"] = {"doc":"Mutex and RwLock types that do not poison themselves.","items":[[3,"WaitTimeoutResult","antidote","A type indicating whether a timed wait on a condition variable returned due to a time out or not.",null,null],[3,"Mutex","","Like `std::sync::Mutex` except that it does not poison itself.",null,null],[3,"MutexGuard","","Like `std::sync::MutexGuard`.",null,null],[3,"Condvar","","Like `std::sync::Condvar`.",null,null],[3,"TryLockError","","Like `std::sync::TryLockError`.",null,null],[3,"RwLock","","Like `std::sync::RwLock` except that it does not poison itself.",null,null],[3,"RwLockReadGuard","","Like `std::sync::RwLockReadGuard`.",null,null],[3,"RwLockWriteGuard","","Like `std::sync::RwLockWriteGuard`.",null,null],[6,"TryLockResult","","Like `std::sync::TryLockResult`.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Like `std::sync::Mutex::new`.",0,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"into_inner","","Like `std::sync::Mutex::into_inner`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"lock","","Like `std::sync::Mutex::lock`.",0,{"inputs":[{"name":"self"}],"output":{"name":"mutexguard"}}],[11,"try_lock","","Like `std::sync::Mutex::try_lock`.",0,{"inputs":[{"name":"self"}],"output":{"name":"trylockresult"}}],[11,"get_mut","","Like `std::sync::Mutex::get_mut`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new","","Like `std::sync::Condvar::new`.",2,{"inputs":[],"output":{"name":"condvar"}}],[11,"wait","","Like `std::sync::Condvar::wait`.",2,{"inputs":[{"name":"self"},{"name":"mutexguard"}],"output":{"name":"mutexguard"}}],[11,"wait_timeout","","Like `std::sync::Condvar::wait_timeout`.",2,null],[11,"notify_one","","Like `std::sync::Condvar::notify_one`.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"notify_all","","Like `std::sync::Condvar::notify_all`.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Like `std::sync::RwLock::new`.",4,{"inputs":[{"name":"t"}],"output":{"name":"rwlock"}}],[11,"into_inner","","Like `std::sync::RwLock::into_inner`.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"read","","Like `std::sync::RwLock::read`.",4,{"inputs":[{"name":"self"}],"output":{"name":"rwlockreadguard"}}],[11,"try_read","","Like `std::sync::RwLock::try_read`.",4,{"inputs":[{"name":"self"}],"output":{"name":"trylockresult"}}],[11,"write","","Like `std::sync::RwLock::write`.",4,{"inputs":[{"name":"self"}],"output":{"name":"rwlockwriteguard"}}],[11,"try_write","","Like `std::sync::RwLock::try_write`.",4,{"inputs":[{"name":"self"}],"output":{"name":"trylockresult"}}],[11,"get_mut","","Like `std::sync::RwLock::get_mut`.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"timed_out","","Returns whether the wait was known to have timed out.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"waittimeoutresult"}}]],"paths":[[3,"Mutex"],[3,"MutexGuard"],[3,"Condvar"],[3,"TryLockError"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"WaitTimeoutResult"]]};
searchIndex["base64"] = {"doc":"","items":[[3,"Config","base64","Contains configuration parameters for base64 encoding",null,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",0,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",0,null],[4,"LineEnding","","",null,null],[13,"LF","","",1,null],[13,"CRLF","","",1,null],[4,"LineWrap","","",null,null],[13,"NoWrap","","",2,null],[13,"Wrap","","",2,null],[4,"DecodeError","","",null,null],[13,"InvalidByte","","",3,null],[13,"InvalidLength","","",3,null],[5,"encode","","Encode arbitrary octets as base64. Returns a String. Convenience for `encode_config(input, base64::STANDARD);`.",null,{"inputs":[{"name":"t"}],"output":{"name":"string"}}],[5,"decode","","Decode from string reference as octets. Returns a Result containing a Vec. Convenience `decode_config(input, base64::STANDARD);`.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"encode_config","","Encode arbitrary octets as base64. Returns a String.",null,{"inputs":[{"name":"t"},{"name":"config"}],"output":{"name":"string"}}],[5,"encode_config_buf","","Encode arbitrary octets as base64. Writes into the supplied buffer to avoid allocations.",null,{"inputs":[{"name":"t"},{"name":"config"},{"name":"string"}],"output":null}],[5,"decode_config","","Decode from string reference as octets. Returns a Result containing a Vec.",null,{"inputs":[{"name":"t"},{"name":"config"}],"output":{"name":"result"}}],[5,"decode_config_buf","","Decode from string reference as octets. Writes into the supplied buffer to avoid allocation. Returns a Result containing an empty tuple, aka ().",null,{"inputs":[{"name":"t"},{"name":"config"},{"name":"vec"}],"output":{"name":"result"}}],[7,"STANDARD","","",null,null],[7,"MIME","","",null,null],[7,"URL_SAFE","","",null,null],[7,"URL_SAFE_NO_PAD","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"characterset"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"lineending"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"linewrap"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",4,{"inputs":[{"name":"characterset"},{"name":"bool"},{"name":"bool"},{"name":"linewrap"}],"output":{"name":"config"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"decodeerror"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"decodeerror"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[4,"CharacterSet"],[4,"LineEnding"],[4,"LineWrap"],[4,"DecodeError"],[3,"Config"]]};
searchIndex["bodyparser"] = {"doc":"Body Parser Plugin for Iron","items":[[3,"BodyError","bodyparser","",null,null],[12,"detail","","",0,null],[12,"cause","","",0,null],[3,"LimitReader","","Original impl",null,null],[3,"MaxBodyLength","","Use this key to modify the default body limit.",null,null],[3,"Raw","","Raw is a plugin to read a request body into UTF-8 String. Doesn't read `multipart/form-data`.",null,null],[3,"Json","","Json is a plugin to parse a request body into JSON. Uses Raw plugin to parse the body with limit.",null,null],[3,"Struct","","Struct is a plugin to parse a request body into a struct. Uses Raw plugin to parse the body with limit.",null,null],[4,"BodyErrorCause","","",null,null],[13,"Utf8Error","","",1,null],[13,"IoError","","",1,null],[13,"JsonError","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",2,{"inputs":[{"name":"r"},{"name":"usize"}],"output":{"name":"limitreader"}}],[11,"into_inner","","",2,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"limit","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"read","","",2,null],[11,"eval","","",3,{"inputs":[{"name":"request"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"eval","","",4,{"inputs":[{"name":"request"}],"output":{"name":"result"}}],[11,"eval","","",5,{"inputs":[{"name":"request"}],"output":{"name":"result"}}]],"paths":[[3,"BodyError"],[4,"BodyErrorCause"],[3,"LimitReader"],[3,"Raw"],[3,"Json"],[3,"Struct"]]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers in either big-endian or little-endian order.","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigendian"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"ordering"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"option"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"bigendian"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"littleendian"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"ordering"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"option"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"littleendian"}}],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["conduit_mime_types"] = {"doc":"","items":[[3,"Types","conduit_mime_types","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"types"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"types"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"types"}],"output":{"name":"bool"}}],[11,"new","","",0,{"inputs":[],"output":{"name":"result"}}],[11,"get_extension","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mime_type","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"mime_for_path","","",0,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"str"}}]],"paths":[[3,"Types"]]};
searchIndex["dtoa"] = {"doc":"","items":[[5,"write","dtoa","",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"name":"result"}}],[8,"Floating","","",null,null],[10,"write","","",0,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[14,"diyfp","","",null,null],[14,"dtoa","","",null,null]],"paths":[[8,"Floating"]]};
searchIndex["error"] = {"doc":"A generic, extendable Error type.","items":[[8,"Error","error","An extension to std::error::Error which provides dynamic downcasting of errors for use in highly generic contexts.",null,null],[11,"is","","Is this `Error` object of type `E`?",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast","","If this error is `E`, downcast this error to `E`, by reference.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Is this `Error + Send` object of type `E`?",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast","","If this error is `E`, downcast this error to `E`, by reference.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[14,"match_error","","",null,null]],"paths":[[8,"Error"]]};
searchIndex["error_type"] = {"doc":"This crate provides the `error_type!` macro, which is designed to produce a fresh, reasonably well-featured error type from a concise definition.","items":[[14,"error_type","error_type","Constructs a reasonably well-featured error type from a concise description.",null,null]],"paths":[]};
searchIndex["httparse"] = {"doc":"httparse","items":[[3,"InvalidChunkSize","httparse","An error in parsing a chunk size.",null,null],[3,"Request","","A parsed Request.",null,null],[12,"method","","The request method, such as `GET`.",0,null],[12,"path","","The request path, such as `/about-us`.",0,null],[12,"version","","The request version, such as `HTTP/1.1`.",0,null],[12,"headers","","The request headers.",0,null],[3,"Response","","A parsed Response.",null,null],[12,"version","","The response version, such as `HTTP/1.1`.",1,null],[12,"code","","The response code, such as `200`.",1,null],[12,"reason","","The response reason-phrase, such as `OK`.",1,null],[12,"headers","","The response headers.",1,null],[3,"Header","","Represents a parsed header.",null,null],[12,"name","","The name portion of a header.",2,null],[12,"value","","The value portion of a header.",2,null],[4,"Error","","An error in parsing.",null,null],[13,"HeaderName","","Invalid byte in header name.",3,null],[13,"HeaderValue","","Invalid byte in header value.",3,null],[13,"NewLine","","Invalid byte in new line.",3,null],[13,"Status","","Invalid byte in Response status.",3,null],[13,"Token","","Invalid byte where token is required.",3,null],[13,"TooManyHeaders","","Parsed more headers than provided buffer can contain.",3,null],[13,"Version","","Invalid byte in HTTP version.",3,null],[4,"Status","","The result of a successful parse pass.",null,null],[13,"Complete","","The completed result.",4,null],[13,"Partial","","A partial result.",4,null],[5,"parse_headers","","Parse a buffer of bytes as headers.",null,null],[5,"parse_chunk_size","","Parse a buffer of bytes as a chunk size.",null,null],[6,"Result","","A Result of any parsing action.",null,null],[17,"EMPTY_HEADER","","An empty header, useful for constructing a `Header` array to pass in for parsing.",null,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"invalidchunksize"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"status"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_complete","","Convenience method to check if status is complete.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_partial","","Convenience method to check if status is partial.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"unwrap","","Convenience method to unwrap a Complete value. Panics if the status is `Partial`.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"request"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"request"}],"output":{"name":"bool"}}],[11,"new","","Creates a new Request, using a slice of headers you allocate.",0,null],[11,"parse","","Try to parse a buffer of bytes into the Request.",0,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"response"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"response"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Response` using a slice of `Header`s you have allocated.",1,null],[11,"parse","","Try to parse a buffer of bytes into this `Response`.",1,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Request"],[3,"Response"],[3,"Header"],[4,"Error"],[4,"Status"],[3,"InvalidChunkSize"]]};
searchIndex["hyper"] = {"doc":"Hyper","items":[[3,"Url","hyper","A parsed URL record.",null,null],[3,"LanguageTag","","A language tag as described in BCP47.",null,null],[12,"language","","Language subtags are used to indicate the language, ignoring all other aspects such as script, region or spefic invariants.",0,null],[12,"extlangs","","Extended language subtags are used to identify certain specially selected languages that, for various historical and compatibility reasons, are closely identified with or tagged using an existing primary language subtag.",0,null],[12,"script","","Script subtags are used to indicate the script or writing system variations that distinguish the written forms of a language or its dialects.",0,null],[12,"region","","Region subtags are used to indicate linguistic variations associated with or appropriate to a specific country, territory, or region. Typically, a region subtag is used to indicate variations such as regional dialects or usage, or region-specific spelling conventions. It can also be used to indicate that content is expressed in a way that is appropriate for use throughout a region, for instance, Spanish content tailored to be useful throughout Latin America.",0,null],[12,"variants","","Variant subtags are used to indicate additional, well-recognized variations that define a language or its dialects that are not covered by other available subtags.",0,null],[12,"extensions","","Extensions provide a mechanism for extending language tags for use in various applications.  They are intended to identify information that is commonly used in association with languages or language tags but that is not part of language identification.",0,null],[12,"privateuse","","Private use subtags are used to indicate distinctions in language that are important in a given context by private agreement.",0,null],[0,"client","","HTTP Client",null,null],[3,"Client","hyper::client","A Client to use additional features with Requests.",null,null],[3,"RequestBuilder","","Options for an individual Request.",null,null],[3,"ProxyConfig","","Proxy server configuration with a custom connector and TLS wrapper.",null,null],[4,"Body","","An enum of possible body types for a Request.",null,null],[13,"ChunkedBody","","A Reader does not necessarily know it's size, so it is chunked.",1,null],[13,"SizedBody","","For Readers that can know their size, like a `File`.",1,null],[13,"BufBody","","A String has a size, and uses Content-Length.",1,null],[4,"RedirectPolicy","","Behavior regarding how to handle redirects within a Client.",null,null],[13,"FollowNone","","Don't follow any redirects.",2,null],[13,"FollowAll","","Follow all redirects.",2,null],[13,"FollowIf","","Follow a redirect if the contained function returns true.",2,null],[0,"pool","","Client Connection Pooling",null,null],[3,"Pool","hyper::client::pool","The `NetworkConnector` that behaves as a connection pool used by hyper's `Client`.",null,null],[3,"Config","","Config options for the `Pool`.",null,null],[12,"max_idle","","The maximum idle connections per host.",3,null],[3,"PooledStream","","A Stream that will try to be returned to the Pool when dropped.",null,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"config"}}],[11,"new","","Creates a `Pool` with a `DefaultConnector`.",4,{"inputs":[{"name":"config"}],"output":{"name":"pool"}}],[11,"with_connector","","Creates a `Pool` with a specified `NetworkConnector`.",4,{"inputs":[{"name":"config"},{"name":"c"}],"output":{"name":"pool"}}],[11,"set_idle_timeout","","Set a duration for how long an idle connection is still valid.",4,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"set_stale_check","","",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"clear_idle","","Clear all idle connections from the Pool, closing them.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"connect","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_inner","","Take the wrapped stream out of the pool completely.",5,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Gets a borrowed reference to the underlying stream.",5,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"read","","",5,null],[11,"write","","",5,null],[11,"flush","","",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peer_addr","","",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",5,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",5,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"close","","",5,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"set_previous_response_expected_no_content","","",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"previous_response_expected_no_content","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[0,"request","hyper::client","Client Requests",null,null],[3,"Request","hyper::client::request","A client request to a remote server. The W type tracks the state of the request, Fresh vs Streaming.",null,null],[12,"url","","The target URI for this request.",6,null],[12,"version","","The HTTP version of this request.",6,null],[11,"headers","","Read the Request headers.",6,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"method","","Read the Request method.",6,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"set_write_timeout","","Set the write timeout.",6,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Set the read timeout.",6,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"with_message","","Create a new `Request<Fresh>` that will use the given `HttpMessage` for its communication with the server. This implies that the given `HttpMessage` instance has already been properly initialized by the caller (e.g. a TCP connection's already established).",6,{"inputs":[{"name":"method"},{"name":"url"},{"name":"box"}],"output":{"name":"result"}}],[11,"new","","Create a new client request.",6,{"inputs":[{"name":"method"},{"name":"url"}],"output":{"name":"result"}}],[11,"with_connector","","Create a new client request with a specific underlying NetworkStream.",6,{"inputs":[{"name":"method"},{"name":"url"},{"name":"c"}],"output":{"name":"result"}}],[11,"start","","Consume a Fresh Request, writing the headers and method, returning a Streaming Request.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"headers_mut","","Get a mutable reference to the Request headers.",6,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"send","","Completes writing the request, and returns a response to read from.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",6,null],[11,"flush","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"response","hyper::client","Client Responses",null,null],[3,"Response","hyper::client::response","A response for a client request to a remote server.",null,null],[12,"status","","The status from the server.",7,null],[12,"headers","","The headers from the server.",7,null],[12,"version","","The HTTP version of this response from the server.",7,null],[12,"url","","The final URL of this response.",7,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new response from a server.",7,{"inputs":[{"name":"url"},{"name":"box"}],"output":{"name":"result"}}],[11,"with_message","","Creates a new response received from the server on the given `HttpMessage`.",7,{"inputs":[{"name":"url"},{"name":"box"}],"output":{"name":"result"}}],[11,"status_raw","","Get the raw status code and reason.",7,{"inputs":[{"name":"self"}],"output":{"name":"rawstatus"}}],[11,"get_ref","","Gets a borrowed reference to the underlying `HttpMessage`.",7,{"inputs":[{"name":"self"}],"output":{"name":"httpmessage"}}],[11,"read","","",7,null],[11,"drop","","",7,{"inputs":[{"name":"self"}],"output":null}],[8,"IntoUrl","hyper::client","A helper trait to convert common objects into a Url.",null,null],[10,"into_url","","Consumes the object, trying to return a Url.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Client.",9,{"inputs":[],"output":{"name":"client"}}],[11,"with_pool_config","","Create a new Client with a configured Pool Config.",9,{"inputs":[{"name":"config"}],"output":{"name":"client"}}],[11,"with_http_proxy","","Create a Client with an HTTP proxy to a (host, port).",9,{"inputs":[{"name":"h"},{"name":"u16"}],"output":{"name":"client"}}],[11,"with_proxy_config","","Create a Client using a proxy with a custom connector and SSL client.",9,{"inputs":[{"name":"proxyconfig"}],"output":{"name":"client"}}],[11,"with_connector","","Create a new client with a specific connector.",9,{"inputs":[{"name":"c"}],"output":{"name":"client"}}],[11,"with_protocol","","Create a new client with a specific `Protocol`.",9,{"inputs":[{"name":"p"}],"output":{"name":"client"}}],[11,"set_redirect_policy","","Set the RedirectPolicy.",9,{"inputs":[{"name":"self"},{"name":"redirectpolicy"}],"output":null}],[11,"set_read_timeout","","Set the read timeout value for all requests.",9,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"set_write_timeout","","Set the write timeout value for all requests.",9,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"get","","Build a Get request.",9,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"head","","Build a Head request.",9,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"patch","","Build a Patch request.",9,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"post","","Build a Post request.",9,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"put","","Build a Put request.",9,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"delete","","Build a Delete request.",9,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"request","","Build a new request using this Client.",9,{"inputs":[{"name":"self"},{"name":"method"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"client"}}],[11,"body","","Set a request body to be sent.",10,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"requestbuilder"}}],[11,"headers","","Add additional headers to the request.",10,{"inputs":[{"name":"self"},{"name":"headers"}],"output":{"name":"requestbuilder"}}],[11,"header","","Add an individual new header to the request.",10,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"requestbuilder"}}],[11,"send","","Execute this request and receive a Response back.",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",1,null],[11,"from","","",1,{"inputs":[{"name":"r"}],"output":{"name":"body"}}],[11,"into_url","hyper","",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","hyper::client","Create a new `ProxyConfig`.",12,{"inputs":[{"name":"str"},{"name":"h"},{"name":"u16"},{"name":"c"},{"name":"s"}],"output":{"name":"proxyconfig"}}],[11,"set_pool_config","","Change the `pool::Config` for the proxy.",12,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"redirectpolicy"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"redirectpolicy"}}],[0,"error","hyper","Error and Result module.",null,null],[4,"ParseError","hyper::error","Errors that can occur during parsing.",null,null],[13,"EmptyHost","","",13,null],[13,"IdnaError","","",13,null],[13,"InvalidPort","","",13,null],[13,"InvalidIpv4Address","","",13,null],[13,"InvalidIpv6Address","","",13,null],[13,"InvalidDomainCharacter","","",13,null],[13,"RelativeUrlWithoutBase","","",13,null],[13,"RelativeUrlWithCannotBeABaseBase","","",13,null],[13,"SetHostOnCannotBeABaseUrl","","",13,null],[13,"Overflow","","",13,null],[4,"Error","","A set of errors that can occur parsing HTTP streams.",null,null],[13,"Method","","An invalid `Method`, such as `GE,T`.",14,null],[13,"Uri","","An invalid `RequestUri`, such as `exam ple.domain`.",14,null],[13,"Version","","An invalid `HttpVersion`, such as `HTP/1.1`",14,null],[13,"Header","","An invalid `Header`.",14,null],[13,"TooLarge","","A message head is too large to be reasonable.",14,null],[13,"Status","","An invalid `Status`, such as `1337 ELITE`.",14,null],[13,"Io","","An `io::Error` that occurred while trying to read or write to a network stream.",14,null],[13,"Ssl","","An error from a SSL library.",14,null],[13,"Utf8","","Parsing a field as string failed",14,null],[6,"Result","","Result type often returned from methods that can have hyper `Error`s.",null,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",14,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",14,{"inputs":[{"name":"ioerror"}],"output":{"name":"error"}}],[11,"from","","",14,{"inputs":[{"name":"parseerror"}],"output":{"name":"error"}}],[11,"from","","",14,{"inputs":[{"name":"utf8error"}],"output":{"name":"error"}}],[11,"from","","",14,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"from","","",14,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[0,"method","hyper","The HTTP request method",null,null],[4,"Method","hyper::method","The Request Method (VERB)",null,null],[13,"Options","","OPTIONS",15,null],[13,"Get","","GET",15,null],[13,"Post","","POST",15,null],[13,"Put","","PUT",15,null],[13,"Delete","","DELETE",15,null],[13,"Head","","HEAD",15,null],[13,"Trace","","TRACE",15,null],[13,"Connect","","CONNECT",15,null],[13,"Patch","","PATCH",15,null],[13,"Extension","","Method extensions. An example would be `let m = Extension(\"FOO\".to_string())`.",15,null],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"method"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"method"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",15,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"safe","","Whether a method is considered \"safe\", meaning the request is essentially read-only.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"idempotent","","Whether a method is considered \"idempotent\", meaning the request has the same result is executed multiple times.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_str","","",15,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"header","hyper","Headers container, and common header fields.",null,null],[3,"EntityTag","hyper::header","An entity tag, defined in RFC7232",null,null],[12,"weak","","Weakness indicator for the tag",16,null],[3,"HttpDate","","A `time::Time` with HTTP formatting and parsing",null,null],[12,"0","","",17,null],[3,"Quality","","Represents a quality used in quality values.",null,null],[12,"0","","",18,null],[3,"QualityItem","","Represents an item with a quality value as defined in RFC7231.",null,null],[12,"item","","The actual contents of the field.",19,null],[12,"quality","","The quality (client or server preference) for the value.",19,null],[3,"Accept","","`Accept` header, defined in RFC7231",null,null],[12,"0","","",20,null],[3,"AccessControlAllowCredentials","","`Access-Control-Allow-Credentials` header, part of CORS",null,null],[3,"AccessControlAllowHeaders","","`Access-Control-Allow-Headers` header, part of CORS",null,null],[12,"0","","",21,null],[3,"AccessControlAllowMethods","","`Access-Control-Allow-Methods` header, part of CORS",null,null],[12,"0","","",22,null],[3,"AccessControlExposeHeaders","","`Access-Control-Expose-Headers` header, part of CORS",null,null],[12,"0","","",23,null],[3,"AccessControlMaxAge","","`Access-Control-Max-Age` header, part of CORS",null,null],[12,"0","","",24,null],[3,"AccessControlRequestHeaders","","`Access-Control-Request-Headers` header, part of CORS",null,null],[12,"0","","",25,null],[3,"AccessControlRequestMethod","","`Access-Control-Request-Method` header, part of CORS",null,null],[12,"0","","",26,null],[3,"AcceptCharset","","`Accept-Charset` header, defined in RFC7231",null,null],[12,"0","","",27,null],[3,"AcceptEncoding","","`Accept-Encoding` header, defined in RFC7231",null,null],[12,"0","","",28,null],[3,"AcceptLanguage","","`Accept-Language` header, defined in RFC7231",null,null],[12,"0","","",29,null],[3,"AcceptRanges","","`Accept-Ranges` header, defined in RFC7233",null,null],[12,"0","","",30,null],[3,"Allow","","`Allow` header, defined in RFC7231",null,null],[12,"0","","",31,null],[3,"Authorization","","`Authorization` header, defined in RFC7235",null,null],[12,"0","","",32,null],[3,"Basic","","Credential holder for Basic Authentication",null,null],[12,"username","","The username as a possibly empty string",33,null],[12,"password","","The password. `None` if the `:` delimiter character was not part of the parsed input.",33,null],[3,"Bearer","","Token holder for Bearer Authentication, most often seen with oauth",null,null],[12,"token","","Actual bearer token as a string",34,null],[3,"CacheControl","","`Cache-Control` header, defined in RFC7234",null,null],[12,"0","","",35,null],[3,"Connection","","`Connection` header, defined in RFC7230",null,null],[12,"0","","",36,null],[3,"ContentDisposition","","A `Content-Disposition` header, (re)defined in RFC6266",null,null],[12,"disposition","","The disposition",37,null],[12,"parameters","","Disposition parameters",37,null],[3,"ContentLength","","`Content-Length` header, defined in RFC7230",null,null],[12,"0","","",38,null],[3,"ContentEncoding","","`Content-Encoding` header, defined in RFC7231",null,null],[12,"0","","",39,null],[3,"ContentLanguage","","`Content-Language` header, defined in RFC7231",null,null],[12,"0","","",40,null],[3,"ContentRange","","`Content-Range` header, defined in RFC7233",null,null],[12,"0","","",41,null],[3,"ContentType","","`Content-Type` header, defined in RFC7231",null,null],[12,"0","","",42,null],[3,"Cookie","","`Cookie` header, defined in RFC6265",null,null],[12,"0","","",43,null],[3,"Date","","`Date` header, defined in RFC7231",null,null],[12,"0","","",44,null],[3,"ETag","","`ETag` header, defined in RFC7232",null,null],[12,"0","","",45,null],[3,"Expires","","`Expires` header, defined in RFC7234",null,null],[12,"0","","",46,null],[3,"From","","`From` header, defined in RFC7231",null,null],[12,"0","","",47,null],[3,"Host","","The `Host` header.",null,null],[12,"hostname","","The hostname, such a example.domain.",48,null],[12,"port","","An optional port number.",48,null],[3,"IfModifiedSince","","`If-Modified-Since` header, defined in RFC7232",null,null],[12,"0","","",49,null],[3,"IfUnmodifiedSince","","`If-Unmodified-Since` header, defined in RFC7232",null,null],[12,"0","","",50,null],[3,"LastModified","","`Last-Modified` header, defined in RFC7232",null,null],[12,"0","","",51,null],[3,"Location","","`Location` header, defined in RFC7231",null,null],[12,"0","","",52,null],[3,"Origin","","The `Origin` header.",null,null],[12,"scheme","","The scheme, such as http or https",53,null],[12,"host","","The host, such as Host{hostname: \"hyper.rs\".to_owned(), port: None}",53,null],[3,"Prefer","","`Prefer` header, defined in RFC7240",null,null],[12,"0","","",54,null],[3,"PreferenceApplied","","`Preference-Applied` header, defined in RFC7240",null,null],[12,"0","","",55,null],[3,"Referer","","`Referer` header, defined in RFC7231",null,null],[12,"0","","",56,null],[3,"Server","","`Server` header, defined in RFC7231",null,null],[12,"0","","",57,null],[3,"SetCookie","","`Set-Cookie` header, defined RFC6265",null,null],[12,"0","","",58,null],[3,"StrictTransportSecurity","","`StrictTransportSecurity` header, defined in RFC6797",null,null],[12,"include_subdomains","","Signals the UA that the HSTS Policy applies to this HSTS Host as well as any subdomains of the host's domain name.",59,null],[12,"max_age","","Specifies the number of seconds, after the reception of the STS header field, during which the UA regards the host (from whom the message was received) as a Known HSTS Host.",59,null],[3,"TransferEncoding","","`Transfer-Encoding` header, defined in RFC7230",null,null],[12,"0","","",60,null],[3,"Upgrade","","`Upgrade` header, defined in RFC7230",null,null],[12,"0","","",61,null],[3,"Protocol","","Protocols that appear in the `Upgrade` header field",null,null],[12,"name","","The protocol identifier",62,null],[12,"version","","The optional version of the protocol, often in the format \"DIGIT.DIGIT\" (e.g.. \"1.2\")",62,null],[3,"UserAgent","","`User-Agent` header, defined in RFC7231",null,null],[12,"0","","",63,null],[3,"Link","","The `Link` header, defined in RFC5988",null,null],[3,"LinkValue","","A single `link-value` of a `Link` header, based on: RFC5988",null,null],[3,"Headers","","A map of header fields on requests and responses.",null,null],[3,"HeadersItems","","An `Iterator` over the fields in a `Headers` map.",null,null],[3,"HeaderView","","Returned with the `HeadersItems` iterator.",null,null],[3,"HeaderFormatter","","A wrapper around any Header with a Display impl that calls fmt_header.",null,null],[12,"0","","",64,null],[4,"Charset","","A Mime charset.",null,null],[13,"Us_Ascii","","US ASCII",65,null],[13,"Iso_8859_1","","ISO-8859-1",65,null],[13,"Iso_8859_2","","ISO-8859-2",65,null],[13,"Iso_8859_3","","ISO-8859-3",65,null],[13,"Iso_8859_4","","ISO-8859-4",65,null],[13,"Iso_8859_5","","ISO-8859-5",65,null],[13,"Iso_8859_6","","ISO-8859-6",65,null],[13,"Iso_8859_7","","ISO-8859-7",65,null],[13,"Iso_8859_8","","ISO-8859-8",65,null],[13,"Iso_8859_9","","ISO-8859-9",65,null],[13,"Iso_8859_10","","ISO-8859-10",65,null],[13,"Shift_Jis","","Shift_JIS",65,null],[13,"Euc_Jp","","EUC-JP",65,null],[13,"Iso_2022_Kr","","ISO-2022-KR",65,null],[13,"Euc_Kr","","EUC-KR",65,null],[13,"Iso_2022_Jp","","ISO-2022-JP",65,null],[13,"Iso_2022_Jp_2","","ISO-2022-JP-2",65,null],[13,"Iso_8859_6_E","","ISO-8859-6-E",65,null],[13,"Iso_8859_6_I","","ISO-8859-6-I",65,null],[13,"Iso_8859_8_E","","ISO-8859-8-E",65,null],[13,"Iso_8859_8_I","","ISO-8859-8-I",65,null],[13,"Gb2312","","GB2312",65,null],[13,"Big5","","Big5",65,null],[13,"Koi8_R","","KOI8-R",65,null],[13,"Ext","","An arbitrary charset specified as a string",65,null],[4,"Encoding","","A value to represent an encoding used in `Transfer-Encoding` or `Accept-Encoding` header.",null,null],[13,"Chunked","","The `chunked` encoding.",66,null],[13,"Gzip","","The `gzip` encoding.",66,null],[13,"Deflate","","The `deflate` encoding.",66,null],[13,"Compress","","The `compress` encoding.",66,null],[13,"Identity","","The `identity` encoding.",66,null],[13,"EncodingExt","","Some other encoding that is less common, can be any String.",66,null],[4,"AccessControlAllowOrigin","","The `Access-Control-Allow-Origin` response header, part of CORS",null,null],[13,"Any","","Allow all origins",67,null],[13,"Null","","A hidden origin",67,null],[13,"Value","","Allow one particular origin",67,null],[4,"RangeUnit","","Range Units, described in RFC7233",null,null],[13,"Bytes","","Indicating byte-range requests are supported.",68,null],[13,"None","","Reserved as keyword, indicating no ranges are supported.",68,null],[13,"Unregistered","","The given range unit is not registered at IANA.",68,null],[4,"CacheDirective","","`CacheControl` contains a list of these directives.",null,null],[13,"NoCache","","\"no-cache\"",69,null],[13,"NoStore","","\"no-store\"",69,null],[13,"NoTransform","","\"no-transform\"",69,null],[13,"OnlyIfCached","","\"only-if-cached\"",69,null],[13,"MaxAge","","\"max-age=delta\"",69,null],[13,"MaxStale","","\"max-stale=delta\"",69,null],[13,"MinFresh","","\"min-fresh=delta\"",69,null],[13,"MustRevalidate","","\"must-revalidate\"",69,null],[13,"Public","","\"public\"",69,null],[13,"Private","","\"private\"",69,null],[13,"ProxyRevalidate","","\"proxy-revalidate\"",69,null],[13,"SMaxAge","","\"s-maxage=delta\"",69,null],[13,"Extension","","Extension directives. Optionally include an argument.",69,null],[4,"ConnectionOption","","Values that can be in the `Connection` header.",null,null],[13,"KeepAlive","","The `keep-alive` connection value.",70,null],[13,"Close","","The `close` connection value.",70,null],[13,"ConnectionHeader","","Values in the Connection header that are supposed to be names of other Headers.",70,null],[4,"DispositionType","","The implied disposition of the content of the HTTP body",null,null],[13,"Inline","","Inline implies default processing",71,null],[13,"Attachment","","Attachment implies that the recipient should prompt the user to save the response locally, rather than process it normally (as per its media type).",71,null],[13,"Ext","","Extension type.  Should be handled by recipients the same way as Attachment",71,null],[4,"DispositionParam","","A parameter to the disposition type",null,null],[13,"Filename","","A Filename consisting of a Charset, an optional LanguageTag, and finally a sequence of bytes representing the filename",72,null],[13,"Ext","","Extension type consisting of token and value.  Recipients should ignore unrecognized parameters.",72,null],[4,"ContentRangeSpec","","Content-Range, described in RFC7233",null,null],[13,"Bytes","","Byte range",73,null],[12,"range","hyper::header::ContentRangeSpec","First and last bytes of the range, omitted if request could not be satisfied",73,null],[12,"instance_length","","Total length of the instance, can be omitted if unknown",73,null],[13,"Unregistered","hyper::header","Custom range, with unit not registered at IANA",73,null],[12,"unit","hyper::header::ContentRangeSpec","other-range-unit",73,null],[12,"resp","","other-range-resp",73,null],[4,"Expect","hyper::header","The `Expect` header.",null,null],[13,"Continue","","The value `100-continue`.",74,null],[4,"IfMatch","","`If-Match` header, defined in RFC7232",null,null],[13,"Any","","Any value is a match",75,null],[13,"Items","","Only the listed items are a match",75,null],[4,"IfNoneMatch","","`If-None-Match` header, defined in RFC7232",null,null],[13,"Any","","Any value is a match",76,null],[13,"Items","","Only the listed items are a match",76,null],[4,"IfRange","","`If-Range` header, defined in RFC7233",null,null],[13,"EntityTag","","The entity-tag the client has of the resource",77,null],[13,"Date","","The date when the client retrieved the resource",77,null],[4,"Pragma","","The `Pragma` header defined by HTTP/1.0.",null,null],[13,"NoCache","","Corresponds to the `no-cache` value.",78,null],[13,"Ext","","Every value other than `no-cache`.",78,null],[4,"Preference","","Prefer contains a list of these preferences.",null,null],[13,"RespondAsync","","\"respond-async\"",79,null],[13,"ReturnRepresentation","","\"return=representation\"",79,null],[13,"ReturnMinimal","","\"return=minimal\"",79,null],[13,"HandlingStrict","","\"handling=strict\"",79,null],[13,"HandlingLeniant","","\"handling=leniant\"",79,null],[13,"Wait","","\"wait=delta\"",79,null],[13,"Extension","","Extension preferences. Always has a value, if none is specified it is just \"\". A preference can also have a list of parameters.",79,null],[4,"Range","","`Range` header, defined in RFC7233",null,null],[13,"Bytes","","Byte range",80,null],[13,"Unregistered","","Custom range, with unit not registered at IANA (`other-range-unit`: String , `other-range-set`: String)",80,null],[4,"ByteRangeSpec","","Each `Range::Bytes` header can contain one or more `ByteRangeSpecs`. Each `ByteRangeSpec` defines a range of bytes to fetch",null,null],[13,"FromTo","","Get all bytes between x and y (\"x-y\")",81,null],[13,"AllFrom","","Get all bytes starting from x (\"x-\")",81,null],[13,"Last","","Get last x bytes (\"-x\")",81,null],[4,"ReferrerPolicy","","`Referrer-Policy` header, part of Referrer Policy",null,null],[13,"NoReferrer","","`no-referrer`",82,null],[13,"NoReferrerWhenDowngrade","","`no-referrer-when-downgrade`",82,null],[13,"SameOrigin","","`same-origin`",82,null],[13,"Origin","","`origin`",82,null],[13,"OriginWhenCrossOrigin","","`origin-when-cross-origin`",82,null],[13,"UnsafeUrl","","`unsafe-url`",82,null],[13,"StrictOrigin","","`strict-origin`",82,null],[13,"StrictOriginWhenCrossOrigin","","`strict-origin-when-cross-origin`",82,null],[4,"ProtocolName","","A protocol name used to identify a spefic protocol. Names are case-sensitive except for the `WebSocket` value.",null,null],[13,"Http","","`HTTP` value, Hypertext Transfer Protocol",83,null],[13,"Tls","","`TLS` value, Transport Layer Security RFC2817",83,null],[13,"WebSocket","","`WebSocket` value, matched case insensitively,Web Socket Protocol RFC6455",83,null],[13,"H2c","","`h2c` value, HTTP/2 over cleartext TCP",83,null],[13,"Unregistered","","Any other protocol name not known to hyper",83,null],[4,"Vary","","`Vary` header, defined in RFC7231",null,null],[13,"Any","","Any value is a match",84,null],[13,"Items","","Only the listed items are a match",84,null],[4,"RelationType","","A Link Relation Type Enum based on: RFC5988",null,null],[13,"Alternate","","alternate.",85,null],[13,"Appendix","","appendix.",85,null],[13,"Bookmark","","bookmark.",85,null],[13,"Chapter","","chapter.",85,null],[13,"Contents","","contents.",85,null],[13,"Copyright","","copyright.",85,null],[13,"Current","","current.",85,null],[13,"DescribedBy","","describedby.",85,null],[13,"Edit","","edit.",85,null],[13,"EditMedia","","edit-media.",85,null],[13,"Enclosure","","enclosure.",85,null],[13,"First","","first.",85,null],[13,"Glossary","","glossary.",85,null],[13,"Help","","help.",85,null],[13,"Hub","","hub.",85,null],[13,"Index","","index.",85,null],[13,"Last","","last.",85,null],[13,"LatestVersion","","latest-version.",85,null],[13,"License","","license.",85,null],[13,"Next","","next.",85,null],[13,"NextArchive","","next-archive.",85,null],[13,"Payment","","payment.",85,null],[13,"Prev","","prev.",85,null],[13,"PredecessorVersion","","predecessor-version.",85,null],[13,"Previous","","previous.",85,null],[13,"PrevArchive","","prev-archive.",85,null],[13,"Related","","related.",85,null],[13,"Replies","","replies.",85,null],[13,"Section","","section.",85,null],[13,"RelationTypeSelf","","self.",85,null],[13,"Service","","service.",85,null],[13,"Start","","start.",85,null],[13,"Stylesheet","","stylesheet.",85,null],[13,"Subsection","","subsection.",85,null],[13,"SuccessorVersion","","successor-version.",85,null],[13,"Up","","up.",85,null],[13,"VersionHistory","","versionHistory.",85,null],[13,"Via","","via.",85,null],[13,"WorkingCopy","","working-copy.",85,null],[13,"WorkingCopyOf","","working-copy-of.",85,null],[13,"ExtRelType","","ext-rel-type.",85,null],[4,"MediaDesc","","A Media Descriptors Enum based on: https://www.w3.org/TR/html401/types.html#h-6.13",null,null],[13,"Screen","","screen.",86,null],[13,"Tty","","tty.",86,null],[13,"Tv","","tv.",86,null],[13,"Projection","","projection.",86,null],[13,"Handheld","","handheld.",86,null],[13,"Print","","print.",86,null],[13,"Braille","","braille.",86,null],[13,"Aural","","aural.",86,null],[13,"All","","all.",86,null],[13,"Extension","","Unrecognized media descriptor extension.",86,null],[5,"qitem","","Convinience function to wrap a value in a `QualityItem` Sets `q` to the default 1.0",null,{"inputs":[{"name":"t"}],"output":{"name":"qualityitem"}}],[5,"q","","Convenience function to create a `Quality` from a float.",null,{"inputs":[{"name":"f32"}],"output":{"name":"quality"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"accept"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"accept"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"accept"}],"output":{"name":"bool"}}],[11,"deref","","",20,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",20,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",20,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",20,null],[11,"fmt_header","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"star","","A constructor to easily create `Accept: */*`.",20,{"inputs":[],"output":{"name":"accept"}}],[11,"json","","A constructor to easily create `Accept: application/json`.",20,{"inputs":[],"output":{"name":"accept"}}],[11,"text","","A constructor to easily create `Accept: text/*`.",20,{"inputs":[],"output":{"name":"accept"}}],[11,"image","","A constructor to easily create `Accept: image/*`.",20,{"inputs":[],"output":{"name":"accept"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolallowcredentials"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"accesscontrolallowcredentials"}],"output":{"name":"bool"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",87,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",87,null],[11,"fmt_header","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolallowheaders"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"accesscontrolallowheaders"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"accesscontrolallowheaders"}],"output":{"name":"bool"}}],[11,"deref","","",21,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",21,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",21,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",21,null],[11,"fmt_header","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolallowmethods"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"accesscontrolallowmethods"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"accesscontrolallowmethods"}],"output":{"name":"bool"}}],[11,"deref","","",22,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",22,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",22,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",22,null],[11,"fmt_header","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolalloworigin"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",67,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",67,null],[11,"fmt_header","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolexposeheaders"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"accesscontrolexposeheaders"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"accesscontrolexposeheaders"}],"output":{"name":"bool"}}],[11,"deref","","",23,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",23,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",23,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",23,null],[11,"fmt_header","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolmaxage"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"accesscontrolmaxage"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"accesscontrolmaxage"}],"output":{"name":"bool"}}],[11,"deref","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"deref_mut","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"header_name","","",24,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",24,null],[11,"fmt_header","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolrequestheaders"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestheaders"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestheaders"}],"output":{"name":"bool"}}],[11,"deref","","",25,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",25,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",25,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",25,null],[11,"fmt_header","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolrequestmethod"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestmethod"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestmethod"}],"output":{"name":"bool"}}],[11,"deref","","",26,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"deref_mut","","",26,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"header_name","","",26,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",26,null],[11,"fmt_header","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"acceptcharset"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"acceptcharset"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"acceptcharset"}],"output":{"name":"bool"}}],[11,"deref","","",27,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",27,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",27,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",27,null],[11,"fmt_header","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"acceptencoding"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"acceptencoding"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"acceptencoding"}],"output":{"name":"bool"}}],[11,"deref","","",28,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",28,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",28,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",28,null],[11,"fmt_header","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"acceptlanguage"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"acceptlanguage"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"acceptlanguage"}],"output":{"name":"bool"}}],[11,"deref","","",29,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",29,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",29,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",29,null],[11,"fmt_header","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"acceptranges"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"acceptranges"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"acceptranges"}],"output":{"name":"bool"}}],[11,"deref","","",30,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",30,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",30,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",30,null],[11,"fmt_header","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"rangeunit"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"rangeunit"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"rangeunit"}],"output":{"name":"bool"}}],[11,"from_str","","",68,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"allow"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"allow"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"allow"}],"output":{"name":"bool"}}],[11,"deref","","",31,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",31,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",31,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",31,null],[11,"fmt_header","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"authorization"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"authorization"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"authorization"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",32,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"deref_mut","","",32,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"header_name","","",32,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",32,null],[11,"fmt_header","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"basic"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"basic"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"basic"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"scheme","","",33,{"inputs":[],"output":{"name":"option"}}],[11,"fmt_scheme","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",33,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bearer"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"bearer"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"bearer"}],"output":{"name":"bool"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"scheme","","",34,{"inputs":[],"output":{"name":"option"}}],[11,"fmt_scheme","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",34,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"cachecontrol"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"cachecontrol"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"cachecontrol"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",35,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",35,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",35,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",35,null],[11,"fmt_header","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"cachedirective"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"cachedirective"}],"output":{"name":"bool"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"cachedirective"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",69,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"cookie"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",43,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",43,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",43,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",43,null],[11,"fmt_header","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"connectionoption"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"connectionoption"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"connectionoption"}],"output":{"name":"bool"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",70,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"connection"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"connection"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"connection"}],"output":{"name":"bool"}}],[11,"deref","","",36,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",36,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",36,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",36,null],[11,"fmt_header","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"close","","A constructor to easily create a `Connection: close` header.",36,{"inputs":[],"output":{"name":"connection"}}],[11,"keep_alive","","A constructor to easily create a `Connection: keep-alive` header.",36,{"inputs":[],"output":{"name":"connection"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"dispositiontype"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"dispositiontype"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"dispositiontype"}],"output":{"name":"bool"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"dispositionparam"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"dispositionparam"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"dispositionparam"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"contentdisposition"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"contentdisposition"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"contentdisposition"}],"output":{"name":"bool"}}],[11,"header_name","","",37,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",37,null],[11,"fmt_header","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"contentencoding"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"contentencoding"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"contentencoding"}],"output":{"name":"bool"}}],[11,"deref","","",39,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",39,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",39,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",39,null],[11,"fmt_header","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"contentlanguage"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"contentlanguage"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"contentlanguage"}],"output":{"name":"bool"}}],[11,"deref","","",40,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",40,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",40,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",40,null],[11,"fmt_header","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"contentlength"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"contentlength"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"contentlength"}],"output":{"name":"bool"}}],[11,"header_name","","",38,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",38,null],[11,"fmt_header","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",38,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"deref_mut","","",38,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"contentrange"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"contentrange"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"contentrange"}],"output":{"name":"bool"}}],[11,"deref","","",41,{"inputs":[{"name":"self"}],"output":{"name":"contentrangespec"}}],[11,"deref_mut","","",41,{"inputs":[{"name":"self"}],"output":{"name":"contentrangespec"}}],[11,"header_name","","",41,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",41,null],[11,"fmt_header","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"contentrangespec"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"self"},{"name":"contentrangespec"}],"output":{"name":"bool"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"contentrangespec"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",73,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"contenttype"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"contenttype"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"contenttype"}],"output":{"name":"bool"}}],[11,"deref","","",42,{"inputs":[{"name":"self"}],"output":{"name":"mime"}}],[11,"deref_mut","","",42,{"inputs":[{"name":"self"}],"output":{"name":"mime"}}],[11,"header_name","","",42,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",42,null],[11,"fmt_header","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"json","","A constructor  to easily create a `Content-Type: application/json` header.",42,{"inputs":[],"output":{"name":"contenttype"}}],[11,"plaintext","","A constructor  to easily create a `Content-Type: text/plain; charset=utf-8` header.",42,{"inputs":[],"output":{"name":"contenttype"}}],[11,"html","","A constructor  to easily create a `Content-Type: text/html; charset=utf-8` header.",42,{"inputs":[],"output":{"name":"contenttype"}}],[11,"form_url_encoded","","A constructor  to easily create a `Content-Type: application/www-form-url-encoded` header.",42,{"inputs":[],"output":{"name":"contenttype"}}],[11,"jpeg","","A constructor  to easily create a `Content-Type: image/jpeg` header.",42,{"inputs":[],"output":{"name":"contenttype"}}],[11,"png","","A constructor  to easily create a `Content-Type: image/png` header.",42,{"inputs":[],"output":{"name":"contenttype"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"deref","","",44,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",44,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"header_name","","",44,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",44,null],[11,"fmt_header","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"etag"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"etag"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"etag"}],"output":{"name":"bool"}}],[11,"deref","","",45,{"inputs":[{"name":"self"}],"output":{"name":"entitytag"}}],[11,"deref_mut","","",45,{"inputs":[{"name":"self"}],"output":{"name":"entitytag"}}],[11,"header_name","","",45,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",45,null],[11,"fmt_header","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"expect"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"expect"}],"output":{"name":"bool"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",74,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",74,null],[11,"fmt_header","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"expires"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"expires"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"expires"}],"output":{"name":"bool"}}],[11,"deref","","",46,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",46,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"header_name","","",46,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",46,null],[11,"fmt_header","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"from"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"from"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"from"}],"output":{"name":"bool"}}],[11,"deref","","",47,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",47,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"header_name","","",47,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",47,null],[11,"fmt_header","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"host"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",48,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",48,null],[11,"fmt_header","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",48,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"ifmatch"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"ifmatch"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"self"},{"name":"ifmatch"}],"output":{"name":"bool"}}],[11,"header_name","","",75,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",75,null],[11,"fmt_header","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"ifmodifiedsince"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"ifmodifiedsince"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"ifmodifiedsince"}],"output":{"name":"bool"}}],[11,"deref","","",49,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",49,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"header_name","","",49,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",49,null],[11,"fmt_header","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"ifnonematch"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"ifnonematch"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"self"},{"name":"ifnonematch"}],"output":{"name":"bool"}}],[11,"header_name","","",76,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",76,null],[11,"fmt_header","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"ifrange"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"ifrange"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"self"},{"name":"ifrange"}],"output":{"name":"bool"}}],[11,"header_name","","",77,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",77,null],[11,"fmt_header","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"ifunmodifiedsince"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"ifunmodifiedsince"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"ifunmodifiedsince"}],"output":{"name":"bool"}}],[11,"deref","","",50,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",50,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"header_name","","",50,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",50,null],[11,"fmt_header","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"lastmodified"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"lastmodified"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"lastmodified"}],"output":{"name":"bool"}}],[11,"deref","","",51,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",51,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"header_name","","",51,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",51,null],[11,"fmt_header","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"location"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"deref","","",52,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",52,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"header_name","","",52,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",52,null],[11,"fmt_header","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Origin` header.",53,{"inputs":[{"name":"s"},{"name":"h"},{"name":"option"}],"output":{"name":"origin"}}],[11,"header_name","","",53,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",53,null],[11,"from_str","","",53,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt_header","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"pragma"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"pragma"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"self"},{"name":"pragma"}],"output":{"name":"bool"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",78,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",78,null],[11,"fmt_header","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"prefer"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"prefer"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"prefer"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",54,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",54,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",54,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",54,null],[11,"fmt_header","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"preference"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"self"},{"name":"preference"}],"output":{"name":"bool"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"preference"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",79,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"preferenceapplied"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"preferenceapplied"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"preferenceapplied"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",55,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",55,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",55,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",55,null],[11,"fmt_header","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"byterangespec"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"self"},{"name":"byterangespec"}],"output":{"name":"bool"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"byterangespec"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bytes","","Get the most common byte range header (\"bytes=from-to\")",80,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"range"}}],[11,"bytes_multi","","Get byte range header with multiple subranges (\"bytes=from1-to1,from2-to2,fromX-toX\")",80,{"inputs":[{"name":"vec"}],"output":{"name":"range"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",80,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",81,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"header_name","","",80,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",80,null],[11,"fmt_header","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"referer"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"referer"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"referer"}],"output":{"name":"bool"}}],[11,"deref","","",56,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",56,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"header_name","","",56,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",56,null],[11,"fmt_header","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"referrerpolicy"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"referrerpolicy"}],"output":{"name":"bool"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",82,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",82,null],[11,"fmt_header","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"server"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"server"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"server"}],"output":{"name":"bool"}}],[11,"deref","","",57,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",57,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"header_name","","",57,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",57,null],[11,"fmt_header","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"setcookie"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"setcookie"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"setcookie"}],"output":{"name":"bool"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",58,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",58,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",58,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",58,null],[11,"fmt_header","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_multi_header","","",58,{"inputs":[{"name":"self"},{"name":"multilineformatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"stricttransportsecurity"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"stricttransportsecurity"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"stricttransportsecurity"}],"output":{"name":"bool"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"including_subdomains","","Create an STS header that includes subdomains",59,{"inputs":[{"name":"u64"}],"output":{"name":"stricttransportsecurity"}}],[11,"excluding_subdomains","","Create an STS header that excludes subdomains",59,{"inputs":[{"name":"u64"}],"output":{"name":"stricttransportsecurity"}}],[11,"from_str","","",59,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"header_name","","",59,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",59,null],[11,"fmt_header","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"transferencoding"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"transferencoding"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"transferencoding"}],"output":{"name":"bool"}}],[11,"deref","","",60,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",60,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",60,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",60,null],[11,"fmt_header","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"upgrade"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"upgrade"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"upgrade"}],"output":{"name":"bool"}}],[11,"deref","","",61,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",61,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",61,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",61,null],[11,"fmt_header","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"protocolname"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"protocolname"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"protocolname"}],"output":{"name":"bool"}}],[11,"from_str","","",83,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"protocol"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"protocol"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"protocol"}],"output":{"name":"bool"}}],[11,"new","","Creates a new Protocol with the given name and version",62,{"inputs":[{"name":"protocolname"},{"name":"option"}],"output":{"name":"protocol"}}],[11,"from_str","","",62,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"useragent"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"useragent"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"useragent"}],"output":{"name":"bool"}}],[11,"deref","","",63,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",63,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"header_name","","",63,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",63,null],[11,"fmt_header","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"vary"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"vary"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"self"},{"name":"vary"}],"output":{"name":"bool"}}],[11,"header_name","","",84,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",84,null],[11,"fmt_header","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"link"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"link"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"self"},{"name":"link"}],"output":{"name":"bool"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"linkvalue"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"linkvalue"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"linkvalue"}],"output":{"name":"bool"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"mediadesc"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"mediadesc"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"self"},{"name":"mediadesc"}],"output":{"name":"bool"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"relationtype"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"relationtype"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"self"},{"name":"relationtype"}],"output":{"name":"bool"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create `Link` from a `Vec<LinkValue>`.",88,{"inputs":[{"name":"vec"}],"output":{"name":"link"}}],[11,"values","","Get the `Link` header's `LinkValue`s.",88,null],[11,"push_value","","Add a `LinkValue` instance to the `Link` header's values.",88,{"inputs":[{"name":"self"},{"name":"linkvalue"}],"output":null}],[11,"new","","Create `LinkValue` from URI-Reference.",89,{"inputs":[{"name":"t"}],"output":{"name":"linkvalue"}}],[11,"link","","Get the `LinkValue`'s value.",89,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"rel","","Get the `LinkValue`'s `rel` parameter(s).",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"anchor","","Get the `LinkValue`'s `anchor` parameter.",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rev","","Get the `LinkValue`'s `rev` parameter(s).",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"href_lang","","Get the `LinkValue`'s `hreflang` parameter(s).",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"media_desc","","Get the `LinkValue`'s `media` parameter(s).",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"title","","Get the `LinkValue`'s `title` parameter.",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"title_star","","Get the `LinkValue`'s `title*` parameter.",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"media_type","","Get the `LinkValue`'s `type` parameter.",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_rel","","Add a `RelationType` to the `LinkValue`'s `rel` parameter.",89,{"inputs":[{"name":"self"},{"name":"relationtype"}],"output":{"name":"linkvalue"}}],[11,"set_anchor","","Set `LinkValue`'s `anchor` parameter.",89,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"linkvalue"}}],[11,"push_rev","","Add a `RelationType` to the `LinkValue`'s `rev` parameter.",89,{"inputs":[{"name":"self"},{"name":"relationtype"}],"output":{"name":"linkvalue"}}],[11,"push_href_lang","","Add a `LanguageTag` to the `LinkValue`'s `hreflang` parameter.",89,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"linkvalue"}}],[11,"push_media_desc","","Add a `MediaDesc` to the `LinkValue`'s `media_desc` parameter.",89,{"inputs":[{"name":"self"},{"name":"mediadesc"}],"output":{"name":"linkvalue"}}],[11,"set_title","","Set `LinkValue`'s `title` parameter.",89,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"linkvalue"}}],[11,"set_title_star","","Set `LinkValue`'s `title*` parameter.",89,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"linkvalue"}}],[11,"set_media_type","","Set `LinkValue`'s `type` parameter.",89,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"linkvalue"}}],[11,"header_name","","",88,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",88,null],[11,"fmt_header","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",88,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",86,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",85,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"charset"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",65,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"encoding"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",66,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"entitytag"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"new","","Constructs a new EntityTag. # Panics If the tag contains invalid characters.",16,{"inputs":[{"name":"bool"},{"name":"string"}],"output":{"name":"entitytag"}}],[11,"weak","","Constructs a new weak EntityTag. # Panics If the tag contains invalid characters.",16,{"inputs":[{"name":"string"}],"output":{"name":"entitytag"}}],[11,"strong","","Constructs a new strong EntityTag. # Panics If the tag contains invalid characters.",16,{"inputs":[{"name":"string"}],"output":{"name":"entitytag"}}],[11,"tag","","Get the tag.",16,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"set_tag","","Set the tag. # Panics If the tag contains invalid characters.",16,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"strong_eq","","For strong comparison two entity-tags are equivalent if both are not weak and their opaque-tags match character-by-character.",16,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"weak_eq","","For weak comparison two entity-tags are equivalent if their opaque-tags match character-by-character, regardless of either or both being tagged as \"weak\".",16,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"strong_ne","","The inverse of `EntityTag.strong_eq()`.",16,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"weak_ne","","The inverse of `EntityTag.weak_eq()`.",16,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",16,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"cmp","","",17,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"ordering"}}],[11,"from_str","","",17,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"quality"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",18,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"ordering"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"option"}}],[11,"lt","","",18,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"le","","",18,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"gt","","",18,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"ge","","",18,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"quality"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"qualityitem"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"qualityitem"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"qualityitem"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `QualityItem` from an item and a quality. The item can be of any type. The quality should be a value in the range [0, 1].",19,{"inputs":[{"name":"t"},{"name":"quality"}],"output":{"name":"qualityitem"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"self"},{"name":"qualityitem"}],"output":{"name":"option"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",19,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"parsing","","Utility functions for Header implementations.",null,null],[3,"ExtendedValue","hyper::header::parsing","An extended header parameter value (i.e., tagged with a character set and optionally, a language), as defined in RFC 5987.",null,null],[12,"charset","","The character set that is used to encode the `value` to a string.",90,null],[12,"language_tag","","The human language details of the `value`, if available.",90,null],[12,"value","","The parameter value, as expressed in octets.",90,null],[3,"HTTP_VALUE","","This encode set is used for HTTP header values and is defined at https://tools.ietf.org/html/rfc5987#section-3.2",null,null],[5,"from_one_raw_str","","Reads a single raw string when parsing a header.",null,null],[5,"from_raw_str","","Reads a raw string into a value.",null,null],[5,"from_comma_delimited","","Reads a comma-delimited raw header into a Vec.",null,null],[5,"fmt_comma_delimited","","Format an array into a comma-delimited string.",null,null],[5,"parse_extended_value","","Parses extended header parameter values (`ext-value`), as defined in RFC 5987.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"extendedvalue"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"extendedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"extendedvalue"}],"output":{"name":"bool"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"http_value"}}],[11,"contains","","",91,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Scheme","hyper::header","An Authorization scheme to be used in the header.",null,null],[10,"scheme","","An optional Scheme name.",92,{"inputs":[],"output":{"name":"option"}}],[10,"fmt_scheme","","Format the Scheme data into a header value.",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Header","","A trait for any object that will represent a header field and value.",null,null],[10,"header_name","","Returns the name of the header field this belongs to.",93,{"inputs":[],"output":{"name":"str"}}],[10,"parse_header","","Parse a header from a raw stream of bytes.",93,null],[8,"HeaderFormat","","A trait for any object that will represent a header field and value.",null,null],[10,"fmt_header","","Format a header to be output into a TcpStream.",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"HeaderClone","","Internal implementation detail.",null,null],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"new","","Creates a new, empty headers map.",95,{"inputs":[],"output":{"name":"headers"}}],[11,"set","","Set a header field to the corresponding value.",95,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"get_raw","","Access the raw value of a header.",95,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"set_raw","","Set the raw value of a header, bypassing any typed headers.",95,{"inputs":[{"name":"self"},{"name":"k"},{"name":"vec"}],"output":null}],[11,"append_raw","","Append a value to raw value of this header.",95,{"inputs":[{"name":"self"},{"name":"k"},{"name":"vec"}],"output":null}],[11,"remove_raw","","Remove a header set by set_raw",95,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"get","","Get a reference to the header field's value, if it exists.",95,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_mut","","Get a mutable reference to the header field's value, if it exists.",95,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"has","","Returns a boolean of whether a certain header is in the map.",95,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remove","","Removes a header from the map, if one existed. Returns true if a header has been removed.",95,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the header fields.",95,{"inputs":[{"name":"self"}],"output":{"name":"headersitems"}}],[11,"len","","Returns the number of headers in the map.",95,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","Remove all headers from the map.",95,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"headers"}],"output":{"name":"bool"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",96,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Check if a HeaderView is a certain Header.",97,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"name","","Get the Header name as a slice.",97,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"value","","Cast the value to a certain Header type.",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"value_string","","Get just the header value as a String.",97,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"extend","","",95,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"from_iter","","",95,{"inputs":[{"name":"i"}],"output":{"name":"headers"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"http","hyper","Pieces pertaining to the HTTP message protocol.",null,null],[3,"RawStatus","hyper::http","The raw status code and reason-phrase.",null,null],[12,"0","","",98,null],[12,"1","","",98,null],[5,"should_keep_alive","","Checks if a connection should be kept alive.",null,{"inputs":[{"name":"httpversion"},{"name":"headers"}],"output":{"name":"bool"}}],[0,"h1","","Adapts the HTTP/1.1 implementation into the `HttpMessage` API.",null,null],[3,"Http11Message","hyper::http::h1","An implementation of the `HttpMessage` trait for HTTP/1.1.",null,null],[3,"Http11Protocol","","The `Protocol` implementation provides HTTP/1.1 messages.",null,null],[3,"EndError","","",null,null],[3,"Incoming","","An Incoming Message head. Includes request/status line, and headers.",null,null],[12,"version","","HTTP version of the message.",99,null],[12,"subject","","Subject (request line or status line) of Incoming message.",99,null],[12,"headers","","Headers of the Incoming message.",99,null],[4,"HttpReader","","Readers to handle different Transfer-Encodings.",null,null],[13,"SizedReader","","A Reader used when a Content-Length header is passed with a positive integer.",100,null],[13,"ChunkedReader","","A Reader used when Transfer-Encoding is `chunked`.",100,null],[13,"EofReader","","A Reader used for responses that don't indicate a length or chunked.",100,null],[13,"EmptyReader","","A Reader used for messages that should never have a body.",100,null],[4,"HttpWriter","","Writers to handle different Transfer-Encodings.",null,null],[13,"ThroughWriter","","A no-op Writer, used initially before Transfer-Encoding is determined.",101,null],[13,"ChunkedWriter","","A Writer for when Transfer-Encoding includes `chunked`.",101,null],[13,"SizedWriter","","A Writer for when Content-Length is set.",101,null],[13,"EmptyWriter","","A writer that should not write any body.",101,null],[5,"parse_request","","Parses a request into an Incoming message head.",null,{"inputs":[{"name":"bufreader"}],"output":{"name":"result"}}],[5,"parse_response","","Parses a response into an Incoming message head.",null,{"inputs":[{"name":"bufreader"}],"output":{"name":"result"}}],[17,"CR","","The `\\r` byte.",null,null],[17,"LF","","The `\\n` byte.",null,null],[17,"LINE_ENDING","","The bytes `\\r\\n`.",null,null],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",102,null],[11,"flush","","",102,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",102,null],[11,"set_outgoing","","",102,{"inputs":[{"name":"self"},{"name":"requesthead"}],"output":{"name":"result"}}],[11,"get_incoming","","",102,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"has_body","","",102,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_read_timeout","","",102,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",102,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"close_connection","","",102,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_proxied","","",102,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"into_inner","","Consumes the `Http11Message` and returns the underlying `NetworkStream`.",102,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"get_ref","","Gets a borrowed reference to the underlying `NetworkStream`, regardless of the state of the `Http11Message`.",102,{"inputs":[{"name":"self"}],"output":{"name":"networkstream"}}],[11,"get_mut","","Gets a mutable reference to the underlying `NetworkStream`, regardless of the state of the `Http11Message`.",102,{"inputs":[{"name":"self"}],"output":{"name":"networkstream"}}],[11,"with_stream","","Creates a new `Http11Message` that will use the given `NetworkStream` for communicating to the peer.",102,{"inputs":[{"name":"box"}],"output":{"name":"http11message"}}],[11,"flush_outgoing","","Flushes the current outgoing content and moves the stream into the `stream` property.",102,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new_message","","",103,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[11,"with_connector","","Creates a new `Http11Protocol` instance that will use the given `NetworkConnector` for establishing HTTP connections.",103,{"inputs":[{"name":"c"}],"output":{"name":"http11protocol"}}],[11,"into_inner","","Unwraps this HttpReader and returns the underlying Reader.",100,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_ref","","Gets a borrowed reference to the underlying Reader.",100,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Gets a mutable reference to the underlying Reader.",100,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",100,null],[11,"into_inner","","Unwraps the HttpWriter and returns the underlying Writer.",101,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_ref","","Access the inner Writer.",101,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Access the inner Writer mutably.",101,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"end","","Ends the HttpWriter, and returns the underlying Writer.",101,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",101,null],[11,"flush","","",101,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"message","hyper::http","Defines the `HttpMessage` trait that serves to encapsulate the operations of a single request-response cycle on any HTTP connection.",null,null],[3,"RequestHead","hyper::http::message","Describes a request.",null,null],[12,"headers","","The headers of the request",105,null],[12,"method","","The method of the request",105,null],[12,"url","","The URL of the request",105,null],[3,"ResponseHead","","Describes a response.",null,null],[12,"headers","","The headers of the reponse",106,null],[12,"raw_status","","The raw status line of the response",106,null],[12,"version","","The HTTP/2 version which generated the response",106,null],[8,"Protocol","","The trait provides an API for creating new `HttpMessage`s depending on the underlying HTTP protocol.",null,null],[10,"new_message","","Creates a fresh `HttpMessage` bound to the given host, based on the given protocol scheme.",107,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[8,"HttpMessage","","The trait provides an API for sending an receiving HTTP messages.",null,null],[10,"set_outgoing","","Initiates a new outgoing request.",108,{"inputs":[{"name":"self"},{"name":"requesthead"}],"output":{"name":"result"}}],[10,"get_incoming","","Obtains the incoming response and returns its head (i.e. the `ResponseHead` struct)",108,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_read_timeout","","Set the read timeout duration for this message.",108,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"set_write_timeout","","Set the write timeout duration for this message.",108,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"close_connection","","Closes the underlying HTTP connection.",108,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"has_body","","Returns whether the incoming message has a body.",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_proxied","","Called when the Client wishes to use a Proxy.",108,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"requesthead"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"responsehead"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Is the underlying type in this trait object a T?",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","If the underlying type is T, get a reference to the contained data.",108,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","If the underlying type is T, get a mutable reference to the contained data.",108,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast","","If the underlying type is T, extract it.",108,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"clone","hyper::http","",98,{"inputs":[{"name":"self"}],"output":{"name":"rawstatus"}}],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"rawstatus"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"self"},{"name":"rawstatus"}],"output":{"name":"bool"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"net","hyper","A collection of traits abstracting over Listeners and Streams.",null,null],[3,"NetworkConnections","hyper::net","An iterator wrapper over a `NetworkAcceptor`.",null,null],[3,"HttpListener","","A `NetworkListener` for `HttpStream`s.",null,null],[3,"HttpStream","","A wrapper around a `TcpStream`.",null,null],[12,"0","","",109,null],[3,"HttpConnector","","A connector that will produce HttpStreams.",null,null],[3,"HttpsListener","","A Http Listener over SSL.",null,null],[3,"HttpsConnector","","A connector that can protect HTTP streams using SSL.",null,null],[4,"Fresh","","The write-status indicating headers have not been written.",null,null],[4,"Streaming","","The write-status indicating headers have been written.",null,null],[4,"HttpsStream","","A stream over the HTTP protocol, possibly protected by SSL.",null,null],[13,"Http","","A plain text stream.",110,null],[13,"Https","","A stream protected by SSL.",110,null],[8,"NetworkListener","","An abstraction to listen for connections on a certain port.",null,null],[16,"Stream","","The stream produced for each connection.",111,null],[10,"accept","","Returns an iterator of streams.",111,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"local_addr","","Get the address this Listener ended up listening on.",111,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"incoming","","Returns an iterator over incoming connections.",111,{"inputs":[{"name":"self"}],"output":{"name":"networkconnections"}}],[11,"set_read_timeout","","Sets the read timeout for all streams that are accepted",111,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"set_write_timeout","","Sets the write timeout for all streams that are accepted",111,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[8,"NetworkStream","","An abstraction over streams that a `Server` can utilize.",null,null],[10,"peer_addr","","Get the remote address of the underlying connection.",112,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_read_timeout","","Set the maximum time to wait for a read to complete.",112,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"set_write_timeout","","Set the maximum time to wait for a write to complete.",112,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"close","","This will be called when Stream should no longer be kept alive.",112,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[8,"NetworkConnector","","A connector creates a NetworkStream.",null,null],[16,"Stream","","Type of `Stream` to create",113,null],[10,"connect","","Connect to a remote address.",113,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[8,"SslClient","","An abstraction to allow any SSL implementation to be used with client-side HttpsStreams.",null,null],[16,"Stream","","The protected stream.",114,null],[10,"wrap_client","","Wrap a client stream with SSL.",114,{"inputs":[{"name":"self"},{"name":"t"},{"name":"str"}],"output":{"name":"result"}}],[8,"SslServer","","An abstraction to allow any SSL implementation to be used with server-side HttpsStreams.",null,null],[16,"Stream","","The protected stream.",115,null],[10,"wrap_server","","Wrap a server stream with SSL.",115,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"next","","",116,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Is the underlying type in this trait object a `T`?",112,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","If the underlying type is `T`, get a reference to the contained data.",112,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","If the underlying type is `T`, get a mutable reference to the contained data.",112,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast","","If the underlying type is `T`, extract it.",112,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"is","","Is the underlying type in this trait object a `T`?",112,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","If the underlying type is `T`, get a reference to the contained data.",112,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","If the underlying type is `T`, get a mutable reference to the contained data.",112,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast","","If the underlying type is `T`, extract it.",112,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"httplistener"}}],[11,"from","","",117,{"inputs":[{"name":"tcplistener"}],"output":{"name":"httplistener"}}],[11,"new","","Start listening to an address over HTTP.",117,{"inputs":[{"name":"to"}],"output":{"name":"result"}}],[11,"accept","","",117,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"local_addr","","",117,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",117,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"set_write_timeout","","",117,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"as_raw_fd","","",117,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",117,{"inputs":[{"name":"rawfd"}],"output":{"name":"httplistener"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"httpstream"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",109,null],[11,"write","","",109,null],[11,"flush","","",109,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",109,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",109,{"inputs":[{"name":"rawfd"}],"output":{"name":"httpstream"}}],[11,"peer_addr","","",109,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",109,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",109,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"close","","",109,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"httpconnector"}}],[11,"default","","",118,{"inputs":[],"output":{"name":"httpconnector"}}],[11,"connect","","",118,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"httpsstream"}}],[11,"read","","",110,null],[11,"write","","",110,null],[11,"flush","","",110,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peer_addr","","",110,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",110,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",110,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"close","","",110,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"httpslistener"}}],[11,"new","","Start listening to an address over HTTPS.",119,{"inputs":[{"name":"to"},{"name":"s"}],"output":{"name":"result"}}],[11,"with_listener","","Construct an HttpsListener from a bound `TcpListener`.",119,{"inputs":[{"name":"httplistener"},{"name":"s"}],"output":{"name":"httpslistener"}}],[11,"accept","","",119,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"local_addr","","",119,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",119,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"set_write_timeout","","",119,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",120,{"inputs":[],"output":{"name":"httpsconnector"}}],[11,"new","","Create a new connector using the provided SSL implementation.",120,{"inputs":[{"name":"s"}],"output":{"name":"httpsconnector"}}],[11,"with_connector","","Create a new connector using the provided SSL implementation.",120,{"inputs":[{"name":"s"},{"name":"c"}],"output":{"name":"httpsconnector"}}],[11,"connect","","",120,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[0,"server","hyper","HTTP Server",null,null],[3,"Server","hyper::server","A server can listen on a TCP socket.",null,null],[3,"Listening","","A listening server, which can later be closed.",null,null],[12,"socket","","The socket addresses that the server is bound to.",121,null],[0,"request","","Server Requests",null,null],[3,"Request","hyper::server::request","A request bundles several parts of an incoming `NetworkStream`, given to a `Handler`.",null,null],[12,"remote_addr","","The IP address of the remote connection.",122,null],[12,"method","","The `Method`, such as `Get`, `Post`, etc.",122,null],[12,"headers","","The headers of the incoming request.",122,null],[12,"uri","","The target request-uri for this request.",122,null],[12,"version","","The version of HTTP for this request.",122,null],[11,"new","","Create a new Request, reading the StartLine and Headers so they are immediately useful.",122,{"inputs":[{"name":"bufreader"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Set the read timeout of the underlying NetworkStream.",122,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"downcast_ref","","Get a reference to the underlying `NetworkStream`.",122,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"ssl","","Get a reference to the underlying Ssl stream, if connected over HTTPS.",122,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deconstruct","","Deconstruct a Request into its constituent parts.",122,null],[11,"read","","",122,null],[0,"response","hyper::server","Server Responses",null,null],[3,"Response","hyper::server::response","The outgoing half for a Tcp connection, created by a `Server` and given to a `Handler`.",null,null],[12,"version","","The HTTP version of this response.",123,null],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"status","","The status of this response.",123,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"headers","","The headers of this response.",123,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"construct","","Construct a Response from its constituent parts.",123,{"inputs":[{"name":"httpversion"},{"name":"httpwriter"},{"name":"statuscode"},{"name":"headers"}],"output":{"name":"response"}}],[11,"deconstruct","","Deconstruct this Response into its constituent parts.",123,null],[11,"new","","Creates a new Response that can be used to write to a network stream.",123,{"inputs":[{"name":"write"},{"name":"headers"}],"output":{"name":"response"}}],[11,"send","","Writes the body and ends the response.",123,null],[11,"start","","Consume this Response, writing the Headers and Status and creating a Response",123,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"status_mut","","Get a mutable reference to the status.",123,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"headers_mut","","Get a mutable reference to the Headers.",123,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"end","","Flushes all writing of a response to the client.",123,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",123,null],[11,"flush","","",123,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",123,{"inputs":[{"name":"self"}],"output":null}],[8,"Handler","hyper::server","A handler that can handle incoming requests for a server.",null,null],[10,"handle","","Receives a `Request`/`Response` pair, and should perform some action on them.",124,{"inputs":[{"name":"self"},{"name":"request"},{"name":"response"}],"output":null}],[11,"check_continue","","Called when a Request includes a `Expect: 100-continue` header.",124,null],[11,"on_connection_start","","This is run after a connection is received, on a per-connection basis (not a per-request basis, as a connection with keep-alive may handle multiple requests)",124,{"inputs":[{"name":"self"}],"output":null}],[11,"on_connection_end","","This is run before a connection is closed, on a per-connection basis (not a per-request basis, as a connection with keep-alive may handle multiple requests)",124,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new server with the provided handler.",125,{"inputs":[{"name":"l"}],"output":{"name":"server"}}],[11,"keep_alive","","Controls keep-alive for this server.",125,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"set_read_timeout","","Sets the read timeout for all Request reads.",125,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"set_write_timeout","","Sets the write timeout for all Response writes.",125,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"local_addr","","Get the address that the server is listening on.",125,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"http","","Creates a new server that will handle `HttpStream`s.",125,{"inputs":[{"name":"to"}],"output":{"name":"result"}}],[11,"https","","Creates a new server that will handle `HttpStream`s over SSL.",125,{"inputs":[{"name":"a"},{"name":"s"}],"output":{"name":"result"}}],[11,"handle","","Binds to a socket and starts handling connections.",125,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"result"}}],[11,"handle_threads","","Binds to a socket and starts handling connections with the provided number of threads.",125,{"inputs":[{"name":"self"},{"name":"h"},{"name":"usize"}],"output":{"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",121,{"inputs":[{"name":"self"}],"output":null}],[11,"close","","Warning: This function doesn't work. The server remains listening after you called it. See https://github.com/hyperium/hyper/issues/338 for more details.",121,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"status","hyper","HTTP status codes",null,null],[4,"StatusCode","hyper::status","An HTTP status code (`status-code` in RFC 7230 et al.).",null,null],[13,"Continue","","100 Continue [RFC7231, Section 6.2.1]",126,null],[13,"SwitchingProtocols","","101 Switching Protocols [RFC7231, Section 6.2.2]",126,null],[13,"Processing","","102 Processing [RFC2518]",126,null],[13,"Ok","","200 OK [RFC7231, Section 6.3.1]",126,null],[13,"Created","","201 Created [RFC7231, Section 6.3.2]",126,null],[13,"Accepted","","202 Accepted [RFC7231, Section 6.3.3]",126,null],[13,"NonAuthoritativeInformation","","203 Non-Authoritative Information [RFC7231, Section 6.3.4]",126,null],[13,"NoContent","","204 No Content [RFC7231, Section 6.3.5]",126,null],[13,"ResetContent","","205 Reset Content [RFC7231, Section 6.3.6]",126,null],[13,"PartialContent","","206 Partial Content [RFC7233, Section 4.1]",126,null],[13,"MultiStatus","","207 Multi-Status [RFC4918]",126,null],[13,"AlreadyReported","","208 Already Reported [RFC5842]",126,null],[13,"ImUsed","","226 IM Used [RFC3229]",126,null],[13,"MultipleChoices","","300 Multiple Choices [RFC7231, Section 6.4.1]",126,null],[13,"MovedPermanently","","301 Moved Permanently [RFC7231, Section 6.4.2]",126,null],[13,"Found","","302 Found [RFC7231, Section 6.4.3]",126,null],[13,"SeeOther","","303 See Other [RFC7231, Section 6.4.4]",126,null],[13,"NotModified","","304 Not Modified [RFC7232, Section 4.1]",126,null],[13,"UseProxy","","305 Use Proxy [RFC7231, Section 6.4.5]",126,null],[13,"TemporaryRedirect","","307 Temporary Redirect [RFC7231, Section 6.4.7]",126,null],[13,"PermanentRedirect","","308 Permanent Redirect [RFC7238]",126,null],[13,"BadRequest","","400 Bad Request [RFC7231, Section 6.5.1]",126,null],[13,"Unauthorized","","401 Unauthorized [RFC7235, Section 3.1]",126,null],[13,"PaymentRequired","","402 Payment Required [RFC7231, Section 6.5.2]",126,null],[13,"Forbidden","","403 Forbidden [RFC7231, Section 6.5.3]",126,null],[13,"NotFound","","404 Not Found [RFC7231, Section 6.5.4]",126,null],[13,"MethodNotAllowed","","405 Method Not Allowed [RFC7231, Section 6.5.5]",126,null],[13,"NotAcceptable","","406 Not Acceptable [RFC7231, Section 6.5.6]",126,null],[13,"ProxyAuthenticationRequired","","407 Proxy Authentication Required [RFC7235, Section 3.2]",126,null],[13,"RequestTimeout","","408 Request Timeout [RFC7231, Section 6.5.7]",126,null],[13,"Conflict","","409 Conflict [RFC7231, Section 6.5.8]",126,null],[13,"Gone","","410 Gone [RFC7231, Section 6.5.9]",126,null],[13,"LengthRequired","","411 Length Required [RFC7231, Section 6.5.10]",126,null],[13,"PreconditionFailed","","412 Precondition Failed [RFC7232, Section 4.2]",126,null],[13,"PayloadTooLarge","","413 Payload Too Large [RFC7231, Section 6.5.11]",126,null],[13,"UriTooLong","","414 URI Too Long [RFC7231, Section 6.5.12]",126,null],[13,"UnsupportedMediaType","","415 Unsupported Media Type [RFC7231, Section 6.5.13]",126,null],[13,"RangeNotSatisfiable","","416 Range Not Satisfiable [RFC7233, Section 4.4]",126,null],[13,"ExpectationFailed","","417 Expectation Failed [RFC7231, Section 6.5.14]",126,null],[13,"ImATeapot","","418 I'm a teapot [curiously, not registered by IANA, but RFC2324]",126,null],[13,"MisdirectedRequest","","421 Misdirected Request RFC7540, Section 9.1.2",126,null],[13,"UnprocessableEntity","","422 Unprocessable Entity [RFC4918]",126,null],[13,"Locked","","423 Locked [RFC4918]",126,null],[13,"FailedDependency","","424 Failed Dependency [RFC4918]",126,null],[13,"UpgradeRequired","","426 Upgrade Required [RFC7231, Section 6.5.15]",126,null],[13,"PreconditionRequired","","428 Precondition Required [RFC6585]",126,null],[13,"TooManyRequests","","429 Too Many Requests [RFC6585]",126,null],[13,"RequestHeaderFieldsTooLarge","","431 Request Header Fields Too Large [RFC6585]",126,null],[13,"UnavailableForLegalReasons","","451 Unavailable For Legal Reasons [RFC7725]",126,null],[13,"InternalServerError","","500 Internal Server Error [RFC7231, Section 6.6.1]",126,null],[13,"NotImplemented","","501 Not Implemented [RFC7231, Section 6.6.2]",126,null],[13,"BadGateway","","502 Bad Gateway [RFC7231, Section 6.6.3]",126,null],[13,"ServiceUnavailable","","503 Service Unavailable [RFC7231, Section 6.6.4]",126,null],[13,"GatewayTimeout","","504 Gateway Timeout [RFC7231, Section 6.6.5]",126,null],[13,"HttpVersionNotSupported","","505 HTTP Version Not Supported [RFC7231, Section 6.6.6]",126,null],[13,"VariantAlsoNegotiates","","506 Variant Also Negotiates [RFC2295]",126,null],[13,"InsufficientStorage","","507 Insufficient Storage [RFC4918]",126,null],[13,"LoopDetected","","508 Loop Detected [RFC5842]",126,null],[13,"NotExtended","","510 Not Extended [RFC2774]",126,null],[13,"NetworkAuthenticationRequired","","511 Network Authentication Required [RFC6585]",126,null],[13,"Unregistered","","A status code not in the IANA HTTP status code registry or very well known",126,null],[4,"StatusClass","","The class of an HTTP `status-code`.",null,null],[13,"Informational","","1xx (Informational): The request was received, continuing process",127,null],[13,"Success","","2xx (Success): The request was successfully received, understood, and accepted",127,null],[13,"Redirection","","3xx (Redirection): Further action needs to be taken in order to complete the request",127,null],[13,"ClientError","","4xx (Client Error): The request contains bad syntax or cannot be fulfilled",127,null],[13,"ServerError","","5xx (Server Error): The server failed to fulfill an apparently valid request",127,null],[13,"NoClass","","A status code lower than 100 or higher than 599. These codes do no belong to any class.",127,null],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",126,null],[11,"canonical_reason","","Get the standardised `reason-phrase` for this status code.",126,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"class","","Determine the class of a status code, based on its first digit.",126,{"inputs":[{"name":"self"}],"output":{"name":"statusclass"}}],[11,"is_informational","","Check if class is Informational.",126,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_success","","Check if class is Success.",126,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_redirection","","Check if class is Redirection.",126,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_client_error","","Check if class is ClientError.",126,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_server_error","","Check if class is ServerError.",126,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_strange_status","","Check if class is NoClass",126,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",126,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"partial_cmp","","",126,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"option"}}],[11,"cmp","","",126,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"ordering"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"statusclass"}}],[11,"eq","","",127,{"inputs":[{"name":"self"},{"name":"statusclass"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",127,{"inputs":[{"name":"self"},{"name":"statusclass"}],"output":{"name":"option"}}],[11,"cmp","","",127,{"inputs":[{"name":"self"},{"name":"statusclass"}],"output":{"name":"ordering"}}],[11,"default_code","","Get the default status code for the class.",127,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[0,"uri","hyper","HTTP RequestUris",null,null],[4,"RequestUri","hyper::uri","The Request-URI of a Request's StartLine.",null,null],[13,"AbsolutePath","","The most common request target, an absolute path and optional query.",128,null],[13,"AbsoluteUri","","An absolute URI. Used in conjunction with proxies.",128,null],[13,"Authority","","The authority form is only for use with `CONNECT` requests.",128,null],[13,"Star","","The star is used to target the entire server, instead of a specific resource.",128,null],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"requesturi"}],"output":{"name":"bool"}}],[11,"ne","","",128,{"inputs":[{"name":"self"},{"name":"requesturi"}],"output":{"name":"bool"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"requesturi"}}],[11,"from_str","","",128,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"version","hyper","HTTP Versions enum",null,null],[4,"HttpVersion","hyper::version","Represents a version of the HTTP spec.",null,null],[13,"Http09","","`HTTP/0.9`",129,null],[13,"Http10","","`HTTP/1.0`",129,null],[13,"Http11","","`HTTP/1.1`",129,null],[13,"Http20","","`HTTP/2.0`",129,null],[11,"eq","","",129,{"inputs":[{"name":"self"},{"name":"httpversion"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",129,{"inputs":[{"name":"self"},{"name":"httpversion"}],"output":{"name":"option"}}],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"httpversion"}}],[11,"cmp","","",129,{"inputs":[{"name":"self"},{"name":"httpversion"}],"output":{"name":"ordering"}}],[11,"hash","","",129,null],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",129,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_str","","",129,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"mime","hyper","Re-exporting the mime crate, for convenience.",null,null],[14,"mime","hyper::mime","Easily create a Mime without having to import so many enums.",null,null],[14,"header","hyper","",null,null],[11,"parse","","Parse an absolute URL from a string.",11,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"parse_with_params","","Parse an absolute URL from a string and add params to its query string.",11,{"inputs":[{"name":"str"},{"name":"i"}],"output":{"name":"result"}}],[11,"join","","Parse a string as an URL, with this URL as the base URL.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"options","","Return a default `ParseOptions` that can fully configure the URL parser.",11,{"inputs":[],"output":{"name":"parseoptions"}}],[11,"as_str","","Return the serialization of this URL.",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_string","","Return the serialization of this URL.",11,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"origin","","Return the origin of this URL (https://url.spec.whatwg.org/#origin)",11,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"scheme","","Return the scheme of this URL, lower-cased, as an ASCII string without the ':' delimiter.",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"has_authority","","Return whether the URL has an 'authority', which can contain a username, password, host, and port number.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cannot_be_a_base","","Return whether this URL is a cannot-be-a-base URL, meaning that parsing a relative URL string with this URL as the base will return an error.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"username","","Return the username for this URL (typically the empty string) as a percent-encoded ASCII string.",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"password","","Return the password for this URL, if any, as a percent-encoded ASCII string.",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"has_host","","Equivalent to `url.host().is_some()`.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"host_str","","Return the string representation of the host (domain or IP address) for this URL, if any.",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"host","","Return the parsed representation of the host for this URL. Non-ASCII domain labels are punycode-encoded per IDNA.",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"domain","","If this URL has a host and it is a domain name (not an IP address), return it.",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"port","","Return the port number for this URL, if any.",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"port_or_known_default","","Return the port number for this URL, or the default port number if it is known.",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"with_default_port","","If the URL has a host, return something that implements `ToSocketAddrs`.",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"path","","Return the path for this URL, as a percent-encoded ASCII string. For cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with '/'. For other URLs, this starts with a '/' slash and continues with slash-separated path segments.",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"path_segments","","Unless this URL is cannot-be-a-base, return an iterator of '/' slash-separated path segments, each as a percent-encoded ASCII string.",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"query","","Return this URL’s query string, if any, as a percent-encoded ASCII string.",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded` and return an iterator of (key, value) pairs.",11,{"inputs":[{"name":"self"}],"output":{"name":"parse"}}],[11,"fragment","","Return this URL’s fragment identifier, if any.",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_fragment","","Change this URL’s fragment identifier.",11,null],[11,"set_query","","Change this URL’s query string.",11,null],[11,"query_pairs_mut","","Manipulate this URL’s query string, viewed as a sequence of name/value pairs in `application/x-www-form-urlencoded` syntax.",11,{"inputs":[{"name":"self"}],"output":{"name":"serializer"}}],[11,"set_path","","Change this URL’s path.",11,null],[11,"path_segments_mut","","Return an object with methods to manipulate this URL’s path segments.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_port","","Change this URL’s port number.",11,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_host","","Change this URL’s host.",11,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_ip_host","","Change this URL’s host to the given IP address.",11,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_password","","Change this URL’s password.",11,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_username","","Change this URL’s username.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"set_scheme","","Change this URL’s scheme.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",11,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",11,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar, convert its path to an absolute `std::path::Path`.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"url"}],"output":{"name":"bool"}}],[11,"eq","hyper::error","",13,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"clone","hyper","",11,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"index","","",11,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","","",11,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",11,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",11,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"str"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","hyper::error","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","hyper","",11,null],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"url"}],"output":{"name":"option"}}],[11,"from","hyper::error","",13,{"inputs":[{"name":"errors"}],"output":{"name":"parseerror"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","hyper","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_ref","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","hyper::error","",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_str","hyper","",11,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"url"}],"output":{"name":"ordering"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"languagetag"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"languagetag"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"matches","","Matches language tags. The first language acts as a language range, the second one is used as a normal language tag. None fields in the language range are ignored. If the language tag has more extlangs than the range these extlangs are ignored. Matches are case-insensitive. `*` in language ranges are represented using `None` values. The language range `*` that matches language tags is created by the default language tag: `let wildcard: LanguageTag = Default::default();.`",0,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"is_language_range","","Checks if it is a language range, meaning that there are no extension and privateuse tags.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"canonicalize","","Returns the canonical version of the language tag.",0,{"inputs":[{"name":"self"}],"output":{"name":"languagetag"}}]],"paths":[[3,"LanguageTag"],[4,"Body"],[4,"RedirectPolicy"],[3,"Config"],[3,"Pool"],[3,"PooledStream"],[3,"Request"],[3,"Response"],[8,"IntoUrl"],[3,"Client"],[3,"RequestBuilder"],[3,"Url"],[3,"ProxyConfig"],[4,"ParseError"],[4,"Error"],[4,"Method"],[3,"EntityTag"],[3,"HttpDate"],[3,"Quality"],[3,"QualityItem"],[3,"Accept"],[3,"AccessControlAllowHeaders"],[3,"AccessControlAllowMethods"],[3,"AccessControlExposeHeaders"],[3,"AccessControlMaxAge"],[3,"AccessControlRequestHeaders"],[3,"AccessControlRequestMethod"],[3,"AcceptCharset"],[3,"AcceptEncoding"],[3,"AcceptLanguage"],[3,"AcceptRanges"],[3,"Allow"],[3,"Authorization"],[3,"Basic"],[3,"Bearer"],[3,"CacheControl"],[3,"Connection"],[3,"ContentDisposition"],[3,"ContentLength"],[3,"ContentEncoding"],[3,"ContentLanguage"],[3,"ContentRange"],[3,"ContentType"],[3,"Cookie"],[3,"Date"],[3,"ETag"],[3,"Expires"],[3,"From"],[3,"Host"],[3,"IfModifiedSince"],[3,"IfUnmodifiedSince"],[3,"LastModified"],[3,"Location"],[3,"Origin"],[3,"Prefer"],[3,"PreferenceApplied"],[3,"Referer"],[3,"Server"],[3,"SetCookie"],[3,"StrictTransportSecurity"],[3,"TransferEncoding"],[3,"Upgrade"],[3,"Protocol"],[3,"UserAgent"],[3,"HeaderFormatter"],[4,"Charset"],[4,"Encoding"],[4,"AccessControlAllowOrigin"],[4,"RangeUnit"],[4,"CacheDirective"],[4,"ConnectionOption"],[4,"DispositionType"],[4,"DispositionParam"],[4,"ContentRangeSpec"],[4,"Expect"],[4,"IfMatch"],[4,"IfNoneMatch"],[4,"IfRange"],[4,"Pragma"],[4,"Preference"],[4,"Range"],[4,"ByteRangeSpec"],[4,"ReferrerPolicy"],[4,"ProtocolName"],[4,"Vary"],[4,"RelationType"],[4,"MediaDesc"],[3,"AccessControlAllowCredentials"],[3,"Link"],[3,"LinkValue"],[3,"ExtendedValue"],[3,"HTTP_VALUE"],[8,"Scheme"],[8,"Header"],[8,"HeaderFormat"],[3,"Headers"],[3,"HeadersItems"],[3,"HeaderView"],[3,"RawStatus"],[3,"Incoming"],[4,"HttpReader"],[4,"HttpWriter"],[3,"Http11Message"],[3,"Http11Protocol"],[3,"EndError"],[3,"RequestHead"],[3,"ResponseHead"],[8,"Protocol"],[8,"HttpMessage"],[3,"HttpStream"],[4,"HttpsStream"],[8,"NetworkListener"],[8,"NetworkStream"],[8,"NetworkConnector"],[8,"SslClient"],[8,"SslServer"],[3,"NetworkConnections"],[3,"HttpListener"],[3,"HttpConnector"],[3,"HttpsListener"],[3,"HttpsConnector"],[3,"Listening"],[3,"Request"],[3,"Response"],[8,"Handler"],[3,"Server"],[4,"StatusCode"],[4,"StatusClass"],[4,"RequestUri"],[4,"HttpVersion"]]};
searchIndex["idna"] = {"doc":"This Rust crate implements IDNA per the WHATWG URL Standard.","items":[[5,"domain_to_ascii","idna","The domain to ASCII algorithm.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"domain_to_unicode","","The domain to Unicode algorithm.",null,null],[0,"punycode","","Punycode (RFC 3492) implementation.",null,null],[5,"decode_to_string","idna::punycode","Convert Punycode to an Unicode `String`.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"decode","","Convert Punycode to Unicode.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"encode_str","","Convert an Unicode `str` to Punycode.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"encode","","Convert Unicode to Punycode.",null,null],[0,"uts46","idna","Unicode IDNA Compatibility Processing (Unicode Technical Standard #46)",null,null],[3,"Flags","idna::uts46","",null,null],[12,"use_std3_ascii_rules","","",0,null],[12,"transitional_processing","","",0,null],[12,"verify_dns_length","","",0,null],[3,"Errors","","Errors recorded during UTS #46 processing.",null,null],[5,"to_ascii","","http://www.unicode.org/reports/tr46/#ToASCII",null,{"inputs":[{"name":"str"},{"name":"flags"}],"output":{"name":"result"}}],[5,"to_unicode","","http://www.unicode.org/reports/tr46/#ToUnicode",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Flags"],[3,"Errors"]]};
searchIndex["iron"] = {"doc":"The main crate for Iron.","items":[[3,"Listening","iron","A listening server, which can later be closed.",null,null],[12,"socket","","The socket addresses that the server is bound to.",0,null],[3,"TypeMap","","A map keyed by types.",null,null],[0,"headers","","Headers container, and common header fields.",null,null],[0,"parsing","iron::headers","Utility functions for Header implementations.",null,null],[5,"from_one_raw_str","iron::headers::parsing","Reads a single raw string when parsing a header.",null,null],[5,"from_raw_str","","Reads a raw string into a value.",null,null],[5,"from_comma_delimited","","Reads a comma-delimited raw header into a Vec.",null,null],[5,"fmt_comma_delimited","","Format an array into a comma-delimited string.",null,null],[3,"ExtendedValue","","An extended header parameter value (i.e., tagged with a character set and optionally, a language), as defined in RFC 5987.",null,null],[12,"charset","","The character set that is used to encode the `value` to a string.",1,null],[12,"language_tag","","The human language details of the `value`, if available.",1,null],[12,"value","","The parameter value, as expressed in octets.",1,null],[5,"parse_extended_value","","Parses extended header parameter values (`ext-value`), as defined in RFC 5987.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[3,"HTTP_VALUE","","This encode set is used for HTTP header values and is defined at https://tools.ietf.org/html/rfc5987#section-3.2",null,null],[8,"Header","iron::headers","A trait for any object that will represent a header field and value.",null,null],[10,"header_name","","Returns the name of the header field this belongs to.",2,{"inputs":[],"output":{"name":"str"}}],[10,"parse_header","","Parse a header from a raw stream of bytes.",2,null],[8,"HeaderFormat","","A trait for any object that will represent a header field and value.",null,null],[10,"fmt_header","","Format a header to be output into a TcpStream.",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"HeaderClone","","Internal implementation detail.",null,null],[3,"Headers","","A map of header fields on requests and responses.",null,null],[3,"HeadersItems","","An `Iterator` over the fields in a `Headers` map.",null,null],[3,"HeaderView","","Returned with the `HeadersItems` iterator.",null,null],[3,"HeaderFormatter","","A wrapper around any Header with a Display impl that calls fmt_header.",null,null],[12,"0","","",4,null],[3,"Allow","","`Allow` header, defined in RFC7231",null,null],[12,"0","","",5,null],[4,"IfNoneMatch","","`If-None-Match` header, defined in RFC7232",null,null],[13,"Any","","Any value is a match",6,null],[13,"Items","","Only the listed items are a match",6,null],[3,"ContentEncoding","","`Content-Encoding` header, defined in RFC7231",null,null],[12,"0","","",7,null],[3,"ContentLength","","`Content-Length` header, defined in RFC7230",null,null],[12,"0","","",8,null],[3,"PreferenceApplied","","`Preference-Applied` header, defined in RFC7240",null,null],[12,"0","","",9,null],[3,"Quality","","Represents a quality used in quality values.",null,null],[12,"0","","",10,null],[3,"Cookie","","`Cookie` header, defined in RFC6265",null,null],[12,"0","","",11,null],[3,"ContentType","","`Content-Type` header, defined in RFC7231",null,null],[12,"0","","",12,null],[5,"q","","Convenience function to create a `Quality` from a float.",null,{"inputs":[{"name":"f32"}],"output":{"name":"quality"}}],[3,"AcceptLanguage","","`Accept-Language` header, defined in RFC7231",null,null],[12,"0","","",13,null],[3,"AccessControlAllowCredentials","","`Access-Control-Allow-Credentials` header, part of CORS",null,null],[4,"Pragma","","The `Pragma` header defined by HTTP/1.0.",null,null],[13,"NoCache","","Corresponds to the `no-cache` value.",14,null],[13,"Ext","","Every value other than `no-cache`.",14,null],[3,"EntityTag","","An entity tag, defined in RFC7232",null,null],[12,"weak","","Weakness indicator for the tag",15,null],[3,"From","","`From` header, defined in RFC7231",null,null],[12,"0","","",16,null],[4,"MediaDesc","","A Media Descriptors Enum based on: https://www.w3.org/TR/html401/types.html#h-6.13",null,null],[13,"Screen","","screen.",17,null],[13,"Tty","","tty.",17,null],[13,"Tv","","tv.",17,null],[13,"Projection","","projection.",17,null],[13,"Handheld","","handheld.",17,null],[13,"Print","","print.",17,null],[13,"Braille","","braille.",17,null],[13,"Aural","","aural.",17,null],[13,"All","","all.",17,null],[13,"Extension","","Unrecognized media descriptor extension.",17,null],[4,"ProtocolName","","A protocol name used to identify a spefic protocol. Names are case-sensitive except for the `WebSocket` value.",null,null],[13,"Http","","`HTTP` value, Hypertext Transfer Protocol",18,null],[13,"Tls","","`TLS` value, Transport Layer Security RFC2817",18,null],[13,"WebSocket","","`WebSocket` value, matched case insensitively,Web Socket Protocol RFC6455",18,null],[13,"H2c","","`h2c` value, HTTP/2 over cleartext TCP",18,null],[13,"Unregistered","","Any other protocol name not known to hyper",18,null],[4,"RangeUnit","","Range Units, described in RFC7233",null,null],[13,"Bytes","","Indicating byte-range requests are supported.",19,null],[13,"None","","Reserved as keyword, indicating no ranges are supported.",19,null],[13,"Unregistered","","The given range unit is not registered at IANA.",19,null],[4,"RelationType","","A Link Relation Type Enum based on: RFC5988",null,null],[13,"Alternate","","alternate.",20,null],[13,"Appendix","","appendix.",20,null],[13,"Bookmark","","bookmark.",20,null],[13,"Chapter","","chapter.",20,null],[13,"Contents","","contents.",20,null],[13,"Copyright","","copyright.",20,null],[13,"Current","","current.",20,null],[13,"DescribedBy","","describedby.",20,null],[13,"Edit","","edit.",20,null],[13,"EditMedia","","edit-media.",20,null],[13,"Enclosure","","enclosure.",20,null],[13,"First","","first.",20,null],[13,"Glossary","","glossary.",20,null],[13,"Help","","help.",20,null],[13,"Hub","","hub.",20,null],[13,"Index","","index.",20,null],[13,"Last","","last.",20,null],[13,"LatestVersion","","latest-version.",20,null],[13,"License","","license.",20,null],[13,"Next","","next.",20,null],[13,"NextArchive","","next-archive.",20,null],[13,"Payment","","payment.",20,null],[13,"Prev","","prev.",20,null],[13,"PredecessorVersion","","predecessor-version.",20,null],[13,"Previous","","previous.",20,null],[13,"PrevArchive","","prev-archive.",20,null],[13,"Related","","related.",20,null],[13,"Replies","","replies.",20,null],[13,"Section","","section.",20,null],[13,"RelationTypeSelf","","self.",20,null],[13,"Service","","service.",20,null],[13,"Start","","start.",20,null],[13,"Stylesheet","","stylesheet.",20,null],[13,"Subsection","","subsection.",20,null],[13,"SuccessorVersion","","successor-version.",20,null],[13,"Up","","up.",20,null],[13,"VersionHistory","","versionHistory.",20,null],[13,"Via","","via.",20,null],[13,"WorkingCopy","","working-copy.",20,null],[13,"WorkingCopyOf","","working-copy-of.",20,null],[13,"ExtRelType","","ext-rel-type.",20,null],[4,"ByteRangeSpec","","Each `Range::Bytes` header can contain one or more `ByteRangeSpecs`. Each `ByteRangeSpec` defines a range of bytes to fetch",null,null],[13,"FromTo","","Get all bytes between x and y (\"x-y\")",21,null],[13,"AllFrom","","Get all bytes starting from x (\"x-\")",21,null],[13,"Last","","Get last x bytes (\"-x\")",21,null],[4,"Encoding","","A value to represent an encoding used in `Transfer-Encoding` or `Accept-Encoding` header.",null,null],[13,"Chunked","","The `chunked` encoding.",22,null],[13,"Gzip","","The `gzip` encoding.",22,null],[13,"Deflate","","The `deflate` encoding.",22,null],[13,"Compress","","The `compress` encoding.",22,null],[13,"Identity","","The `identity` encoding.",22,null],[13,"EncodingExt","","Some other encoding that is less common, can be any String.",22,null],[3,"ContentLanguage","","`Content-Language` header, defined in RFC7231",null,null],[12,"0","","",23,null],[3,"CacheControl","","`Cache-Control` header, defined in RFC7234",null,null],[12,"0","","",24,null],[3,"AccessControlMaxAge","","`Access-Control-Max-Age` header, part of CORS",null,null],[12,"0","","",25,null],[3,"AccessControlAllowHeaders","","`Access-Control-Allow-Headers` header, part of CORS",null,null],[12,"0","","",26,null],[3,"TransferEncoding","","`Transfer-Encoding` header, defined in RFC7230",null,null],[12,"0","","",27,null],[3,"IfModifiedSince","","`If-Modified-Since` header, defined in RFC7232",null,null],[12,"0","","",28,null],[4,"ContentRangeSpec","","Content-Range, described in RFC7233",null,null],[13,"Bytes","","Byte range",29,null],[12,"range","iron::headers::ContentRangeSpec","First and last bytes of the range, omitted if request could not be satisfied",29,null],[12,"instance_length","","Total length of the instance, can be omitted if unknown",29,null],[13,"Unregistered","iron::headers","Custom range, with unit not registered at IANA",29,null],[12,"unit","iron::headers::ContentRangeSpec","other-range-unit",29,null],[12,"resp","","other-range-resp",29,null],[3,"IfUnmodifiedSince","iron::headers","`If-Unmodified-Since` header, defined in RFC7232",null,null],[12,"0","","",30,null],[3,"AcceptEncoding","","`Accept-Encoding` header, defined in RFC7231",null,null],[12,"0","","",31,null],[3,"Prefer","","`Prefer` header, defined in RFC7240",null,null],[12,"0","","",32,null],[3,"Host","","The `Host` header.",null,null],[12,"hostname","","The hostname, such a example.domain.",33,null],[12,"port","","An optional port number.",33,null],[3,"Authorization","","`Authorization` header, defined in RFC7235",null,null],[12,"0","","",34,null],[3,"Link","","The `Link` header, defined in RFC5988",null,null],[4,"AccessControlAllowOrigin","","The `Access-Control-Allow-Origin` response header, part of CORS",null,null],[13,"Any","","Allow all origins",35,null],[13,"Null","","A hidden origin",35,null],[13,"Value","","Allow one particular origin",35,null],[8,"Scheme","","An Authorization scheme to be used in the header.",null,null],[10,"scheme","","An optional Scheme name.",36,{"inputs":[],"output":{"name":"option"}}],[10,"fmt_scheme","","Format the Scheme data into a header value.",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"UserAgent","","`User-Agent` header, defined in RFC7231",null,null],[12,"0","","",37,null],[4,"Expect","","The `Expect` header.",null,null],[13,"Continue","","The value `100-continue`.",38,null],[3,"Connection","","`Connection` header, defined in RFC7230",null,null],[12,"0","","",39,null],[4,"IfMatch","","`If-Match` header, defined in RFC7232",null,null],[13,"Any","","Any value is a match",40,null],[13,"Items","","Only the listed items are a match",40,null],[3,"AccessControlRequestHeaders","","`Access-Control-Request-Headers` header, part of CORS",null,null],[12,"0","","",41,null],[3,"Accept","","`Accept` header, defined in RFC7231",null,null],[12,"0","","",42,null],[3,"Protocol","","Protocols that appear in the `Upgrade` header field",null,null],[12,"name","","The protocol identifier",43,null],[12,"version","","The optional version of the protocol, often in the format \"DIGIT.DIGIT\" (e.g.. \"1.2\")",43,null],[3,"HttpDate","","A `time::Time` with HTTP formatting and parsing",null,null],[12,"0","","",44,null],[3,"AccessControlExposeHeaders","","`Access-Control-Expose-Headers` header, part of CORS",null,null],[12,"0","","",45,null],[4,"ReferrerPolicy","","`Referrer-Policy` header, part of Referrer Policy",null,null],[13,"NoReferrer","","`no-referrer`",46,null],[13,"NoReferrerWhenDowngrade","","`no-referrer-when-downgrade`",46,null],[13,"SameOrigin","","`same-origin`",46,null],[13,"Origin","","`origin`",46,null],[13,"OriginWhenCrossOrigin","","`origin-when-cross-origin`",46,null],[13,"UnsafeUrl","","`unsafe-url`",46,null],[13,"StrictOrigin","","`strict-origin`",46,null],[13,"StrictOriginWhenCrossOrigin","","`strict-origin-when-cross-origin`",46,null],[3,"ContentDisposition","","A `Content-Disposition` header, (re)defined in RFC6266",null,null],[12,"disposition","","The disposition",47,null],[12,"parameters","","Disposition parameters",47,null],[3,"AcceptCharset","","`Accept-Charset` header, defined in RFC7231",null,null],[12,"0","","",48,null],[3,"StrictTransportSecurity","","`StrictTransportSecurity` header, defined in RFC6797",null,null],[12,"include_subdomains","","Signals the UA that the HSTS Policy applies to this HSTS Host as well as any subdomains of the host's domain name.",49,null],[12,"max_age","","Specifies the number of seconds, after the reception of the STS header field, during which the UA regards the host (from whom the message was received) as a Known HSTS Host.",49,null],[4,"IfRange","","`If-Range` header, defined in RFC7233",null,null],[13,"EntityTag","","The entity-tag the client has of the resource",50,null],[13,"Date","","The date when the client retrieved the resource",50,null],[3,"ETag","","`ETag` header, defined in RFC7232",null,null],[12,"0","","",51,null],[3,"AccessControlAllowMethods","","`Access-Control-Allow-Methods` header, part of CORS",null,null],[12,"0","","",52,null],[3,"LastModified","","`Last-Modified` header, defined in RFC7232",null,null],[12,"0","","",53,null],[4,"Vary","","`Vary` header, defined in RFC7231",null,null],[13,"Any","","Any value is a match",54,null],[13,"Items","","Only the listed items are a match",54,null],[4,"CacheDirective","","`CacheControl` contains a list of these directives.",null,null],[13,"NoCache","","\"no-cache\"",55,null],[13,"NoStore","","\"no-store\"",55,null],[13,"NoTransform","","\"no-transform\"",55,null],[13,"OnlyIfCached","","\"only-if-cached\"",55,null],[13,"MaxAge","","\"max-age=delta\"",55,null],[13,"MaxStale","","\"max-stale=delta\"",55,null],[13,"MinFresh","","\"min-fresh=delta\"",55,null],[13,"MustRevalidate","","\"must-revalidate\"",55,null],[13,"Public","","\"public\"",55,null],[13,"Private","","\"private\"",55,null],[13,"ProxyRevalidate","","\"proxy-revalidate\"",55,null],[13,"SMaxAge","","\"s-maxage=delta\"",55,null],[13,"Extension","","Extension directives. Optionally include an argument.",55,null],[3,"Bearer","","Token holder for Bearer Authentication, most often seen with oauth",null,null],[12,"token","","Actual bearer token as a string",56,null],[3,"Expires","","`Expires` header, defined in RFC7234",null,null],[12,"0","","",57,null],[3,"Upgrade","","`Upgrade` header, defined in RFC7230",null,null],[12,"0","","",58,null],[3,"QualityItem","","Represents an item with a quality value as defined in RFC7231.",null,null],[12,"item","","The actual contents of the field.",59,null],[12,"quality","","The quality (client or server preference) for the value.",59,null],[4,"Preference","","Prefer contains a list of these preferences.",null,null],[13,"RespondAsync","","\"respond-async\"",60,null],[13,"ReturnRepresentation","","\"return=representation\"",60,null],[13,"ReturnMinimal","","\"return=minimal\"",60,null],[13,"HandlingStrict","","\"handling=strict\"",60,null],[13,"HandlingLeniant","","\"handling=leniant\"",60,null],[13,"Wait","","\"wait=delta\"",60,null],[13,"Extension","","Extension preferences. Always has a value, if none is specified it is just \"\". A preference can also have a list of parameters.",60,null],[3,"Location","","`Location` header, defined in RFC7231",null,null],[12,"0","","",61,null],[3,"Date","","`Date` header, defined in RFC7231",null,null],[12,"0","","",62,null],[3,"Basic","","Credential holder for Basic Authentication",null,null],[12,"username","","The username as a possibly empty string",63,null],[12,"password","","The password. `None` if the `:` delimiter character was not part of the parsed input.",63,null],[3,"LinkValue","","A single `link-value` of a `Link` header, based on: RFC5988",null,null],[4,"Range","","`Range` header, defined in RFC7233",null,null],[13,"Bytes","","Byte range",64,null],[13,"Unregistered","","Custom range, with unit not registered at IANA (`other-range-unit`: String , `other-range-set`: String)",64,null],[4,"ConnectionOption","","Values that can be in the `Connection` header.",null,null],[13,"KeepAlive","","The `keep-alive` connection value.",65,null],[13,"Close","","The `close` connection value.",65,null],[13,"ConnectionHeader","","Values in the Connection header that are supposed to be names of other Headers.",65,null],[3,"AccessControlRequestMethod","","`Access-Control-Request-Method` header, part of CORS",null,null],[12,"0","","",66,null],[5,"qitem","","Convinience function to wrap a value in a `QualityItem` Sets `q` to the default 1.0",null,{"inputs":[{"name":"t"}],"output":{"name":"qualityitem"}}],[3,"Origin","","The `Origin` header.",null,null],[12,"scheme","","The scheme, such as http or https",67,null],[12,"host","","The host, such as Host{hostname: \"hyper.rs\".to_owned(), port: None}",67,null],[3,"AcceptRanges","","`Accept-Ranges` header, defined in RFC7233",null,null],[12,"0","","",68,null],[3,"SetCookie","","`Set-Cookie` header, defined RFC6265",null,null],[12,"0","","",69,null],[4,"Charset","","A Mime charset.",null,null],[13,"Us_Ascii","","US ASCII",70,null],[13,"Iso_8859_1","","ISO-8859-1",70,null],[13,"Iso_8859_2","","ISO-8859-2",70,null],[13,"Iso_8859_3","","ISO-8859-3",70,null],[13,"Iso_8859_4","","ISO-8859-4",70,null],[13,"Iso_8859_5","","ISO-8859-5",70,null],[13,"Iso_8859_6","","ISO-8859-6",70,null],[13,"Iso_8859_7","","ISO-8859-7",70,null],[13,"Iso_8859_8","","ISO-8859-8",70,null],[13,"Iso_8859_9","","ISO-8859-9",70,null],[13,"Iso_8859_10","","ISO-8859-10",70,null],[13,"Shift_Jis","","Shift_JIS",70,null],[13,"Euc_Jp","","EUC-JP",70,null],[13,"Iso_2022_Kr","","ISO-2022-KR",70,null],[13,"Euc_Kr","","EUC-KR",70,null],[13,"Iso_2022_Jp","","ISO-2022-JP",70,null],[13,"Iso_2022_Jp_2","","ISO-2022-JP-2",70,null],[13,"Iso_8859_6_E","","ISO-8859-6-E",70,null],[13,"Iso_8859_6_I","","ISO-8859-6-I",70,null],[13,"Iso_8859_8_E","","ISO-8859-8-E",70,null],[13,"Iso_8859_8_I","","ISO-8859-8-I",70,null],[13,"Gb2312","","GB2312",70,null],[13,"Big5","","Big5",70,null],[13,"Koi8_R","","KOI8-R",70,null],[13,"Ext","","An arbitrary charset specified as a string",70,null],[4,"DispositionParam","","A parameter to the disposition type",null,null],[13,"Filename","","A Filename consisting of a Charset, an optional LanguageTag, and finally a sequence of bytes representing the filename",71,null],[13,"Ext","","Extension type consisting of token and value.  Recipients should ignore unrecognized parameters.",71,null],[3,"ContentRange","","`Content-Range` header, defined in RFC7233",null,null],[12,"0","","",72,null],[3,"Referer","","`Referer` header, defined in RFC7231",null,null],[12,"0","","",73,null],[3,"Server","","`Server` header, defined in RFC7231",null,null],[12,"0","","",74,null],[4,"DispositionType","","The implied disposition of the content of the HTTP body",null,null],[13,"Inline","","Inline implies default processing",75,null],[13,"Attachment","","Attachment implies that the recipient should prompt the user to save the response locally, rather than process it normally (as per its media type).",75,null],[13,"Ext","","Extension type.  Should be handled by recipients the same way as Attachment",75,null],[3,"Headers","iron","A map of header fields on requests and responses.",null,null],[8,"Plugin","","An interface for plugins that cache values between calls.",null,null],[11,"get","","Return a copy of the plugin's produced value.",76,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get_ref","","Return a reference to the plugin's produced value.",76,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get_mut","","Return a mutable reference to the plugin's produced value.",76,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"compute","","Create and evaluate a once-off instance of a plugin.",76,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Set","","A trait providing the set and set_mut methods for all types.",null,null],[11,"set","","Modify self using the provided modifier.",77,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"self"}}],[11,"set_mut","","Modify self through a mutable reference with the provided modifier.",77,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"self"}}],[8,"Error","","An extension to std::error::Error which provides dynamic downcasting of errors for use in highly generic contexts.",null,null],[0,"mime","","Re-exporting the mime crate, for convenience.",null,null],[4,"Attr","iron::mime","",null,null],[13,"Charset","","",78,null],[13,"Boundary","","",78,null],[13,"Q","","",78,null],[13,"Ext","","",78,null],[4,"Value","","",null,null],[13,"Utf8","","",79,null],[13,"Ext","","",79,null],[6,"Param","","",null,null],[4,"TopLevel","","",null,null],[13,"Star","","",80,null],[13,"Text","","",80,null],[13,"Image","","",80,null],[13,"Audio","","",80,null],[13,"Video","","",80,null],[13,"Application","","",80,null],[13,"Multipart","","",80,null],[13,"Message","","",80,null],[13,"Model","","",80,null],[13,"Ext","","",80,null],[4,"SubLevel","","",null,null],[13,"Star","","",81,null],[13,"Plain","","",81,null],[13,"Html","","",81,null],[13,"Xml","","",81,null],[13,"Javascript","","",81,null],[13,"Css","","",81,null],[13,"EventStream","","",81,null],[13,"Json","","",81,null],[13,"WwwFormUrlEncoded","","",81,null],[13,"Msgpack","","",81,null],[13,"OctetStream","","",81,null],[13,"FormData","","",81,null],[13,"Png","","",81,null],[13,"Gif","","",81,null],[13,"Bmp","","",81,null],[13,"Jpeg","","",81,null],[13,"Mpeg","","",81,null],[13,"Mp4","","",81,null],[13,"Ogg","","",81,null],[13,"Ext","","",81,null],[3,"Mime","","Mime, or Media Type. Encapsulates common registers types.",null,null],[12,"0","","",82,null],[12,"1","","",82,null],[12,"2","","",82,null],[3,"Url","iron","HTTP/HTTPS URL type for Iron.",null,null],[3,"Iron","","The primary entrance point to `Iron`, a `struct` to instantiate a new server.",null,null],[12,"handler","","Iron contains a `Handler`, which it uses to create responses for client requests.",83,null],[12,"timeouts","","Server timeouts.",83,null],[12,"threads","","The number of request handling threads.",83,null],[3,"Timeouts","","A settings struct containing a set of timeouts which can be applied to a server.",null,null],[12,"keep_alive","","Controls the timeout for keep alive connections.",84,null],[12,"read","","Controls the timeout for reads on existing connections.",84,null],[12,"write","","Controls the timeout for writes on existing connections.",84,null],[3,"Protocol","","Protocol used to serve content.",null,null],[0,"error","","Iron's error type and associated utilities.",null,null],[8,"Error","iron::error","An extension to std::error::Error which provides dynamic downcasting of errors for use in highly generic contexts.",null,null],[4,"HttpError","","A set of errors that can occur parsing HTTP streams.",null,null],[13,"Method","","An invalid `Method`, such as `GE,T`.",85,null],[13,"Uri","","An invalid `RequestUri`, such as `exam ple.domain`.",85,null],[13,"Version","","An invalid `HttpVersion`, such as `HTP/1.1`",85,null],[13,"Header","","An invalid `Header`.",85,null],[13,"TooLarge","","A message head is too large to be reasonable.",85,null],[13,"Status","","An invalid `Status`, such as `1337 ELITE`.",85,null],[13,"Io","","An `io::Error` that occurred while trying to read or write to a network stream.",85,null],[13,"Ssl","","An error from a SSL library.",85,null],[13,"Utf8","","Parsing a field as string failed",85,null],[6,"HttpResult","","Result type often returned from methods that can have hyper `Error`s.",null,null],[3,"IronError","","The type of Errors inside and when using Iron.",null,null],[12,"error","","The underlying error",86,null],[12,"response","","What to do about this error.",86,null],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new IronError from an error and a modifier.",86,{"inputs":[{"name":"e"},{"name":"m"}],"output":{"name":"ironerror"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",86,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",86,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"prelude","iron","A module meant to be glob imported when using Iron.",null,null],[0,"typemap","","Re-exports from the TypeMap crate.",null,null],[3,"TypeMap","iron::typemap","A map keyed by types.",null,null],[8,"Key","","This trait defines the relationship between keys and values in a TypeMap.",null,null],[16,"Value","","The value type associated with this key type.",87,null],[0,"modifier","iron","Re-exports from the Modifier crate.",null,null],[0,"url","","Re-exports from the url crate.",null,null],[14,"define_encode_set","iron::url","Define a new struct that implements the `EncodeSet` trait, for use in `percent_decode()` and related functions.",null,null],[0,"status","iron","Status Codes",null,null],[4,"Status","iron::status","An HTTP status code (`status-code` in RFC 7230 et al.).",null,null],[13,"Continue","","100 Continue [RFC7231, Section 6.2.1]",88,null],[13,"SwitchingProtocols","","101 Switching Protocols [RFC7231, Section 6.2.2]",88,null],[13,"Processing","","102 Processing [RFC2518]",88,null],[13,"Ok","","200 OK [RFC7231, Section 6.3.1]",88,null],[13,"Created","","201 Created [RFC7231, Section 6.3.2]",88,null],[13,"Accepted","","202 Accepted [RFC7231, Section 6.3.3]",88,null],[13,"NonAuthoritativeInformation","","203 Non-Authoritative Information [RFC7231, Section 6.3.4]",88,null],[13,"NoContent","","204 No Content [RFC7231, Section 6.3.5]",88,null],[13,"ResetContent","","205 Reset Content [RFC7231, Section 6.3.6]",88,null],[13,"PartialContent","","206 Partial Content [RFC7233, Section 4.1]",88,null],[13,"MultiStatus","","207 Multi-Status [RFC4918]",88,null],[13,"AlreadyReported","","208 Already Reported [RFC5842]",88,null],[13,"ImUsed","","226 IM Used [RFC3229]",88,null],[13,"MultipleChoices","","300 Multiple Choices [RFC7231, Section 6.4.1]",88,null],[13,"MovedPermanently","","301 Moved Permanently [RFC7231, Section 6.4.2]",88,null],[13,"Found","","302 Found [RFC7231, Section 6.4.3]",88,null],[13,"SeeOther","","303 See Other [RFC7231, Section 6.4.4]",88,null],[13,"NotModified","","304 Not Modified [RFC7232, Section 4.1]",88,null],[13,"UseProxy","","305 Use Proxy [RFC7231, Section 6.4.5]",88,null],[13,"TemporaryRedirect","","307 Temporary Redirect [RFC7231, Section 6.4.7]",88,null],[13,"PermanentRedirect","","308 Permanent Redirect [RFC7238]",88,null],[13,"BadRequest","","400 Bad Request [RFC7231, Section 6.5.1]",88,null],[13,"Unauthorized","","401 Unauthorized [RFC7235, Section 3.1]",88,null],[13,"PaymentRequired","","402 Payment Required [RFC7231, Section 6.5.2]",88,null],[13,"Forbidden","","403 Forbidden [RFC7231, Section 6.5.3]",88,null],[13,"NotFound","","404 Not Found [RFC7231, Section 6.5.4]",88,null],[13,"MethodNotAllowed","","405 Method Not Allowed [RFC7231, Section 6.5.5]",88,null],[13,"NotAcceptable","","406 Not Acceptable [RFC7231, Section 6.5.6]",88,null],[13,"ProxyAuthenticationRequired","","407 Proxy Authentication Required [RFC7235, Section 3.2]",88,null],[13,"RequestTimeout","","408 Request Timeout [RFC7231, Section 6.5.7]",88,null],[13,"Conflict","","409 Conflict [RFC7231, Section 6.5.8]",88,null],[13,"Gone","","410 Gone [RFC7231, Section 6.5.9]",88,null],[13,"LengthRequired","","411 Length Required [RFC7231, Section 6.5.10]",88,null],[13,"PreconditionFailed","","412 Precondition Failed [RFC7232, Section 4.2]",88,null],[13,"PayloadTooLarge","","413 Payload Too Large [RFC7231, Section 6.5.11]",88,null],[13,"UriTooLong","","414 URI Too Long [RFC7231, Section 6.5.12]",88,null],[13,"UnsupportedMediaType","","415 Unsupported Media Type [RFC7231, Section 6.5.13]",88,null],[13,"RangeNotSatisfiable","","416 Range Not Satisfiable [RFC7233, Section 4.4]",88,null],[13,"ExpectationFailed","","417 Expectation Failed [RFC7231, Section 6.5.14]",88,null],[13,"ImATeapot","","418 I'm a teapot [curiously, not registered by IANA, but RFC2324]",88,null],[13,"MisdirectedRequest","","421 Misdirected Request RFC7540, Section 9.1.2",88,null],[13,"UnprocessableEntity","","422 Unprocessable Entity [RFC4918]",88,null],[13,"Locked","","423 Locked [RFC4918]",88,null],[13,"FailedDependency","","424 Failed Dependency [RFC4918]",88,null],[13,"UpgradeRequired","","426 Upgrade Required [RFC7231, Section 6.5.15]",88,null],[13,"PreconditionRequired","","428 Precondition Required [RFC6585]",88,null],[13,"TooManyRequests","","429 Too Many Requests [RFC6585]",88,null],[13,"RequestHeaderFieldsTooLarge","","431 Request Header Fields Too Large [RFC6585]",88,null],[13,"UnavailableForLegalReasons","","451 Unavailable For Legal Reasons [RFC7725]",88,null],[13,"InternalServerError","","500 Internal Server Error [RFC7231, Section 6.6.1]",88,null],[13,"NotImplemented","","501 Not Implemented [RFC7231, Section 6.6.2]",88,null],[13,"BadGateway","","502 Bad Gateway [RFC7231, Section 6.6.3]",88,null],[13,"ServiceUnavailable","","503 Service Unavailable [RFC7231, Section 6.6.4]",88,null],[13,"GatewayTimeout","","504 Gateway Timeout [RFC7231, Section 6.6.5]",88,null],[13,"HttpVersionNotSupported","","505 HTTP Version Not Supported [RFC7231, Section 6.6.6]",88,null],[13,"VariantAlsoNegotiates","","506 Variant Also Negotiates [RFC2295]",88,null],[13,"InsufficientStorage","","507 Insufficient Storage [RFC4918]",88,null],[13,"LoopDetected","","508 Loop Detected [RFC5842]",88,null],[13,"NotExtended","","510 Not Extended [RFC2774]",88,null],[13,"NetworkAuthenticationRequired","","511 Network Authentication Required [RFC6585]",88,null],[13,"Unregistered","","A status code not in the IANA HTTP status code registry or very well known",88,null],[4,"StatusClass","","The class of an HTTP `status-code`.",null,null],[13,"Informational","","1xx (Informational): The request was received, continuing process",89,null],[13,"Success","","2xx (Success): The request was successfully received, understood, and accepted",89,null],[13,"Redirection","","3xx (Redirection): Further action needs to be taken in order to complete the request",89,null],[13,"ClientError","","4xx (Client Error): The request contains bad syntax or cannot be fulfilled",89,null],[13,"ServerError","","5xx (Server Error): The server failed to fulfill an apparently valid request",89,null],[13,"NoClass","","A status code lower than 100 or higher than 599. These codes do no belong to any class.",89,null],[0,"method","iron","HTTP Methods",null,null],[4,"Method","iron::method","The Request Method (VERB)",null,null],[13,"Options","","OPTIONS",90,null],[13,"Get","","GET",90,null],[13,"Post","","POST",90,null],[13,"Put","","PUT",90,null],[13,"Delete","","DELETE",90,null],[13,"Head","","HEAD",90,null],[13,"Trace","","TRACE",90,null],[13,"Connect","","CONNECT",90,null],[13,"Patch","","PATCH",90,null],[13,"Extension","","Method extensions. An example would be `let m = Extension(\"FOO\".to_string())`.",90,null],[0,"middleware","iron","Iron's Middleware and Handler System",null,null],[3,"Chain","iron::middleware","The middleware chain used in Iron.",null,null],[8,"Handler","","`Handler`s are responsible for handling requests by creating Responses from Requests.",null,null],[10,"handle","","Produce a `Response` from a Request, with the possibility of error.",91,{"inputs":[{"name":"self"},{"name":"request"}],"output":{"name":"ironresult"}}],[8,"BeforeMiddleware","","`BeforeMiddleware` are fired before a `Handler` is called inside of a Chain.",null,null],[11,"before","","Do whatever work this middleware should do with a `Request` object.",92,{"inputs":[{"name":"self"},{"name":"request"}],"output":{"name":"ironresult"}}],[11,"catch","","Respond to an error thrown by a previous `BeforeMiddleware`.",92,{"inputs":[{"name":"self"},{"name":"request"},{"name":"ironerror"}],"output":{"name":"ironresult"}}],[8,"AfterMiddleware","","`AfterMiddleware` are fired after a `Handler` is called inside of a Chain.",null,null],[11,"after","","Do whatever post-processing this middleware should do.",93,{"inputs":[{"name":"self"},{"name":"request"},{"name":"response"}],"output":{"name":"ironresult"}}],[11,"catch","","Respond to an error thrown by previous `AfterMiddleware`, the `Handler`, or a `BeforeMiddleware`.",93,{"inputs":[{"name":"self"},{"name":"request"},{"name":"ironerror"}],"output":{"name":"ironresult"}}],[8,"AroundMiddleware","","AroundMiddleware are used to wrap and replace the `Handler` in a `Chain`.",null,null],[10,"around","","Produce a `Handler` from this `AroundMiddleware` given another `Handler`.",94,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"box"}}],[11,"new","","Construct a new ChainBuilder from a `Handler`.",95,{"inputs":[{"name":"h"}],"output":{"name":"chain"}}],[11,"link","","Link both a before and after middleware to the chain at once.",95,null],[11,"link_before","","Link a `BeforeMiddleware` to the `Chain`, after all previously linked `BeforeMiddleware`.",95,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"chain"}}],[11,"link_after","","Link a `AfterMiddleware` to the `Chain`, after all previously linked `AfterMiddleware`.",95,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"chain"}}],[11,"around","","Apply an `AroundMiddleware` to the `Handler` in this `Chain`.",95,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"chain"}}],[11,"link_around","","Apply an `AroundMiddleware` to the `Handler` in this `Chain`.",95,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"chain"}}],[11,"handle","","",95,{"inputs":[{"name":"self"},{"name":"request"}],"output":{"name":"ironresult"}}],[0,"response","iron","Iron's HTTP Response representation and associated methods.",null,null],[3,"HttpResponse","iron::response","The outgoing half for a Tcp connection, created by a `Server` and given to a `Handler`.",null,null],[12,"version","","The HTTP version of this response.",96,null],[3,"BodyReader","","Wrapper type to set `Read`ers as response bodies",null,null],[12,"0","","",97,null],[3,"Response","","The response representation given to `Middleware`",null,null],[12,"status","","The response status-code.",98,null],[12,"headers","","The headers of the response.",98,null],[12,"extensions","","A TypeMap to be used as an extensible storage for data associated with this Response.",98,null],[12,"body","","The body of the response.",98,null],[8,"WriteBody","","A trait which writes the body of an HTTP response.",null,null],[10,"write_body","","Writes the body to the provided `Write`.",99,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"result"}}],[11,"write_body","","",97,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"result"}}],[11,"new","","Construct a blank Response",98,{"inputs":[],"output":{"name":"response"}}],[11,"with","","Construct a Response with the specified modifier pre-applied.",98,{"inputs":[{"name":"m"}],"output":{"name":"response"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"extensions","","",98,{"inputs":[{"name":"self"}],"output":{"name":"typemap"}}],[11,"extensions_mut","","",98,{"inputs":[{"name":"self"}],"output":{"name":"typemap"}}],[0,"request","iron","Iron's HTTP Request representation and associated methods.",null,null],[3,"HttpRequest","iron::request","A request bundles several parts of an incoming `NetworkStream`, given to a `Handler`.",null,null],[12,"remote_addr","","The IP address of the remote connection.",100,null],[12,"method","","The `Method`, such as `Get`, `Post`, etc.",100,null],[12,"headers","","The headers of the incoming request.",100,null],[12,"uri","","The target request-uri for this request.",100,null],[12,"version","","The version of HTTP for this request.",100,null],[3,"Url","","HTTP/HTTPS URL type for Iron.",null,null],[3,"Request","","The `Request` given to all `Middleware`.",null,null],[12,"url","","The requested URL.",101,null],[12,"remote_addr","","The originating address of the request.",101,null],[12,"local_addr","","The local address of the request.",101,null],[12,"headers","","The request headers.",101,null],[12,"body","","The request body as a reader.",101,null],[12,"method","","The request method.",101,null],[12,"extensions","","Extensible storage for data passed between middleware.",101,null],[12,"version","","The version of the HTTP protocol used.",101,null],[3,"Body","","The body of an Iron request,",null,null],[11,"eq","iron","",102,{"inputs":[{"name":"self"},{"name":"url"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"self"},{"name":"url"}],"output":{"name":"bool"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"parse","","Create a URL from a string.",102,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_generic_url","","Create a `Url` from a `rust-url` `Url`.",102,{"inputs":[{"name":"url"}],"output":{"name":"result"}}],[11,"into_generic_url","","Create a `rust-url` `Url` from a `Url`.",102,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"scheme","","The lower-cased scheme of the URL, typically \"http\" or \"https\".",102,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"host","","The host field of the URL, probably a domain.",102,{"inputs":[{"name":"self"}],"output":{"name":"host"}}],[11,"port","","The connection port.",102,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"path","","The URL path, the resource to be accessed.",102,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"username","","The URL username field, from the userinfo section of the URL.",102,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"password","","The URL password field, from the userinfo section of the URL.",102,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"query","","The URL query string.",102,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fragment","","The URL fragment.",102,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",102,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"as_ref","","",102,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"as_mut","","",102,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"fmt","iron::request","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_http","","Create a request from an HttpRequest.",101,{"inputs":[{"name":"httprequest"},{"name":"socketaddr"},{"name":"protocol"}],"output":{"name":"result"}}],[11,"new","","Create a new reader for use in an Iron request from a hyper HttpReader.",103,{"inputs":[{"name":"httpreader"}],"output":{"name":"body"}}],[11,"read","","",103,null],[11,"extensions","","",101,{"inputs":[{"name":"self"}],"output":{"name":"typemap"}}],[11,"extensions_mut","","",101,{"inputs":[{"name":"self"}],"output":{"name":"typemap"}}],[0,"modifiers","iron","This module defines a series of convenience modifiers for changing Responses.",null,null],[3,"Header","iron::modifiers","A modifier for changing headers on requests and responses.",null,null],[12,"0","","",104,null],[3,"Redirect","","A modifier for creating redirect responses.",null,null],[12,"0","","",105,null],[3,"RedirectRaw","","A modifier for creating redirect responses.",null,null],[12,"0","","",106,null],[11,"modify","iron::mime","",82,{"inputs":[{"name":"self"},{"name":"response"}],"output":null}],[11,"modify","iron::response","",97,{"inputs":[{"name":"self"},{"name":"response"}],"output":null}],[11,"modify","iron::status","",88,{"inputs":[{"name":"self"},{"name":"response"}],"output":null}],[11,"clone","iron::modifiers","",104,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"modify","","",104,{"inputs":[{"name":"self"},{"name":"response"}],"output":null}],[11,"modify","","",104,{"inputs":[{"name":"self"},{"name":"request"}],"output":null}],[11,"modify","","",105,{"inputs":[{"name":"self"},{"name":"response"}],"output":null}],[11,"modify","","",106,{"inputs":[{"name":"self"},{"name":"response"}],"output":null}],[11,"fmt","iron","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"timeouts"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"self"},{"name":"timeouts"}],"output":{"name":"bool"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"timeouts"}}],[11,"default","","",84,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"protocol"}}],[11,"http","","Plaintext HTTP/1",107,{"inputs":[],"output":{"name":"protocol"}}],[11,"https","","HTTP/1 over SSL/TLS",107,{"inputs":[],"output":{"name":"protocol"}}],[11,"name","","Returns the name used for this protocol in a URI's scheme part.",107,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","Instantiate a new instance of `Iron`.",83,{"inputs":[{"name":"h"}],"output":{"name":"iron"}}],[11,"http","","Kick off the server process using the HTTP protocol.",83,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"httpresult"}}],[11,"https","","Kick off the server process using the HTTPS protocol.",83,{"inputs":[{"name":"self"},{"name":"a"},{"name":"s"}],"output":{"name":"httpresult"}}],[11,"listen","","Kick off a server process on an arbitrary `Listener`.",83,{"inputs":[{"name":"self"},{"name":"l"},{"name":"protocol"}],"output":{"name":"httpresult"}}],[6,"IronResult","","The Result alias used throughout Iron and in clients of Iron.",null,null],[14,"itry","","Like `try!()`, but wraps the error value in `IronError`. To be used in request handlers.",null,null],[14,"iexpect","","Unwrap the given `Option` or return a `Ok(Response::new())` with the given modifier. The default modifier is `status::BadRequest`.",null,null],[11,"close","","Warning: This function doesn't work. The server remains listening after you called it. See https://github.com/hyperium/hyper/issues/338 for more details.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"default","iron::typemap","",108,{"inputs":[],"output":{"name":"typemap"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"typemap"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"scheme","iron::headers","",63,{"inputs":[],"output":{"name":"option"}}],[11,"fmt_scheme","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"scheme","","",56,{"inputs":[],"output":{"name":"option"}}],[11,"fmt_scheme","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","iron::headers::parsing","",109,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"default","iron::headers","",10,{"inputs":[],"output":{"name":"quality"}}],[11,"write","iron::response","",96,null],[11,"flush","","",96,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","iron","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","iron::headers","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","iron","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","iron::error","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","iron::method","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","iron::headers","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","iron::headers::parsing","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","iron::response","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","iron::status","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","iron::method","",90,null],[11,"hash","iron::status","",88,null],[11,"partial_cmp","iron::headers","",59,{"inputs":[{"name":"self"},{"name":"qualityitem"}],"output":{"name":"option"}}],[11,"partial_cmp","iron::status","",88,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"option"}}],[11,"partial_cmp","iron::headers","",44,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"option"}}],[11,"lt","","",44,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"le","","",44,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"gt","","",44,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"ge","","",44,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"partial_cmp","iron::status","",89,{"inputs":[{"name":"self"},{"name":"statusclass"}],"output":{"name":"option"}}],[11,"extend","iron","",110,null],[11,"read","iron::request","",100,null],[11,"as_ref","iron::method","",90,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt_header","iron::headers","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_multi_header","","",69,{"inputs":[{"name":"self"},{"name":"multilineformatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",112,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",112,null],[11,"header_name","","",35,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",35,null],[11,"header_name","","",34,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",34,null],[11,"header_name","","",24,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",24,null],[11,"header_name","","",11,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",11,null],[11,"header_name","","",47,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",47,null],[11,"header_name","","",8,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",8,null],[11,"header_name","","",38,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",38,null],[11,"header_name","","",33,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",33,null],[11,"header_name","","",50,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",50,null],[11,"header_name","","",67,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",67,null],[11,"header_name","","",14,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",14,null],[11,"header_name","","",32,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",32,null],[11,"header_name","","",9,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",9,null],[11,"header_name","","",64,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",64,null],[11,"header_name","","",46,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",46,null],[11,"header_name","","",69,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",69,null],[11,"header_name","","",49,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",49,null],[11,"header_name","","",113,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",113,null],[11,"header_name","","",42,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",42,null],[11,"header_name","","",26,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",26,null],[11,"header_name","","",52,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",52,null],[11,"header_name","","",45,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",45,null],[11,"header_name","","",25,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",25,null],[11,"header_name","","",41,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",41,null],[11,"header_name","","",66,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",66,null],[11,"header_name","","",48,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",48,null],[11,"header_name","","",31,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",31,null],[11,"header_name","","",13,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",13,null],[11,"header_name","","",68,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",68,null],[11,"header_name","","",5,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",5,null],[11,"header_name","","",39,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",39,null],[11,"header_name","","",7,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",7,null],[11,"header_name","","",23,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",23,null],[11,"header_name","","",72,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",72,null],[11,"header_name","","",12,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",12,null],[11,"header_name","","",62,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",62,null],[11,"header_name","","",51,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",51,null],[11,"header_name","","",57,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",57,null],[11,"header_name","","",16,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",16,null],[11,"header_name","","",40,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",40,null],[11,"header_name","","",28,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",28,null],[11,"header_name","","",6,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",6,null],[11,"header_name","","",30,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",30,null],[11,"header_name","","",53,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",53,null],[11,"header_name","","",61,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",61,null],[11,"header_name","","",73,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",73,null],[11,"header_name","","",74,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",74,null],[11,"header_name","","",27,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",27,null],[11,"header_name","","",58,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",58,null],[11,"header_name","","",37,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",37,null],[11,"header_name","","",54,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",54,null],[11,"description","iron::error","",85,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",85,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_str","iron::method","",90,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","iron::headers","",19,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",63,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",56,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",55,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",65,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",29,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",33,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",67,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",60,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",64,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",21,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",49,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",18,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",43,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",113,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",17,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",20,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",70,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",22,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",15,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",44,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",59,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"deref_mut","","",34,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"deref_mut","","",42,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",26,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",52,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",45,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"deref_mut","","",41,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",66,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"deref_mut","","",48,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",31,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",13,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",68,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",5,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",24,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",11,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",39,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",7,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",23,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"deref_mut","","",72,{"inputs":[{"name":"self"}],"output":{"name":"contentrangespec"}}],[11,"deref_mut","","",12,{"inputs":[{"name":"self"}],"output":{"name":"mime"}}],[11,"deref_mut","","",62,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",51,{"inputs":[{"name":"self"}],"output":{"name":"entitytag"}}],[11,"deref_mut","","",57,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",16,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",28,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",30,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",53,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",61,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",32,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",9,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",73,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",74,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",69,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",27,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",58,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",37,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref","","",34,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"deref","","",42,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",26,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",52,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",45,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"deref","","",41,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"safe","iron::method","Whether a method is considered \"safe\", meaning the request is essentially read-only.",90,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"idempotent","","Whether a method is considered \"idempotent\", meaning the request has the same result is executed multiple times.",90,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"deref","iron::headers","",66,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"deref","","",48,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",31,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",13,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",68,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",5,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",24,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",11,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",39,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",23,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"deref","","",72,{"inputs":[{"name":"self"}],"output":{"name":"contentrangespec"}}],[11,"get_param","iron::mime","",82,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"option"}}],[11,"deref","iron::headers","",12,{"inputs":[{"name":"self"}],"output":{"name":"mime"}}],[11,"deref","","",62,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"new","","Constructs a new EntityTag. # Panics If the tag contains invalid characters.",15,{"inputs":[{"name":"bool"},{"name":"string"}],"output":{"name":"entitytag"}}],[11,"weak","","Constructs a new weak EntityTag. # Panics If the tag contains invalid characters.",15,{"inputs":[{"name":"string"}],"output":{"name":"entitytag"}}],[11,"strong","","Constructs a new strong EntityTag. # Panics If the tag contains invalid characters.",15,{"inputs":[{"name":"string"}],"output":{"name":"entitytag"}}],[11,"tag","","Get the tag.",15,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"set_tag","","Set the tag. # Panics If the tag contains invalid characters.",15,null],[11,"strong_eq","","For strong comparison two entity-tags are equivalent if both are not weak and their opaque-tags match character-by-character.",15,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"weak_eq","","For weak comparison two entity-tags are equivalent if their opaque-tags match character-by-character, regardless of either or both being tagged as \"weak\".",15,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"strong_ne","","The inverse of `EntityTag.strong_eq()`.",15,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"weak_ne","","The inverse of `EntityTag.weak_eq()`.",15,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"deref","","",51,{"inputs":[{"name":"self"}],"output":{"name":"entitytag"}}],[11,"deref","","",57,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref","","",16,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref","","",28,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref","","",30,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref","","",53,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref","","",61,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref","","",32,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",9,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",73,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref","","",74,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref","","",69,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",27,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",58,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",37,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"eq","iron","",110,{"inputs":[{"name":"self"},{"name":"headers"}],"output":{"name":"bool"}}],[11,"eq","iron::status","",88,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"eq","iron::method","",90,{"inputs":[{"name":"self"},{"name":"method"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"method"}],"output":{"name":"bool"}}],[11,"eq","iron::headers","",42,{"inputs":[{"name":"self"},{"name":"accept"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"accept"}],"output":{"name":"bool"}}],[11,"eq","","",112,{"inputs":[{"name":"self"},{"name":"accesscontrolallowcredentials"}],"output":{"name":"bool"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"accesscontrolallowheaders"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"accesscontrolallowheaders"}],"output":{"name":"bool"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"accesscontrolallowmethods"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"accesscontrolallowmethods"}],"output":{"name":"bool"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"accesscontrolexposeheaders"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"accesscontrolexposeheaders"}],"output":{"name":"bool"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"accesscontrolmaxage"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"accesscontrolmaxage"}],"output":{"name":"bool"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestheaders"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestheaders"}],"output":{"name":"bool"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestmethod"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestmethod"}],"output":{"name":"bool"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"acceptcharset"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"acceptcharset"}],"output":{"name":"bool"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"acceptencoding"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"acceptencoding"}],"output":{"name":"bool"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"acceptlanguage"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"acceptlanguage"}],"output":{"name":"bool"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"acceptranges"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"acceptranges"}],"output":{"name":"bool"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"rangeunit"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"rangeunit"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"allow"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"allow"}],"output":{"name":"bool"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"authorization"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"authorization"}],"output":{"name":"bool"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"basic"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"basic"}],"output":{"name":"bool"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"bearer"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"bearer"}],"output":{"name":"bool"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"cachecontrol"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"cachecontrol"}],"output":{"name":"bool"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"cachedirective"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"cachedirective"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"connectionoption"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"connectionoption"}],"output":{"name":"bool"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"connection"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"connection"}],"output":{"name":"bool"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"dispositiontype"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"self"},{"name":"dispositiontype"}],"output":{"name":"bool"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"dispositionparam"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"dispositionparam"}],"output":{"name":"bool"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"contentdisposition"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"contentdisposition"}],"output":{"name":"bool"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"contentencoding"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"contentencoding"}],"output":{"name":"bool"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"contentlanguage"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"contentlanguage"}],"output":{"name":"bool"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"contentlength"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"contentlength"}],"output":{"name":"bool"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"contentrange"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"contentrange"}],"output":{"name":"bool"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"contentrangespec"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"contentrangespec"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"contenttype"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"contenttype"}],"output":{"name":"bool"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"etag"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"etag"}],"output":{"name":"bool"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"expect"}],"output":{"name":"bool"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"expires"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"expires"}],"output":{"name":"bool"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"from"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"from"}],"output":{"name":"bool"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"ifmatch"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"ifmatch"}],"output":{"name":"bool"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"ifmodifiedsince"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"ifmodifiedsince"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"ifnonematch"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"ifnonematch"}],"output":{"name":"bool"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"ifrange"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"ifrange"}],"output":{"name":"bool"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"ifunmodifiedsince"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"ifunmodifiedsince"}],"output":{"name":"bool"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"lastmodified"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"lastmodified"}],"output":{"name":"bool"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"pragma"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"pragma"}],"output":{"name":"bool"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"prefer"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"prefer"}],"output":{"name":"bool"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"preference"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"preference"}],"output":{"name":"bool"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"preferenceapplied"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"preferenceapplied"}],"output":{"name":"bool"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"byterangespec"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"byterangespec"}],"output":{"name":"bool"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"referer"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"self"},{"name":"referer"}],"output":{"name":"bool"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"referrerpolicy"}],"output":{"name":"bool"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"server"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"server"}],"output":{"name":"bool"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"setcookie"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"setcookie"}],"output":{"name":"bool"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"stricttransportsecurity"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"stricttransportsecurity"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"transferencoding"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"transferencoding"}],"output":{"name":"bool"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"upgrade"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"upgrade"}],"output":{"name":"bool"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"protocolname"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"protocolname"}],"output":{"name":"bool"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"protocol"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"protocol"}],"output":{"name":"bool"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"useragent"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"useragent"}],"output":{"name":"bool"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"vary"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"vary"}],"output":{"name":"bool"}}],[11,"eq","","",113,{"inputs":[{"name":"self"},{"name":"link"}],"output":{"name":"bool"}}],[11,"ne","","",113,{"inputs":[{"name":"self"},{"name":"link"}],"output":{"name":"bool"}}],[11,"eq","","",114,{"inputs":[{"name":"self"},{"name":"linkvalue"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"self"},{"name":"linkvalue"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"mediadesc"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"mediadesc"}],"output":{"name":"bool"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"relationtype"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"relationtype"}],"output":{"name":"bool"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"qualityitem"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"qualityitem"}],"output":{"name":"bool"}}],[11,"eq","iron::headers::parsing","",1,{"inputs":[{"name":"self"},{"name":"extendedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"extendedvalue"}],"output":{"name":"bool"}}],[11,"eq","iron::status","",89,{"inputs":[{"name":"self"},{"name":"statusclass"}],"output":{"name":"bool"}}],[11,"next","iron::headers","",115,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","iron::status","",88,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"clone","iron::method","",90,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"clone","iron::headers","",42,{"inputs":[{"name":"self"}],"output":{"name":"accept"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolallowcredentials"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolallowheaders"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolallowmethods"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolalloworigin"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolexposeheaders"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolmaxage"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolrequestheaders"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolrequestmethod"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"acceptcharset"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"acceptencoding"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"acceptlanguage"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"acceptranges"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"rangeunit"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"allow"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"authorization"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"basic"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"bearer"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"cachecontrol"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"cachedirective"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"cookie"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"connectionoption"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"connection"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"dispositiontype"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"dispositionparam"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"contentdisposition"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"contentencoding"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"contentlanguage"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"contentlength"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"contentrange"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"contentrangespec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"contenttype"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"etag"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"expect"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"expires"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"from"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"host"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"ifmatch"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"ifmodifiedsince"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"ifnonematch"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"ifrange"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"ifunmodifiedsince"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"lastmodified"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"location"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"pragma"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"prefer"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"preference"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"preferenceapplied"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"byterangespec"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"referer"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"referrerpolicy"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"server"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"setcookie"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"stricttransportsecurity"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"transferencoding"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"upgrade"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"protocolname"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"protocol"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"useragent"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"vary"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"link"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"linkvalue"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"mediadesc"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"relationtype"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"charset"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"encoding"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"entitytag"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"quality"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"qualityitem"}}],[11,"clone","iron::headers::parsing","",1,{"inputs":[{"name":"self"}],"output":{"name":"extendedvalue"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"http_value"}}],[11,"clone","iron","",110,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"clone","iron::status","",89,{"inputs":[{"name":"self"}],"output":{"name":"statusclass"}}],[11,"drop","iron::response","",96,null],[11,"drop","iron","",0,null],[11,"from","iron::error","",85,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",85,{"inputs":[{"name":"parseerror"}],"output":{"name":"error"}}],[11,"from","","",85,{"inputs":[{"name":"utf8error"}],"output":{"name":"error"}}],[11,"from","","",85,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"from","","",85,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","iron::method","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","iron::headers","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","iron::headers::parsing","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","iron","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","iron::headers","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","iron::status","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","iron::headers","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","iron","",110,{"inputs":[{"name":"i"}],"output":{"name":"headers"}}],[11,"cmp","iron::status","",88,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"ordering"}}],[11,"cmp","iron::headers","",44,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"ordering"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"ordering"}}],[11,"cmp","iron::status","",89,{"inputs":[{"name":"self"},{"name":"statusclass"}],"output":{"name":"ordering"}}],[11,"eq","iron::mime","",82,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"toplevel"}],"output":{"name":"bool"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"sublevel"}],"output":{"name":"bool"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"mime"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"toplevel"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"sublevel"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"attr"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",82,null],[11,"hash","","",80,null],[11,"hash","","",81,null],[11,"hash","","",78,null],[11,"hash","","",79,null],[11,"partial_cmp","","",82,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"option"}}],[11,"lt","","",82,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"le","","",82,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"gt","","",82,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"ge","","",82,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",80,{"inputs":[{"name":"self"},{"name":"toplevel"}],"output":{"name":"option"}}],[11,"lt","","",80,{"inputs":[{"name":"self"},{"name":"toplevel"}],"output":{"name":"bool"}}],[11,"le","","",80,{"inputs":[{"name":"self"},{"name":"toplevel"}],"output":{"name":"bool"}}],[11,"gt","","",80,{"inputs":[{"name":"self"},{"name":"toplevel"}],"output":{"name":"bool"}}],[11,"ge","","",80,{"inputs":[{"name":"self"},{"name":"toplevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",81,{"inputs":[{"name":"self"},{"name":"sublevel"}],"output":{"name":"option"}}],[11,"lt","","",81,{"inputs":[{"name":"self"},{"name":"sublevel"}],"output":{"name":"bool"}}],[11,"le","","",81,{"inputs":[{"name":"self"},{"name":"sublevel"}],"output":{"name":"bool"}}],[11,"gt","","",81,{"inputs":[{"name":"self"},{"name":"sublevel"}],"output":{"name":"bool"}}],[11,"ge","","",81,{"inputs":[{"name":"self"},{"name":"sublevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",78,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"option"}}],[11,"lt","","",78,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"le","","",78,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"gt","","",78,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"ge","","",78,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",79,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"option"}}],[11,"lt","","",79,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"le","","",79,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"gt","","",79,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ge","","",79,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",82,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",80,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",81,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",78,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",79,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"cmp","","",82,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"ordering"}}],[11,"cmp","","",80,{"inputs":[{"name":"self"},{"name":"toplevel"}],"output":{"name":"ordering"}}],[11,"cmp","","",81,{"inputs":[{"name":"self"},{"name":"sublevel"}],"output":{"name":"ordering"}}],[11,"cmp","","",78,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"ordering"}}],[11,"cmp","","",79,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"ordering"}}],[11,"deref","","",80,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",81,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",78,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",79,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","iron::typemap","Create a new, empty TypeMap.",108,{"inputs":[],"output":{"name":"typemap"}}],[11,"custom","","Create a new, empty TypeMap.",108,{"inputs":[],"output":{"name":"typemap"}}],[11,"insert","","Insert a value into the map with a specified key type.",108,null],[11,"get","","Find a value in the map and get a reference to it.",108,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_mut","","Find a value in the map and get a mutable reference to it.",108,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"contains","","Check if a key has an associated value stored in the map.",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remove","","Remove a value from the map.",108,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"entry","","Get the given key's corresponding entry in the map for in-place manipulation.",108,{"inputs":[{"name":"self"}],"output":{"name":"entry"}}],[11,"data","","Read the underlying HashMap",108,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"data_mut","","Get a mutable reference to the underlying HashMap",108,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"len","","Get the number of values stored in the map.",108,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Return true if the map contains no values.",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Remove all entries from the map.",108,null],[11,"new","iron","Creates a new, empty headers map.",110,{"inputs":[],"output":{"name":"headers"}}],[11,"set","","Set a header field to the corresponding value.",110,null],[11,"get_raw","","Access the raw value of a header.",110,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"set_raw","","Set the raw value of a header, bypassing any typed headers.",110,null],[11,"append_raw","","Append a value to raw value of this header.",110,null],[11,"remove_raw","","Remove a header set by set_raw",110,null],[11,"get","","Get a reference to the header field's value, if it exists.",110,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_mut","","Get a mutable reference to the header field's value, if it exists.",110,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"has","","Returns a boolean of whether a certain header is in the map.",110,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remove","","Removes a header from the map, if one existed. Returns true if a header has been removed.",110,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the header fields.",110,{"inputs":[{"name":"self"}],"output":{"name":"headersitems"}}],[11,"len","","Returns the number of headers in the map.",110,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","Remove all headers from the map.",110,null],[11,"is","iron::headers","Check if a HeaderView is a certain Header.",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"name","","Get the Header name as a slice.",111,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"value","","Cast the value to a certain Header type.",111,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"value_string","","Get just the header value as a String.",111,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"json","","A constructor  to easily create a `Content-Type: application/json` header.",12,{"inputs":[],"output":{"name":"contenttype"}}],[11,"plaintext","","A constructor  to easily create a `Content-Type: text/plain; charset=utf-8` header.",12,{"inputs":[],"output":{"name":"contenttype"}}],[11,"html","","A constructor  to easily create a `Content-Type: text/html; charset=utf-8` header.",12,{"inputs":[],"output":{"name":"contenttype"}}],[11,"form_url_encoded","","A constructor  to easily create a `Content-Type: application/www-form-url-encoded` header.",12,{"inputs":[],"output":{"name":"contenttype"}}],[11,"jpeg","","A constructor  to easily create a `Content-Type: image/jpeg` header.",12,{"inputs":[],"output":{"name":"contenttype"}}],[11,"png","","A constructor  to easily create a `Content-Type: image/png` header.",12,{"inputs":[],"output":{"name":"contenttype"}}],[11,"new","","Create `Link` from a `Vec<LinkValue>`.",113,{"inputs":[{"name":"vec"}],"output":{"name":"link"}}],[11,"values","","Get the `Link` header's `LinkValue`s.",113,null],[11,"push_value","","Add a `LinkValue` instance to the `Link` header's values.",113,null],[11,"close","","A constructor to easily create a `Connection: close` header.",39,{"inputs":[],"output":{"name":"connection"}}],[11,"keep_alive","","A constructor to easily create a `Connection: keep-alive` header.",39,{"inputs":[],"output":{"name":"connection"}}],[11,"star","","A constructor to easily create `Accept: */*`.",42,{"inputs":[],"output":{"name":"accept"}}],[11,"json","","A constructor to easily create `Accept: application/json`.",42,{"inputs":[],"output":{"name":"accept"}}],[11,"text","","A constructor to easily create `Accept: text/*`.",42,{"inputs":[],"output":{"name":"accept"}}],[11,"image","","A constructor to easily create `Accept: image/*`.",42,{"inputs":[],"output":{"name":"accept"}}],[11,"new","","Creates a new Protocol with the given name and version",43,{"inputs":[{"name":"protocolname"},{"name":"option"}],"output":{"name":"protocol"}}],[11,"including_subdomains","","Create an STS header that includes subdomains",49,{"inputs":[{"name":"u64"}],"output":{"name":"stricttransportsecurity"}}],[11,"excluding_subdomains","","Create an STS header that excludes subdomains",49,{"inputs":[{"name":"u64"}],"output":{"name":"stricttransportsecurity"}}],[11,"new","","Creates a new `QualityItem` from an item and a quality. The item can be of any type. The quality should be a value in the range [0, 1].",59,{"inputs":[{"name":"t"},{"name":"quality"}],"output":{"name":"qualityitem"}}],[11,"new","","Create `LinkValue` from URI-Reference.",114,{"inputs":[{"name":"t"}],"output":{"name":"linkvalue"}}],[11,"link","","Get the `LinkValue`'s value.",114,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"rel","","Get the `LinkValue`'s `rel` parameter(s).",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"anchor","","Get the `LinkValue`'s `anchor` parameter.",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rev","","Get the `LinkValue`'s `rev` parameter(s).",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"href_lang","","Get the `LinkValue`'s `hreflang` parameter(s).",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"media_desc","","Get the `LinkValue`'s `media` parameter(s).",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"title","","Get the `LinkValue`'s `title` parameter.",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"title_star","","Get the `LinkValue`'s `title*` parameter.",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"media_type","","Get the `LinkValue`'s `type` parameter.",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_rel","","Add a `RelationType` to the `LinkValue`'s `rel` parameter.",114,{"inputs":[{"name":"self"},{"name":"relationtype"}],"output":{"name":"linkvalue"}}],[11,"set_anchor","","Set `LinkValue`'s `anchor` parameter.",114,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"linkvalue"}}],[11,"push_rev","","Add a `RelationType` to the `LinkValue`'s `rev` parameter.",114,{"inputs":[{"name":"self"},{"name":"relationtype"}],"output":{"name":"linkvalue"}}],[11,"push_href_lang","","Add a `LanguageTag` to the `LinkValue`'s `hreflang` parameter.",114,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"linkvalue"}}],[11,"push_media_desc","","Add a `MediaDesc` to the `LinkValue`'s `media_desc` parameter.",114,{"inputs":[{"name":"self"},{"name":"mediadesc"}],"output":{"name":"linkvalue"}}],[11,"set_title","","Set `LinkValue`'s `title` parameter.",114,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"linkvalue"}}],[11,"set_title_star","","Set `LinkValue`'s `title*` parameter.",114,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"linkvalue"}}],[11,"set_media_type","","Set `LinkValue`'s `type` parameter.",114,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"linkvalue"}}],[11,"bytes","","Get the most common byte range header (\"bytes=from-to\")",64,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"range"}}],[11,"bytes_multi","","Get byte range header with multiple subranges (\"bytes=from1-to1,from2-to2,fromX-toX\")",64,{"inputs":[{"name":"vec"}],"output":{"name":"range"}}],[11,"new","","Creates a new `Origin` header.",67,{"inputs":[{"name":"s"},{"name":"h"},{"name":"option"}],"output":{"name":"origin"}}],[11,"is","iron::error","Is this `Error` object of type `E`?",116,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast","","If this error is `E`, downcast this error to `E`, by reference.",116,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Is this `Error + Send` object of type `E`?",116,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast","","If this error is `E`, downcast this error to `E`, by reference.",116,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_str","iron::mime","",78,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_str","","",79,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_str","","",80,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_str","","",81,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"canonical_reason","iron::status","Get the standardised `reason-phrase` for this status code.",88,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"class","","Determine the class of a status code, based on its first digit.",88,{"inputs":[{"name":"self"}],"output":{"name":"statusclass"}}],[11,"is_informational","","Check if class is Informational.",88,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_success","","Check if class is Success.",88,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_redirection","","Check if class is Redirection.",88,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_client_error","","Check if class is ClientError.",88,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_server_error","","Check if class is ServerError.",88,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_strange_status","","Check if class is NoClass",88,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default_code","","Get the default status code for the class.",89,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"status","iron::response","The status of this response.",96,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"headers","","The headers of this response.",96,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"construct","","Construct a Response from its constituent parts.",96,{"inputs":[{"name":"httpversion"},{"name":"httpwriter"},{"name":"statuscode"},{"name":"headers"}],"output":{"name":"response"}}],[11,"deconstruct","","Deconstruct this Response into its constituent parts.",96,null],[11,"new","","Creates a new Response that can be used to write to a network stream.",96,{"inputs":[{"name":"write"},{"name":"headers"}],"output":{"name":"response"}}],[11,"send","","Writes the body and ends the response.",96,null],[11,"start","","Consume this Response, writing the Headers and Status and creating a Response",96,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"status_mut","","Get a mutable reference to the status.",96,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"headers_mut","","Get a mutable reference to the Headers.",96,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"end","","Flushes all writing of a response to the client.",96,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","iron::request","Create a new Request, reading the StartLine and Headers so they are immediately useful.",100,{"inputs":[{"name":"bufreader"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Set the read timeout of the underlying NetworkStream.",100,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"downcast_ref","","Get a reference to the underlying `NetworkStream`.",100,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"ssl","","Get a reference to the underlying Ssl stream, if connected over HTTPS.",100,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deconstruct","","Deconstruct a Request into its constituent parts.",100,null]],"paths":[[3,"Listening"],[3,"ExtendedValue"],[8,"Header"],[8,"HeaderFormat"],[3,"HeaderFormatter"],[3,"Allow"],[4,"IfNoneMatch"],[3,"ContentEncoding"],[3,"ContentLength"],[3,"PreferenceApplied"],[3,"Quality"],[3,"Cookie"],[3,"ContentType"],[3,"AcceptLanguage"],[4,"Pragma"],[3,"EntityTag"],[3,"From"],[4,"MediaDesc"],[4,"ProtocolName"],[4,"RangeUnit"],[4,"RelationType"],[4,"ByteRangeSpec"],[4,"Encoding"],[3,"ContentLanguage"],[3,"CacheControl"],[3,"AccessControlMaxAge"],[3,"AccessControlAllowHeaders"],[3,"TransferEncoding"],[3,"IfModifiedSince"],[4,"ContentRangeSpec"],[3,"IfUnmodifiedSince"],[3,"AcceptEncoding"],[3,"Prefer"],[3,"Host"],[3,"Authorization"],[4,"AccessControlAllowOrigin"],[8,"Scheme"],[3,"UserAgent"],[4,"Expect"],[3,"Connection"],[4,"IfMatch"],[3,"AccessControlRequestHeaders"],[3,"Accept"],[3,"Protocol"],[3,"HttpDate"],[3,"AccessControlExposeHeaders"],[4,"ReferrerPolicy"],[3,"ContentDisposition"],[3,"AcceptCharset"],[3,"StrictTransportSecurity"],[4,"IfRange"],[3,"ETag"],[3,"AccessControlAllowMethods"],[3,"LastModified"],[4,"Vary"],[4,"CacheDirective"],[3,"Bearer"],[3,"Expires"],[3,"Upgrade"],[3,"QualityItem"],[4,"Preference"],[3,"Location"],[3,"Date"],[3,"Basic"],[4,"Range"],[4,"ConnectionOption"],[3,"AccessControlRequestMethod"],[3,"Origin"],[3,"AcceptRanges"],[3,"SetCookie"],[4,"Charset"],[4,"DispositionParam"],[3,"ContentRange"],[3,"Referer"],[3,"Server"],[4,"DispositionType"],[8,"Plugin"],[8,"Set"],[4,"Attr"],[4,"Value"],[4,"TopLevel"],[4,"SubLevel"],[3,"Mime"],[3,"Iron"],[3,"Timeouts"],[4,"HttpError"],[3,"IronError"],[8,"Key"],[4,"Status"],[4,"StatusClass"],[4,"Method"],[8,"Handler"],[8,"BeforeMiddleware"],[8,"AfterMiddleware"],[8,"AroundMiddleware"],[3,"Chain"],[3,"HttpResponse"],[3,"BodyReader"],[3,"Response"],[8,"WriteBody"],[3,"HttpRequest"],[3,"Request"],[3,"Url"],[3,"Body"],[3,"Header"],[3,"Redirect"],[3,"RedirectRaw"],[3,"Protocol"],[3,"TypeMap"],[3,"HTTP_VALUE"],[3,"Headers"],[3,"HeaderView"],[3,"AccessControlAllowCredentials"],[3,"Link"],[3,"LinkValue"],[3,"HeadersItems"],[8,"Error"]]};
searchIndex["itoa"] = {"doc":"","items":[[5,"write","itoa","",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"name":"result"}}],[8,"Integer","","",null,null],[10,"write","","",0,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}]],"paths":[[8,"Integer"]]};
searchIndex["language_tags"] = {"doc":"Language tags can be used identify human languages, scripts e.g. Latin script, countries and other regions.","items":[[3,"LanguageTag","language_tags","A language tag as described in BCP47.",null,null],[12,"language","","Language subtags are used to indicate the language, ignoring all other aspects such as script, region or spefic invariants.",0,null],[12,"extlangs","","Extended language subtags are used to identify certain specially selected languages that, for various historical and compatibility reasons, are closely identified with or tagged using an existing primary language subtag.",0,null],[12,"script","","Script subtags are used to indicate the script or writing system variations that distinguish the written forms of a language or its dialects.",0,null],[12,"region","","Region subtags are used to indicate linguistic variations associated with or appropriate to a specific country, territory, or region. Typically, a region subtag is used to indicate variations such as regional dialects or usage, or region-specific spelling conventions. It can also be used to indicate that content is expressed in a way that is appropriate for use throughout a region, for instance, Spanish content tailored to be useful throughout Latin America.",0,null],[12,"variants","","Variant subtags are used to indicate additional, well-recognized variations that define a language or its dialects that are not covered by other available subtags.",0,null],[12,"extensions","","Extensions provide a mechanism for extending language tags for use in various applications.  They are intended to identify information that is commonly used in association with languages or language tags but that is not part of language identification.",0,null],[12,"privateuse","","Private use subtags are used to indicate distinctions in language that are important in a given context by private agreement.",0,null],[4,"Error","","Defines an Error type for langtags.",null,null],[13,"DuplicateExtension","","The same extension subtag is only allowed once in a tag before the private use part.",1,null],[13,"EmptyExtension","","If an extension subtag is present, it must not be empty.",1,null],[13,"EmptyPrivateUse","","If the `x` subtag is present, it must not be empty.",1,null],[13,"ForbiddenChar","","The langtag contains a char that is not A-Z, a-z, 0-9 or the dash.",1,null],[13,"InvalidSubtag","","A subtag fails to parse, it does not match any other subtags.",1,null],[13,"InvalidLanguage","","The given language subtag is invalid.",1,null],[13,"SubtagTooLong","","A subtag may be eight characters in length at maximum.",1,null],[13,"TooManyExtlangs","","At maximum three extlangs are allowed, but zero to one extlangs are preferred.",1,null],[6,"Result","","Result type used for this library.",null,null],[17,"GRANDFATHERED","","Contains all grandfathered tags.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"languagetag"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"languagetag"}}],[11,"matches","","Matches language tags. The first language acts as a language range, the second one is used as a normal language tag. None fields in the language range are ignored. If the language tag has more extlangs than the range these extlangs are ignored. Matches are case-insensitive. `*` in language ranges are represented using `None` values. The language range `*` that matches language tags is created by the default language tag: `let wildcard: LanguageTag = Default::default();.`",0,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"is_language_range","","Checks if it is a language range, meaning that there are no extension and privateuse tags.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"canonicalize","","Returns the canonical version of the language tag.",0,{"inputs":[{"name":"self"}],"output":{"name":"languagetag"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"langtag","","Utility for creating simple language tags.",null,null]],"paths":[[3,"LanguageTag"],[4,"Error"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",null,{"inputs":[{"name":"t"}],"output":null}],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",null,null],[14,"lazy_static","","",null,null]],"paths":[]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"itimerval","","",null,null],[12,"it_interval","","",16,null],[12,"it_value","","",16,null],[3,"tms","","",null,null],[12,"tms_utime","","",17,null],[12,"tms_stime","","",17,null],[12,"tms_cutime","","",17,null],[12,"tms_cstime","","",17,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",18,null],[12,"sa_data","","",18,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",19,null],[12,"sin_port","","",19,null],[12,"sin_addr","","",19,null],[12,"sin_zero","","",19,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",20,null],[12,"sin6_port","","",20,null],[12,"sin6_flowinfo","","",20,null],[12,"sin6_addr","","",20,null],[12,"sin6_scope_id","","",20,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",21,null],[12,"sun_path","","",21,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",22,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",23,null],[12,"ai_family","","",23,null],[12,"ai_socktype","","",23,null],[12,"ai_protocol","","",23,null],[12,"ai_addrlen","","",23,null],[12,"ai_addr","","",23,null],[12,"ai_canonname","","",23,null],[12,"ai_next","","",23,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",24,null],[12,"nl_pid","","",24,null],[12,"nl_groups","","",24,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",25,null],[12,"sll_protocol","","",25,null],[12,"sll_ifindex","","",25,null],[12,"sll_hatype","","",25,null],[12,"sll_pkttype","","",25,null],[12,"sll_halen","","",25,null],[12,"sll_addr","","",25,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",26,null],[12,"tm_min","","",26,null],[12,"tm_hour","","",26,null],[12,"tm_mday","","",26,null],[12,"tm_mon","","",26,null],[12,"tm_year","","",26,null],[12,"tm_wday","","",26,null],[12,"tm_yday","","",26,null],[12,"tm_isdst","","",26,null],[12,"tm_gmtoff","","",26,null],[12,"tm_zone","","",26,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",27,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",28,null],[12,"dli_fbase","","",28,null],[12,"dli_sname","","",28,null],[12,"dli_saddr","","",28,null],[3,"epoll_event","","",null,null],[12,"events","","",29,null],[12,"u64","","",29,null],[3,"utsname","","",null,null],[12,"sysname","","",30,null],[12,"nodename","","",30,null],[12,"release","","",30,null],[12,"version","","",30,null],[12,"machine","","",30,null],[12,"domainname","","",30,null],[3,"lconv","","",null,null],[12,"decimal_point","","",31,null],[12,"thousands_sep","","",31,null],[12,"grouping","","",31,null],[12,"int_curr_symbol","","",31,null],[12,"currency_symbol","","",31,null],[12,"mon_decimal_point","","",31,null],[12,"mon_thousands_sep","","",31,null],[12,"mon_grouping","","",31,null],[12,"positive_sign","","",31,null],[12,"negative_sign","","",31,null],[12,"int_frac_digits","","",31,null],[12,"frac_digits","","",31,null],[12,"p_cs_precedes","","",31,null],[12,"p_sep_by_space","","",31,null],[12,"n_cs_precedes","","",31,null],[12,"n_sep_by_space","","",31,null],[12,"p_sign_posn","","",31,null],[12,"n_sign_posn","","",31,null],[12,"int_p_cs_precedes","","",31,null],[12,"int_p_sep_by_space","","",31,null],[12,"int_n_cs_precedes","","",31,null],[12,"int_n_sep_by_space","","",31,null],[12,"int_p_sign_posn","","",31,null],[12,"int_n_sign_posn","","",31,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",32,null],[12,"sigev_signo","","",32,null],[12,"sigev_notify","","",32,null],[12,"sigev_notify_thread_id","","",32,null],[3,"dirent","","",null,null],[12,"d_ino","","",33,null],[12,"d_off","","",33,null],[12,"d_reclen","","",33,null],[12,"d_type","","",33,null],[12,"d_name","","",33,null],[3,"dirent64","","",null,null],[12,"d_ino","","",34,null],[12,"d_off","","",34,null],[12,"d_reclen","","",34,null],[12,"d_type","","",34,null],[12,"d_name","","",34,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",35,null],[12,"rlim_max","","",35,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",36,null],[12,"gl_pathv","","",36,null],[12,"gl_offs","","",36,null],[12,"gl_flags","","",36,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",37,null],[12,"ifa_name","","",37,null],[12,"ifa_flags","","",37,null],[12,"ifa_addr","","",37,null],[12,"ifa_netmask","","",37,null],[12,"ifa_ifu","","",37,null],[12,"ifa_data","","",37,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",38,null],[12,"pw_passwd","","",38,null],[12,"pw_uid","","",38,null],[12,"pw_gid","","",38,null],[12,"pw_gecos","","",38,null],[12,"pw_dir","","",38,null],[12,"pw_shell","","",38,null],[3,"spwd","","",null,null],[12,"sp_namp","","",39,null],[12,"sp_pwdp","","",39,null],[12,"sp_lstchg","","",39,null],[12,"sp_min","","",39,null],[12,"sp_max","","",39,null],[12,"sp_warn","","",39,null],[12,"sp_inact","","",39,null],[12,"sp_expire","","",39,null],[12,"sp_flag","","",39,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",40,null],[12,"f_frsize","","",40,null],[12,"f_blocks","","",40,null],[12,"f_bfree","","",40,null],[12,"f_bavail","","",40,null],[12,"f_files","","",40,null],[12,"f_ffree","","",40,null],[12,"f_favail","","",40,null],[12,"f_fsid","","",40,null],[12,"f_flag","","",40,null],[12,"f_namemax","","",40,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",41,null],[12,"dqb_bsoftlimit","","",41,null],[12,"dqb_curspace","","",41,null],[12,"dqb_ihardlimit","","",41,null],[12,"dqb_isoftlimit","","",41,null],[12,"dqb_curinodes","","",41,null],[12,"dqb_btime","","",41,null],[12,"dqb_itime","","",41,null],[12,"dqb_valid","","",41,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",42,null],[12,"ssi_errno","","",42,null],[12,"ssi_code","","",42,null],[12,"ssi_pid","","",42,null],[12,"ssi_uid","","",42,null],[12,"ssi_fd","","",42,null],[12,"ssi_tid","","",42,null],[12,"ssi_band","","",42,null],[12,"ssi_overrun","","",42,null],[12,"ssi_trapno","","",42,null],[12,"ssi_status","","",42,null],[12,"ssi_int","","",42,null],[12,"ssi_ptr","","",42,null],[12,"ssi_utime","","",42,null],[12,"ssi_stime","","",42,null],[12,"ssi_addr","","",42,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",43,null],[12,"mq_maxmsg","","",43,null],[12,"mq_msgsize","","",43,null],[12,"mq_curmsgs","","",43,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",44,null],[12,"if_name","","",44,null],[3,"msginfo","","",null,null],[12,"msgpool","","",45,null],[12,"msgmap","","",45,null],[12,"msgmax","","",45,null],[12,"msgmnb","","",45,null],[12,"msgmni","","",45,null],[12,"msgssz","","",45,null],[12,"msgtql","","",45,null],[12,"msgseg","","",45,null],[3,"mmsghdr","","",null,null],[12,"msg_hdr","","",46,null],[12,"msg_len","","",46,null],[3,"sembuf","","",null,null],[12,"sem_num","","",47,null],[12,"sem_op","","",47,null],[12,"sem_flg","","",47,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",48,null],[12,"aio_lio_opcode","","",48,null],[12,"aio_reqprio","","",48,null],[12,"aio_buf","","",48,null],[12,"aio_nbytes","","",48,null],[12,"aio_sigevent","","",48,null],[12,"aio_offset","","",48,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",49,null],[12,"e_exit","","",49,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",50,null],[12,"tv_usec","","",50,null],[3,"utmpx","","",null,null],[12,"ut_type","","",51,null],[12,"ut_pid","","",51,null],[12,"ut_line","","",51,null],[12,"ut_id","","",51,null],[12,"ut_user","","",51,null],[12,"ut_host","","",51,null],[12,"ut_exit","","",51,null],[12,"ut_session","","",51,null],[12,"ut_tv","","",51,null],[12,"ut_addr_v6","","",51,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",52,null],[12,"sa_mask","","",52,null],[12,"sa_flags","","",52,null],[12,"sa_restorer","","",52,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",53,null],[12,"ss_flags","","",53,null],[12,"ss_size","","",53,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",54,null],[12,"si_errno","","",54,null],[12,"si_code","","",54,null],[12,"_pad","","",54,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",55,null],[12,"gl_pathv","","",55,null],[12,"gl_offs","","",55,null],[12,"gl_flags","","",55,null],[3,"ucred","","",null,null],[12,"pid","","",56,null],[12,"uid","","",56,null],[12,"gid","","",56,null],[3,"statfs","","",null,null],[12,"f_type","","",57,null],[12,"f_bsize","","",57,null],[12,"f_blocks","","",57,null],[12,"f_bfree","","",57,null],[12,"f_bavail","","",57,null],[12,"f_files","","",57,null],[12,"f_ffree","","",57,null],[12,"f_fsid","","",57,null],[12,"f_namelen","","",57,null],[12,"f_frsize","","",57,null],[3,"msghdr","","",null,null],[12,"msg_name","","",58,null],[12,"msg_namelen","","",58,null],[12,"msg_iov","","",58,null],[12,"msg_iovlen","","",58,null],[12,"msg_control","","",58,null],[12,"msg_controllen","","",58,null],[12,"msg_flags","","",58,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",59,null],[12,"cmsg_level","","",59,null],[12,"cmsg_type","","",59,null],[3,"termios","","",null,null],[12,"c_iflag","","",60,null],[12,"c_oflag","","",60,null],[12,"c_cflag","","",60,null],[12,"c_lflag","","",60,null],[12,"c_line","","",60,null],[12,"c_cc","","",60,null],[12,"c_ispeed","","",60,null],[12,"c_ospeed","","",60,null],[3,"flock","","",null,null],[12,"l_type","","",61,null],[12,"l_whence","","",61,null],[12,"l_start","","",61,null],[12,"l_len","","",61,null],[12,"l_pid","","",61,null],[3,"sem_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",62,null],[12,"loads","","",62,null],[12,"totalram","","",62,null],[12,"freeram","","",62,null],[12,"sharedram","","",62,null],[12,"bufferram","","",62,null],[12,"totalswap","","",62,null],[12,"freeswap","","",62,null],[12,"procs","","",62,null],[12,"pad","","",62,null],[12,"totalhigh","","",62,null],[12,"freehigh","","",62,null],[12,"mem_unit","","",62,null],[12,"_f","","",62,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",63,null],[12,"msg_stime","","",63,null],[12,"msg_rtime","","",63,null],[12,"msg_ctime","","",63,null],[12,"msg_qnum","","",63,null],[12,"msg_qbytes","","",63,null],[12,"msg_lspid","","",63,null],[12,"msg_lrpid","","",63,null],[3,"stat","","",null,null],[12,"st_dev","","",64,null],[12,"st_ino","","",64,null],[12,"st_nlink","","",64,null],[12,"st_mode","","",64,null],[12,"st_uid","","",64,null],[12,"st_gid","","",64,null],[12,"st_rdev","","",64,null],[12,"st_size","","",64,null],[12,"st_blksize","","",64,null],[12,"st_blocks","","",64,null],[12,"st_atime","","",64,null],[12,"st_atime_nsec","","",64,null],[12,"st_mtime","","",64,null],[12,"st_mtime_nsec","","",64,null],[12,"st_ctime","","",64,null],[12,"st_ctime_nsec","","",64,null],[3,"stat64","","",null,null],[12,"st_dev","","",65,null],[12,"st_ino","","",65,null],[12,"st_nlink","","",65,null],[12,"st_mode","","",65,null],[12,"st_uid","","",65,null],[12,"st_gid","","",65,null],[12,"st_rdev","","",65,null],[12,"st_size","","",65,null],[12,"st_blksize","","",65,null],[12,"st_blocks","","",65,null],[12,"st_atime","","",65,null],[12,"st_atime_nsec","","",65,null],[12,"st_mtime","","",65,null],[12,"st_mtime_nsec","","",65,null],[12,"st_ctime","","",65,null],[12,"st_ctime_nsec","","",65,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",66,null],[12,"exponent","","",66,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",67,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",68,null],[12,"swd","","",68,null],[12,"ftw","","",68,null],[12,"fop","","",68,null],[12,"rip","","",68,null],[12,"rdp","","",68,null],[12,"mxcsr","","",68,null],[12,"mxcr_mask","","",68,null],[12,"_st","","",68,null],[12,"_xmm","","",68,null],[3,"user_fpregs_struct","","",null,null],[12,"cwd","","",69,null],[12,"swd","","",69,null],[12,"ftw","","",69,null],[12,"fop","","",69,null],[12,"rip","","",69,null],[12,"rdp","","",69,null],[12,"mxcsr","","",69,null],[12,"mxcr_mask","","",69,null],[12,"st_space","","",69,null],[12,"xmm_space","","",69,null],[3,"user_regs_struct","","",null,null],[12,"r15","","",70,null],[12,"r14","","",70,null],[12,"r13","","",70,null],[12,"r12","","",70,null],[12,"rbp","","",70,null],[12,"rbx","","",70,null],[12,"r11","","",70,null],[12,"r10","","",70,null],[12,"r9","","",70,null],[12,"r8","","",70,null],[12,"rax","","",70,null],[12,"rcx","","",70,null],[12,"rdx","","",70,null],[12,"rsi","","",70,null],[12,"rdi","","",70,null],[12,"orig_rax","","",70,null],[12,"rip","","",70,null],[12,"cs","","",70,null],[12,"eflags","","",70,null],[12,"rsp","","",70,null],[12,"ss","","",70,null],[12,"fs_base","","",70,null],[12,"gs_base","","",70,null],[12,"ds","","",70,null],[12,"es","","",70,null],[12,"fs","","",70,null],[12,"gs","","",70,null],[3,"user","","",null,null],[12,"regs","","",71,null],[12,"u_fpvalid","","",71,null],[12,"i387","","",71,null],[12,"u_tsize","","",71,null],[12,"u_dsize","","",71,null],[12,"u_ssize","","",71,null],[12,"start_code","","",71,null],[12,"start_stack","","",71,null],[12,"signal","","",71,null],[12,"u_ar0","","",71,null],[12,"u_fpstate","","",71,null],[12,"magic","","",71,null],[12,"u_comm","","",71,null],[12,"u_debugreg","","",71,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",72,null],[12,"fpregs","","",72,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",73,null],[12,"uc_link","","",73,null],[12,"uc_stack","","",73,null],[12,"uc_mcontext","","",73,null],[12,"uc_sigmask","","",73,null],[3,"ipc_perm","","",null,null],[12,"__key","","",74,null],[12,"uid","","",74,null],[12,"gid","","",74,null],[12,"cuid","","",74,null],[12,"cgid","","",74,null],[12,"mode","","",74,null],[12,"__seq","","",74,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",75,null],[12,"shm_segsz","","",75,null],[12,"shm_atime","","",75,null],[12,"shm_dtime","","",75,null],[12,"shm_ctime","","",75,null],[12,"shm_cpid","","",75,null],[12,"shm_lpid","","",75,null],[12,"shm_nattch","","",75,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"major","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"minor","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"makedev","","",null,{"inputs":[{"name":"c_uint"},{"name":"c_uint"}],"output":{"name":"dev_t"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getgrnam","","",null,null],[5,"getgrgid","","",null,null],[5,"endpwent","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"faccessat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"seteuid","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"times","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_atfork","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"gmtime","","",null,null],[5,"localtime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_open","","",null,null],[5,"sem_close","","",null,null],[5,"sem_unlink","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"sigpending","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"clock_settime","","",null,null],[5,"dirfd","","",null,null],[5,"settimeofday","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"initgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"sched_setparam","","",null,null],[5,"sched_getparam","","",null,null],[5,"sched_rr_get_interval","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"openat64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"readdir64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"truncate64","","",null,null],[5,"eventfd","","",null,null],[5,"sysinfo","","",null,null],[5,"fdopendir","","",null,null],[5,"mknodat","","",null,null],[5,"ppoll","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"pthread_getschedparam","","",null,null],[5,"pthread_setschedparam","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"unshare","","",null,null],[5,"setns","","",null,null],[5,"sem_timedwait","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"sigsuspend","","",null,null],[5,"setreuid","","",null,null],[5,"setregid","","",null,null],[5,"getresuid","","",null,null],[5,"getresgid","","",null,null],[5,"personality","","",null,null],[5,"swapon","","",null,null],[5,"swapoff","","",null,null],[5,"acct","","",null,null],[5,"brk","","",null,null],[5,"sbrk","","",null,null],[5,"vfork","","",null,null],[5,"wait4","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"semget","","",null,null],[5,"semop","","",null,null],[5,"semctl","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"sethostname","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"pthread_setschedprio","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"mremap","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"getdomainname","","",null,null],[5,"setdomainname","","",null,null],[5,"vhangup","","",null,null],[5,"sendmmsg","","",null,null],[5,"recvmmsg","","",null,null],[5,"sync","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[5,"iopl","","",null,null],[5,"ioperm","","",null,null],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"stat64"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpxreg"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"_libc_xmmreg"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpstate"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"user_fpregs_struct"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"user_regs_struct"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"user"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"sigset_t"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"sysinfo"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"msqid_ds"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"aiocb"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"__exit_status"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"__timeval"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"utmpx"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"sigaction"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"stack_t"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"glob64_t"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"ucred"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"statfs"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"sem_t"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"dirent"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"dirent64"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"rlimit64"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"glob_t"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"pthread_condattr_t"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"passwd"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"spwd"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"fsid_t"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"mq_attr"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"if_nameindex"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"msginfo"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"mmsghdr"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"sembuf"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"fd_set"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"sched_param"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"dl_info"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"epoll_event"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"lconv"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rlimit"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rusage"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"hostent"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iovec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sigval"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"itimerval"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"tms"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"__priority_which_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_CREDENTIALS","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"IUTF8","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_NO_AUTOMOUNT","","",null,null],[17,"AT_EMPTY_PATH","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"UTIME_OMIT","","",null,null],[17,"UTIME_NOW","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"AF_IB","","",null,null],[17,"AF_MPLS","","",null,null],[17,"AF_NFC","","",null,null],[17,"AF_VSOCK","","",null,null],[17,"PF_IB","","",null,null],[17,"PF_MPLS","","",null,null],[17,"PF_NFC","","",null,null],[17,"PF_VSOCK","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"ITIMER_REAL","","",null,null],[17,"ITIMER_VIRTUAL","","",null,null],[17,"ITIMER_PROF","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"ENOATTR","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOL_RXRPC","","",null,null],[17,"SOL_PPPOL2TP","","",null,null],[17,"SOL_BLUETOOTH","","",null,null],[17,"SOL_PNPIPE","","",null,null],[17,"SOL_RDS","","",null,null],[17,"SOL_IUCV","","",null,null],[17,"SOL_CAIF","","",null,null],[17,"SOL_ALG","","",null,null],[17,"SOL_NFC","","",null,null],[17,"MSG_TRYHARD","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"MINSIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"B57600","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"B460800","","",null,null],[17,"B500000","","",null,null],[17,"B576000","","",null,null],[17,"B921600","","",null,null],[17,"B1000000","","",null,null],[17,"B1152000","","",null,null],[17,"B1500000","","",null,null],[17,"B2000000","","",null,null],[17,"B2500000","","",null,null],[17,"B3000000","","",null,null],[17,"B3500000","","",null,null],[17,"B4000000","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"spwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"sembuf"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_fpregs_struct"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The \"payload\" of a log message. This structure is primarily used as a parameter in the [`log`] method of the [`Log`] trait.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level filter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has already been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework.",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging framework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"self"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"self"},{"name":"loglocation"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["matches"] = {"doc":"","items":[[14,"matches","matches","Check if an expression matches a refutable pattern.",null,null],[14,"assert_matches","","Assert that an expression matches a refutable pattern.",null,null],[14,"debug_assert_matches","","Assert that an expression matches a refutable pattern using debug assertions.",null,null]],"paths":[]};
searchIndex["mime"] = {"doc":"Mime","items":[[3,"Mime","mime","Mime, or Media Type. Encapsulates common registers types.",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[12,"2","","",0,null],[4,"TopLevel","","",null,null],[13,"Star","","",1,null],[13,"Text","","",1,null],[13,"Image","","",1,null],[13,"Audio","","",1,null],[13,"Video","","",1,null],[13,"Application","","",1,null],[13,"Multipart","","",1,null],[13,"Message","","",1,null],[13,"Model","","",1,null],[13,"Ext","","",1,null],[4,"SubLevel","","",null,null],[13,"Star","","",2,null],[13,"Plain","","",2,null],[13,"Html","","",2,null],[13,"Xml","","",2,null],[13,"Javascript","","",2,null],[13,"Css","","",2,null],[13,"EventStream","","",2,null],[13,"Json","","",2,null],[13,"WwwFormUrlEncoded","","",2,null],[13,"Msgpack","","",2,null],[13,"OctetStream","","",2,null],[13,"FormData","","",2,null],[13,"Png","","",2,null],[13,"Gif","","",2,null],[13,"Bmp","","",2,null],[13,"Jpeg","","",2,null],[13,"Mpeg","","",2,null],[13,"Mp4","","",2,null],[13,"Ogg","","",2,null],[13,"Ext","","",2,null],[4,"Attr","","",null,null],[13,"Charset","","",3,null],[13,"Boundary","","",3,null],[13,"Q","","",3,null],[13,"Ext","","",3,null],[4,"Value","","",null,null],[13,"Utf8","","",4,null],[13,"Ext","","",4,null],[6,"Param","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"mime"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"toplevel"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"toplevel"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"toplevel"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"toplevel"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"toplevel"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"toplevel"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"toplevel"}],"output":{"name":"bool"}}],[11,"as_str","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"toplevel"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"sublevel"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"sublevel"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"sublevel"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"sublevel"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"sublevel"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"sublevel"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"sublevel"}],"output":{"name":"bool"}}],[11,"as_str","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"sublevel"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"attr"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"as_str","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"as_str","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_param","","",0,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"option"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[14,"mime","","Easily create a Mime without having to import so many enums.",null,null]],"paths":[[3,"Mime"],[4,"TopLevel"],[4,"SubLevel"],[4,"Attr"],[4,"Value"]]};
searchIndex["modifier"] = {"doc":"Overloadable modification through both owned and mutable references to a type with minimal code duplication.","items":[[8,"Modifier","modifier","Allows use of the implemented type as an argument to Set::set.",null,null],[10,"modify","","Modify `F` with self.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[8,"Set","","A trait providing the set and set_mut methods for all types.",null,null],[11,"set","","Modify self using the provided modifier.",1,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"self"}}],[11,"set_mut","","Modify self through a mutable reference with the provided modifier.",1,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"self"}}]],"paths":[[8,"Modifier"],[8,"Set"]]};
searchIndex["num_cpus"] = {"doc":"num_cpus","items":[[5,"get","num_cpus","Returns the number of available CPUs of the current system.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"get_physical","","Returns the number of physical cores of the current system.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",14,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and `Float::infinity()`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and `Float::neg_infinity()`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",14,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",14,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",14,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",14,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",15,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",18,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",20,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",20,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",null,null],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["percent_encoding"] = {"doc":"URLs use special chacters to indicate the parts of the request.  For example, a forward slash indicates a path.  In order for that charcter to exist outside of a path separator, that charcter would need to be encoded.","items":[[3,"SIMPLE_ENCODE_SET","percent_encoding","This encode set is used for the path of cannot-be-a-base URLs.",null,null],[3,"QUERY_ENCODE_SET","","This encode set is used in the URL parser for query strings.",null,null],[3,"DEFAULT_ENCODE_SET","","This encode set is used for path components.",null,null],[3,"PATH_SEGMENT_ENCODE_SET","","This encode set is used for on '/'-separated path segment",null,null],[3,"USERINFO_ENCODE_SET","","This encode set is used for username and password.",null,null],[3,"PercentEncode","","The return type of `percent_encode()` and `utf8_percent_encode()`.",null,null],[3,"PercentDecode","","The return type of `percent_decode()`.",null,null],[5,"percent_encode_byte","","Return the percent-encoding of the given bytes.",null,{"inputs":[{"name":"u8"}],"output":{"name":"str"}}],[5,"percent_encode","","Percent-encode the given bytes with the given encode set.",null,null],[5,"utf8_percent_encode","","Percent-encode the UTF-8 encoding of the given string.",null,{"inputs":[{"name":"str"},{"name":"e"}],"output":{"name":"percentencode"}}],[5,"percent_decode","","Percent-decode the given bytes.",null,null],[8,"EncodeSet","","Represents a set of characters / bytes that should be percent-encoded.",null,null],[10,"contains","","Called with UTF-8 bytes rather than code points. Should return true for all non-ASCII bytes.",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"simple_encode_set"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"query_encode_set"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"default_encode_set"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"path_segment_encode_set"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","",4,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"userinfo_encode_set"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","",5,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"percentencode"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"percentdecode"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"if_any","","If the percent-decoding is different from the input, return it as a new bytes vector.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"decode_utf8","","Decode the result of percent-decoding as UTF-8.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"decode_utf8_lossy","","Decode the result of percent-decoding as UTF-8, lossily.",7,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[14,"define_encode_set","","Define a new struct that implements the `EncodeSet` trait, for use in `percent_decode()` and related functions.",null,null]],"paths":[[8,"EncodeSet"],[3,"SIMPLE_ENCODE_SET"],[3,"QUERY_ENCODE_SET"],[3,"DEFAULT_ENCODE_SET"],[3,"PATH_SEGMENT_ENCODE_SET"],[3,"USERINFO_ENCODE_SET"],[3,"PercentEncode"],[3,"PercentDecode"]]};
searchIndex["persistent"] = {"doc":"A set of middleware for sharing data between requests in the Iron framework.","items":[[3,"State","persistent","Middleware for data that persists between requests with read and write capabilities.",null,null],[3,"Read","","Middleware for data that persists between Requests with read-only capabilities.",null,null],[3,"Write","","Middleware for data that persists between Requests for data which mostly needs to be written instead of read.",null,null],[4,"PersistentError","","The type that can be returned by `eval` to indicate error.",null,null],[13,"NotFound","","The value was not found.",0,null],[8,"PersistentInto","","Helper trait for overloading the constructors of `Read`/`Write`/`State`. This is an implementation detail, and should not be used for any other purpose.",null,null],[10,"persistent_into","","Convert `self` into a value of type `T`.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"persistenterror"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"read"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"write"}}],[11,"eval","","",3,{"inputs":[{"name":"request"}],"output":{"name":"result"}}],[11,"eval","","",2,{"inputs":[{"name":"request"}],"output":{"name":"result"}}],[11,"eval","","",4,{"inputs":[{"name":"request"}],"output":{"name":"result"}}],[11,"before","","",3,{"inputs":[{"name":"self"},{"name":"request"}],"output":{"name":"ironresult"}}],[11,"before","","",2,{"inputs":[{"name":"self"},{"name":"request"}],"output":{"name":"ironresult"}}],[11,"before","","",4,{"inputs":[{"name":"self"},{"name":"request"}],"output":{"name":"ironresult"}}],[11,"after","","",3,{"inputs":[{"name":"self"},{"name":"request"},{"name":"response"}],"output":{"name":"ironresult"}}],[11,"after","","",2,{"inputs":[{"name":"self"},{"name":"request"},{"name":"response"}],"output":{"name":"ironresult"}}],[11,"after","","",4,{"inputs":[{"name":"self"},{"name":"request"},{"name":"response"}],"output":{"name":"ironresult"}}],[11,"both","","Construct a new pair of `State` that can be passed directly to `Chain::link`.",3,null],[11,"one","","Construct a new `State` that can be passed directly to `Chain::link_before` or `Chain::link_after`.",3,{"inputs":[{"name":"t"}],"output":{"name":"state"}}],[11,"both","","Construct a new pair of `Read` that can be passed directly to `Chain::link`.",2,null],[11,"one","","Construct a new `Read` that can be passed directly to `Chain::link_before` or `Chain::link_after`.",2,{"inputs":[{"name":"t"}],"output":{"name":"read"}}],[11,"both","","Construct a new pair of `Write` that can be passed directly to `Chain::link`.",4,null],[11,"one","","Construct a new `Write` that can be passed directly to `Chain::link_before` or `Chain::link_after`.",4,{"inputs":[{"name":"t"}],"output":{"name":"write"}}]],"paths":[[4,"PersistentError"],[8,"PersistentInto"],[3,"Read"],[3,"State"],[3,"Write"]]};
searchIndex["plugin"] = {"doc":"Lazily-Evaluated, Order-Independent Plugins for Extensible Types.","items":[[8,"Plugin","plugin","Implementers of this trait can act as plugins for other types, via `OtherType::get<P>()`.",null,null],[16,"Error","","The error type associated with this plugin.",0,null],[10,"eval","","Create the plugin from an instance of the extended type.",0,{"inputs":[{"name":"e"}],"output":{"name":"result"}}],[8,"Extensible","","Defines an interface that extensible types must implement.",null,null],[10,"extensions","","Get a reference to the type's extension storage.",1,{"inputs":[{"name":"self"}],"output":{"name":"typemap"}}],[10,"extensions_mut","","Get a mutable reference to the type's extension storage.",1,{"inputs":[{"name":"self"}],"output":{"name":"typemap"}}],[8,"Pluggable","","An interface for plugins that cache values between calls.",null,null],[11,"get","","Return a copy of the plugin's produced value.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get_ref","","Return a reference to the plugin's produced value.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get_mut","","Return a mutable reference to the plugin's produced value.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"compute","","Create and evaluate a once-off instance of a plugin.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}]],"paths":[[8,"Plugin"],[8,"Extensible"],[8,"Pluggable"]]};
searchIndex["quote"] = {"doc":"Quasi-quoting without a Syntex dependency, intended for use with Macros 1.1.","items":[[3,"Tokens","quote","Tokens produced by a `quote!(...)` invocation.",null,null],[3,"ByteStr","","Wrap a `&str` so it interpolates as a byte-string: `b\"abc\"`.",null,null],[12,"0","","",0,null],[3,"Hex","","Wrap an integer so it interpolates as a hexadecimal.",null,null],[12,"0","","",1,null],[3,"Ident","","An identifier that should be interpolated without quotes.",null,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"new","","Empty tokens.",2,{"inputs":[],"output":{"name":"self"}}],[11,"append","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"append_all","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"append_separated","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":null}],[11,"append_terminated","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":null}],[11,"as_str","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_string","","",2,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"parse","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"hash","","",3,null],[11,"new","","",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[8,"ToTokens","","Types that can be interpolated inside a `quote!(...)` invocation.",null,null],[10,"to_tokens","","Write `self` to the given `Tokens`.",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[14,"quote","","The whole point.",null,null]],"paths":[[3,"ByteStr"],[3,"Hex"],[3,"Tokens"],[3,"Ident"],[8,"ToTokens"]]};
searchIndex["r2d2"] = {"doc":"A generic connection pool.","items":[[3,"Config","r2d2","A struct specifying the runtime configuration of a pool.",null,null],[3,"NopErrorHandler","","A `HandleError` implementation which does nothing.",null,null],[3,"LoggingErrorHandler","","A `HandleError` implementation which logs at the error level.",null,null],[3,"NopConnectionCustomizer","","A `CustomizeConnection` which does nothing.",null,null],[3,"Pool","","A generic connection pool.",null,null],[3,"InitializationError","","An error returned by `Pool::new` if it fails to initialize connections.",null,null],[3,"GetTimeout","","An error returned by `Pool::get` if it times out without retrieving a connection.",null,null],[3,"State","","Information about the state of a `Pool`.",null,null],[12,"connections","","The number of connections currently being managed by the pool.",0,null],[12,"idle_connections","","The number of idle connections.",0,null],[3,"PooledConnection","","A smart pointer wrapping a connection.",null,null],[0,"config","","Pool configuration.",null,null],[3,"Builder","r2d2::config","A builder for `Config`.",null,null],[3,"Config","","A struct specifying the runtime configuration of a pool.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `Builder`.",1,{"inputs":[],"output":{"name":"builder"}}],[11,"pool_size","","Sets `pool_size`.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"builder"}}],[11,"min_idle","","Sets `min_idle`.",1,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"builder"}}],[11,"helper_threads","","Sets `helper_threads`.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"builder"}}],[11,"test_on_check_out","","Sets `test_on_check_out`.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"builder"}}],[11,"initialization_fail_fast","","Sets `initialization_fail_fast`.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"builder"}}],[11,"max_lifetime","","Sets `max_lifetime`.",1,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"builder"}}],[11,"idle_timeout","","Sets `idle_timeout`.",1,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"builder"}}],[11,"connection_timeout","","Sets `connection_timeout` to the specified duration.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"builder"}}],[11,"error_handler","","Sets the `error_handler`.",1,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"builder"}}],[11,"connection_customizer","","Sets the `connection_customizer`.",1,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"builder"}}],[11,"build","","Consumes the `Builder`, turning it into a `Config`.",1,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"config"}}],[11,"builder","","Creates a new `Builder` which can be used to construct a customized `Config`.",2,{"inputs":[],"output":{"name":"builder"}}],[11,"pool_size","","The maximum number of connections managed by the pool.",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"min_idle","","If set, the pool will try to maintain at least this many idle connections at all times, while respecting the value of `pool_size`.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"helper_threads","","The number of threads that the pool will use for asynchronous operations such as connection creation and health checks.",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"test_on_check_out","","If true, the health of a connection will be verified via a call to `ConnectionManager::is_valid` before it is checked out of the pool.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"initialization_fail_fast","","If true, `Pool::new` will synchronously initialize its connections, returning an error if they could not be created.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"idle_timeout","","If set, connections will be closed after sitting idle for at most 30 seconds beyond this duration.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max_lifetime","","If set, connections will be closed after existing for at most 30 seconds beyond this duration. If a connection reaches its maximum lifetime while checked out it will be closed when it is returned to the pool.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"connection_timeout","","Calls to `Pool::get` will wait this long for a connection to become available before returning an error.",2,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"error_handler","","The handler for error reported in the pool.",2,{"inputs":[{"name":"self"}],"output":{"name":"handleerror"}}],[11,"connection_customizer","","The connection customizer used by the pool.",2,{"inputs":[{"name":"self"}],"output":{"name":"customizeconnection"}}],[8,"ManageConnection","r2d2","A trait which provides connection-specific functionality.",null,null],[16,"Connection","","The connection type this manager deals with.",3,null],[16,"Error","","The error type returned by `Connection`s.",3,null],[10,"connect","","Attempts to create a new connection.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"is_valid","","Determines if the connection is still connected to the database.",3,null],[10,"has_broken","","Quickly determines if the connection is no longer usable.",3,null],[8,"HandleError","","A trait which handles errors reported by the `ManageConnection`.",null,null],[10,"handle_error","","Handles an error.",4,{"inputs":[{"name":"self"},{"name":"e"}],"output":null}],[8,"CustomizeConnection","","A trait which allows for customization of connections.",null,null],[11,"on_acquire","","Called with connections immediately after they are returned from `ManageConnection::connect`.",5,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"noperrorhandler"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"handle_error","","",6,{"inputs":[{"name":"self"},{"name":"e"}],"output":null}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"loggingerrorhandler"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"handle_error","","",7,{"inputs":[{"name":"self"},{"name":"e"}],"output":null}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"nopconnectioncustomizer"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"pool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new connection pool.",9,{"inputs":[{"name":"config"},{"name":"m"}],"output":{"name":"result"}}],[11,"state","","Returns information about the current state of the pool.",9,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"config","","Returns the pool's configuration.",9,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"get","","Retrieves a connection from the pool.",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",12,null],[11,"deref_mut","","",12,null]],"paths":[[3,"State"],[3,"Builder"],[3,"Config"],[8,"ManageConnection"],[8,"HandleError"],[8,"CustomizeConnection"],[3,"NopErrorHandler"],[3,"LoggingErrorHandler"],[3,"NopConnectionCustomizer"],[3,"Pool"],[3,"InitializationError"],[3,"GetTimeout"],[3,"PooledConnection"]]};
searchIndex["r2d2_redis"] = {"doc":"Redis support for the `r2d2` connection pool.","items":[[3,"RedisConnectionManager","r2d2_redis","An `r2d2::ConnectionManager` for `redis::Client`s.",null,null],[4,"Error","","A unified enum of errors returned by redis::Client",null,null],[13,"Other","","A redis::RedisError",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `RedisConnectionManager`.",1,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"connect","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"is_valid","","",1,{"inputs":[{"name":"self"},{"name":"connection"}],"output":{"name":"result"}}],[11,"has_broken","","",1,{"inputs":[{"name":"self"},{"name":"connection"}],"output":{"name":"bool"}}]],"paths":[[4,"Error"],[3,"RedisConnectionManager"]]};
searchIndex["redis"] = {"doc":"redis-rs is a rust implementation of a Redis client library.  It exposes a general purpose interface to Redis and also provides specific helpers for commonly used functionality.","items":[[3,"Parser","redis","The internal redis response parser.",null,null],[3,"Client","","The client type.",null,null],[3,"Script","","Represents a lua script.",null,null],[3,"ScriptInvocation","","Represents a prepared script call.",null,null],[3,"Connection","","Represents a stateful redis TCP connection.",null,null],[3,"ConnectionInfo","","Holds the connection information that redis should use for connecting.",null,null],[12,"addr","","A boxed connection address for where to connect to.",0,null],[12,"db","","The database number to use.  This is usually `0`.",0,null],[12,"passwd","","Optionally a password that should be used for connection.",0,null],[3,"PubSub","","Represents a pubsub connection.",null,null],[3,"Msg","","Represents a pubsub message.",null,null],[3,"Cmd","","Represents redis commands.",null,null],[3,"Pipeline","","Represents a redis command pipeline.",null,null],[3,"Iter","","Represents a redis iterator.",null,null],[4,"ConnectionAddr","","Defines the connection address.",null,null],[13,"Tcp","","Format for this is `(host, port)`.",1,null],[13,"Unix","","Format for this is the path to the unix socket.",1,null],[5,"parse_redis_value","","Parses bytes into a redis value.",null,null],[5,"transaction","","This function simplifies transaction management slightly.  What it does is automatically watching keys and then going into a transaction loop util it succeeds.  Once it goes through the results are returned.",null,null],[5,"parse_redis_url","","This function takes a redis URL string and parses it into a URL as used by rust-url.  This is necessary as the default parser does not understand how redis URLs function.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"cmd","","Shortcut function to creating a command with a single argument.",null,{"inputs":[{"name":"str"}],"output":{"name":"cmd"}}],[5,"pipe","","Shortcut for creating a new pipeline.",null,{"inputs":[],"output":{"name":"pipeline"}}],[5,"pack_command","","Packs a bunch of commands into a request.  This is generally a quite useless function as this functionality is nicely wrapped through the `Cmd` object, but in some cases it can be useful.  The return value of this can then be send to the low level `ConnectionLike` methods.",null,null],[11,"new","","Creates a new parser that parses the data behind the reader.  More than one value can be behind the reader in which case the parser can be invoked multiple times.  In other words: the stream does not have to be terminated.",2,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"parse_value","","parses a single value out of the stream.  If there are multiple values you can call this multiple times.  If the reader is not yet ready this will block.",2,{"inputs":[{"name":"self"}],"output":{"name":"redisresult"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"client"}}],[11,"open","","Connects to a redis server and returns a client.  This does not actually open a connection yet but it does perform some basic checks on the URL that might make the operation fail.",3,{"inputs":[{"name":"t"}],"output":{"name":"redisresult"}}],[11,"get_connection","","Instructs the client to actually connect to redis and returns a connection object.  The connection object can be used to send commands to the server.  This can fail with a variety of errors (like unreachable host) so it's important that you handle those errors.",3,{"inputs":[{"name":"self"}],"output":{"name":"redisresult"}}],[11,"get_pubsub","","Returns a PubSub connection.  A pubsub connection can be used to listen to messages coming in through the redis publish/subscribe system.",3,{"inputs":[{"name":"self"}],"output":{"name":"redisresult"}}],[11,"req_packed_command","","",3,null],[11,"req_packed_commands","","",3,null],[11,"get_db","","",3,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"connectionaddr"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"connectionaddr"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"connectionaddr"}],"output":{"name":"bool"}}],[11,"is_supported","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"connectioninfo"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_connection_info","","",0,{"inputs":[{"name":"self"}],"output":{"name":"redisresult"}}],[11,"send_packed_command","","Sends an already encoded (packed) command into the TCP socket and does not read a response.  This is useful for commands like `MONITOR` which yield multiple items.  This needs to be used with care because it changes the state of the connection.",4,null],[11,"recv_response","","Fetches a single response from the connection.  This is useful if used in combination with `send_packed_command`.",4,{"inputs":[{"name":"self"}],"output":{"name":"redisresult"}}],[11,"set_write_timeout","","Sets the write timeout for the connection.",4,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"redisresult"}}],[11,"set_read_timeout","","Sets the read timeout for the connection.",4,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"redisresult"}}],[11,"req_packed_command","","",4,null],[11,"req_packed_commands","","",4,null],[11,"get_db","","",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"subscribe","","Subscribes to a new channel.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"redisresult"}}],[11,"psubscribe","","Subscribes to a new channel with a pattern.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"redisresult"}}],[11,"unsubscribe","","Unsubscribes from a channel.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"redisresult"}}],[11,"punsubscribe","","Unsubscribes from a channel with a pattern.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"redisresult"}}],[11,"get_message","","Fetches the next message from the pubsub connection.  Blocks until a message becomes available.  This currently does not provide a wait not to block :(",5,{"inputs":[{"name":"self"}],"output":{"name":"redisresult"}}],[11,"set_read_timeout","","Sets the read timeout for the connection.",5,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"redisresult"}}],[11,"get_channel","","Returns the channel this message came on.",6,{"inputs":[{"name":"self"}],"output":{"name":"redisresult"}}],[11,"get_channel_name","","Convenience method to get a string version of the channel.  Unless your channel contains non utf-8 bytes you can always use this method.  If the channel is not a valid string (which really should not happen) then the return value is `\"?\"`.",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_payload","","Returns the message's payload in a specific format.",6,{"inputs":[{"name":"self"}],"output":{"name":"redisresult"}}],[11,"get_payload_bytes","","Returns the bytes that are the message's payload.  This can be used as an alternative to the `get_payload` function if you are interested in the raw bytes in it.",6,null],[11,"from_pattern","","Returns true if the message was constructed from a pattern subscription.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_pattern","","If the message was constructed from a message pattern this can be used to find out which one.  It's recommended to match against an `Option<String>` so that you do not need to use `from_pattern` to figure out if a pattern was set.",6,{"inputs":[{"name":"self"}],"output":{"name":"redisresult"}}],[11,"new","","Creates a new script object.",7,{"inputs":[{"name":"str"}],"output":{"name":"script"}}],[11,"get_hash","","Returns the script's SHA1 hash in hexadecimal format.",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"key","","Creates a script invocation object with a key filled in.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"scriptinvocation"}}],[11,"arg","","Creates a script invocation object with an argument filled in.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"scriptinvocation"}}],[11,"prepare_invoke","","Returns an empty script invocation object.  This is primarily useful for programmatically adding arguments and keys because the type will not change.  Normally you can use `arg` and `key` directly.",7,{"inputs":[{"name":"self"}],"output":{"name":"scriptinvocation"}}],[11,"invoke","","Invokes the script directly without arguments.",7,{"inputs":[{"name":"self"},{"name":"connectionlike"}],"output":{"name":"redisresult"}}],[11,"arg","","Adds a regular argument to the invocation.  This ends up as `ARGV[i]` in the script.",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"scriptinvocation"}}],[11,"key","","Adds a key argument to the invocation.  This ends up as `KEYS[i]` in the script.",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"scriptinvocation"}}],[11,"invoke","","Invokes the script and returns the result.",8,{"inputs":[{"name":"self"},{"name":"connectionlike"}],"output":{"name":"redisresult"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"cmd"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates a new empty command.",9,{"inputs":[],"output":{"name":"cmd"}}],[11,"arg","","Appends an argument to the command.  The argument passed must be a type that implements `ToRedisArgs`.  Most primitive types as well as vectors of primitive types implement it.",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"cmd"}}],[11,"cursor_arg","","Works similar to `arg` but adds a cursor argument.  This is always an integer and also flips the command implementation to support a different mode for the iterators where the iterator will ask for another batch of items when the local data is exhausted.",9,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"cmd"}}],[11,"get_packed_command","","Returns the packed command as a byte vector.",9,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"in_scan_mode","","Returns true if the command is in scan mode.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"query","","Sends the command as query to the connection and converts the result to the target redis value.  This is the general way how you can retrieve data.",9,{"inputs":[{"name":"self"},{"name":"connectionlike"}],"output":{"name":"redisresult"}}],[11,"iter","","Similar to `query()` but returns an iterator over the items of the bulk result or iterator.  In normal mode this is not in any way more efficient than just querying into a `Vec<T>` as it's internally implemented as buffering into a vector.  This however is useful when `cursor_arg` was used in which case the iterator will query for more items until the server side cursor is exhausted.",9,{"inputs":[{"name":"self"},{"name":"connectionlike"}],"output":{"name":"redisresult"}}],[11,"execute","","This is a shortcut to `query()` that does not return a value and will fail the task if the query fails because of an error.  This is mainly useful in examples and for simple commands like setting keys.",9,{"inputs":[{"name":"self"},{"name":"connectionlike"}],"output":null}],[11,"new","","Creates an empty pipeline.  For consistency with the `cmd` api a `pipe` function is provided as alias.",11,{"inputs":[],"output":{"name":"pipeline"}}],[11,"cmd","","Starts a new command.  Functions such as `arg` then become available to add more arguments to that command.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"pipeline"}}],[11,"add_command","","Adds a command to the pipeline.",11,{"inputs":[{"name":"self"},{"name":"cmd"}],"output":{"name":"pipeline"}}],[11,"arg","","Adds an argument to the last started command.  This works similar to the `arg` method of the `Cmd` object.",11,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"pipeline"}}],[11,"ignore","","Instructs the pipeline to ignore the return value of this command. It will still be ensured that it is not an error, but any successful result is just thrown away.  This makes result processing through tuples much easier because you do not need to handle all the items you do not care about.",11,{"inputs":[{"name":"self"}],"output":{"name":"pipeline"}}],[11,"atomic","","This enables atomic mode.  In atomic mode the whole pipeline is enclosed in `MULTI`/`EXEC`.  From the user's point of view nothing changes however.  This is easier than using `MULTI`/`EXEC` yourself as the format does not change.",11,{"inputs":[{"name":"self"}],"output":{"name":"pipeline"}}],[11,"query","","Executes the pipeline and fetches the return values.  Since most pipelines return different types it's recommended to use tuple matching to process the results:",11,{"inputs":[{"name":"self"},{"name":"connectionlike"}],"output":{"name":"redisresult"}}],[11,"execute","","This is a shortcut to `query()` that does not return a value and will fail the task if the query of the pipeline fails.",11,{"inputs":[{"name":"self"},{"name":"connectionlike"}],"output":null}],[11,"perform","","",11,{"inputs":[{"name":"self"},{"name":"cmd"}],"output":{"name":"pipeline"}}],[8,"ConnectionLike","","Implements the \"stateless\" part of the connection interface that is used by the different objects in redis-rs.  Primarily it obviously applies to `Connection` object but also some other objects implement the interface (for instance whole clients or certain redis results).",null,null],[10,"req_packed_command","","Sends an already encoded (packed) command into the TCP socket and reads the single response from it.",12,null],[10,"req_packed_commands","","Sends multiple already encoded (packed) command into the TCP socket and reads `count` responses from it.  This is used to implement pipelining.",12,null],[10,"get_db","","Returns the database this connection is bound to.  Note that this information might be unreliable because it's initially cached and also might be incorrect if the connection like object is not actually connected.",12,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[8,"IntoConnectionInfo","","Converts an object into a connection info struct.  This allows the constructor of the client to accept connection information in a range of different formats.",null,null],[10,"into_connection_info","","",13,{"inputs":[{"name":"self"}],"output":{"name":"redisresult"}}],[8,"Commands","","Implements common redis commands for connection like objects.  This allows you to send commands straight to a connection or client.  It is also implemented for redis results of clients which makes for very convenient access in some basic cases.",null,null],[11,"get","","Get the value of a key.  If key is a vec this becomes an `MGET`.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"keys","","Gets all keys matching pattern",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"set","","Set the string value of a key.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"set_multiple","","Sets multiple keys to their values.",14,null],[11,"set_ex","","Set the value and expiration of a key.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"set_nx","","Set the value of a key, only if the key does not exist",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"mset_nx","","Sets multiple keys to their values failing if at least one already exists.",14,null],[11,"getset","","Set the string value of a key and return its old value.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"del","","Delete one or more keys.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"exists","","Determine if a key exists.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"expire","","Set a key's time to live in seconds.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"expire_at","","Set the expiration for a key as a UNIX timestamp.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"pexpire","","Set a key's time to live in milliseconds.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"pexpire_at","","Set the expiration for a key as a UNIX timestamp in milliseconds.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"persist","","Remove the expiration from a key.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"rename","","Rename a key.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"rename_nx","","Rename a key, only if the new key does not exist.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"append","","Append a value to a key.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"incr","","Increment the numeric value of a key by the given amount.  This issues a `INCRBY` or `INCRBYFLOAT` depending on the type.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"setbit","","Sets or clears the bit at offset in the string value stored at key.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"},{"name":"bool"}],"output":{"name":"redisresult"}}],[11,"getbit","","Returns the bit value at offset in the string value stored at key.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"bitcount","","Count set bits in a string.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"bitcount_range","","Count set bits in a string in a range.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"bit_and","","Perform a bitwise AND between multiple keys (containing string values) and store the result in the destination key.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"bit_or","","Perform a bitwise OR between multiple keys (containing string values) and store the result in the destination key.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"bit_xor","","Perform a bitwise XOR between multiple keys (containing string values) and store the result in the destination key.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"bit_not","","Perform a bitwise NOT of the key (containing string values) and store the result in the destination key.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"strlen","","Get the length of the value stored in a key.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"hget","","Gets a single (or multiple) fields from a hash.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"f"}],"output":{"name":"redisresult"}}],[11,"hdel","","Deletes a single (or multiple) fields from a hash.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"f"}],"output":{"name":"redisresult"}}],[11,"hset","","Sets a single field in a hash.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"f"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"hset_nx","","Sets a single field in a hash if it does not exist.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"f"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"hset_multiple","","Sets a multiple fields in a hash.",14,null],[11,"hincr","","Increments a value.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"f"},{"name":"d"}],"output":{"name":"redisresult"}}],[11,"hexists","","Checks if a field in a hash exists.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"f"}],"output":{"name":"redisresult"}}],[11,"hkeys","","Gets all the keys in a hash.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"hvals","","Gets all the values in a hash.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"hgetall","","Gets all the fields and values in a hash.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"hlen","","Gets the length of a hash.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"blpop","","Remove and get the first element in a list, or block until one is available.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"brpop","","Remove and get the last element in a list, or block until one is available.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"brpoplpush","","Pop a value from a list, push it to another list and return it; or block until one is available.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"lindex","","Get an element from a list by its index.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"linsert_before","","Insert an element before another element in a list.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"p"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"linsert_after","","Insert an element after another element in a list.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"p"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"llen","","Returns the length of the list stored at key.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"lpop","","Removes and returns the first element of the list stored at key.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"lpush","","Insert all the specified values at the head of the list stored at key.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"lpush_exists","","Inserts a value at the head of the list stored at key, only if key already exists and holds a list.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"lrange","","Returns the specified elements of the list stored at key.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"lrem","","Removes the first count occurrences of elements equal to value from the list stored at key.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"isize"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"ltrim","","Trim an existing list so that it will contain only the specified range of elements specified.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"rpop","","Removes and returns the last element of the list stored at key.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"rpoplpush","","Pop a value from a list, push it to another list and return it.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"rpush","","Insert all the specified values at the tail of the list stored at key.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"rpush_exists","","Inserts value at the tail of the list stored at key, only if key already exists and holds a list.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"sadd","","Add one or more members to a set.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"scard","","Get the number of members in a set.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"sdiff","","Subtract multiple sets.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"sdiffstore","","Subtract multiple sets and store the resulting set in a key.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"sinter","","Intersect multiple sets.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"sdinterstore","","Intersect multiple sets and store the resulting set in a key.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"sismember","","Determine if a given value is a member of a set.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"smembers","","Get all the members in a set.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"smove","","Move a member from one set to another.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"spop","","Remove and return a random member from a set.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"srandmember","","Get one random member from a set.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"srandmember_multiple","","Get multiple random members from a set.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"srem","","Remove one or more members from a set.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"sunion","","Add multiple sets.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"sunionstore","","Add multiple sets and store the resulting set in a key.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"zadd","","Add one member to a sorted set, or update its score if it already exists.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"s"}],"output":{"name":"redisresult"}}],[11,"zadd_multiple","","Add multiple members to a sorted set, or update its score if it already exists.",14,null],[11,"zcard","","Get the number of members in a sorted set.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"zcount","","Count the members in a sorted set with scores within the given values.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"redisresult"}}],[11,"zincr","","Increments the member in a sorted set at key by delta. If the member does not exist, it is added with delta as its score.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"d"}],"output":{"name":"redisresult"}}],[11,"zinterstore","","Intersect multiple sorted sets and store the resulting sorted set in a new key using SUM as aggregation function.",14,null],[11,"zinterstore_min","","Intersect multiple sorted sets and store the resulting sorted set in a new key using MIN as aggregation function.",14,null],[11,"zinterstore_max","","Intersect multiple sorted sets and store the resulting sorted set in a new key using MAX as aggregation function.",14,null],[11,"zlexcount","","Count the number of members in a sorted set between a given lexicographical range.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"l"},{"name":"l"}],"output":{"name":"redisresult"}}],[11,"zrange","","Return a range of members in a sorted set, by index",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrange_withscores","","Return a range of members in a sorted set, by index with scores.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrangebylex","","Return a range of members in a sorted set, by lexicographical range.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"redisresult"}}],[11,"zrangebylex_limit","","Return a range of members in a sorted set, by lexicographical range with offset and limit.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"mm"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrevrangebylex","","Return a range of members in a sorted set, by lexicographical range.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"mm"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"zrevrangebylex_limit","","Return a range of members in a sorted set, by lexicographical range with offset and limit.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"mm"},{"name":"m"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrangebyscore","","Return a range of members in a sorted set, by score.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"redisresult"}}],[11,"zrangebyscore_withscores","","Return a range of members in a sorted set, by score with scores.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"redisresult"}}],[11,"zrangebyscore_limit","","Return a range of members in a sorted set, by score with limit.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"mm"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrangebyscore_limit_withscores","","Return a range of members in a sorted set, by score with limit with scores.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"mm"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrank","","Determine the index of a member in a sorted set.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"zrem","","Remove one or more members from a sorted set.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"zrembylex","","Remove all members in a sorted set between the given lexicographical range.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"redisresult"}}],[11,"zrembyrank","","Remove all members in a sorted set within the given indexes.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrembyscore","","Remove all members in a sorted set within the given scores.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"redisresult"}}],[11,"zrevrange","","Return a range of members in a sorted set, by index, with scores ordered from high to low.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrevrange_withscores","","Return a range of members in a sorted set, by index, with scores ordered from high to low.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrevrangebyscore","","Return a range of members in a sorted set, by score.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"mm"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"zrevrangebyscore_withscores","","Return a range of members in a sorted set, by score with scores.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"mm"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"zrevrangebyscore_limit","","Return a range of members in a sorted set, by score with limit.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"mm"},{"name":"m"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrevrangebyscore_limit_withscores","","Return a range of members in a sorted set, by score with limit with scores.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"mm"},{"name":"m"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrevrank","","Determine the index of a member in a sorted set, with scores ordered from high to low.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"zscore","","Get the score associated with the given member in a sorted set.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"zunionstore","","Unions multiple sorted sets and store the resulting sorted set in a new key using SUM as aggregation function.",14,null],[11,"zunionstore_min","","Unions multiple sorted sets and store the resulting sorted set in a new key using MIN as aggregation function.",14,null],[11,"zunionstore_max","","Unions multiple sorted sets and store the resulting sorted set in a new key using MAX as aggregation function.",14,null],[11,"pfadd","","Adds the specified elements to the specified HyperLogLog.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"e"}],"output":{"name":"redisresult"}}],[11,"pfcount","","Return the approximated cardinality of the set(s) observed by the HyperLogLog at key(s).",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"pfmerge","","Merge N different HyperLogLogs into a single one.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"publish","","Posts a message to the given channel.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"e"}],"output":{"name":"redisresult"}}],[11,"scan","","Incrementally iterate the keys space.",14,{"inputs":[{"name":"self"}],"output":{"name":"redisresult"}}],[11,"scan_match","","Incrementally iterate the keys space for keys matching a pattern.",14,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"redisresult"}}],[11,"hscan","","Incrementally iterate hash fields and associated values.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"hscan_match","","Incrementally iterate hash fields and associated values for field names matching a pattern.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"p"}],"output":{"name":"redisresult"}}],[11,"sscan","","Incrementally iterate set elements.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"sscan_match","","Incrementally iterate set elements for elements matching a pattern.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"p"}],"output":{"name":"redisresult"}}],[11,"zscan","","Incrementally iterate sorted set elements.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"zscan_match","","Incrementally iterate sorted set elements for elements matching a pattern.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"p"}],"output":{"name":"redisresult"}}],[8,"PipelineCommands","","Implements common redis commands for pipelines.  Unlike the regular commands trait, this returns the pipeline rather than a result directly.  Other than that it works the same however.",null,null],[11,"get","","Get the value of a key.  If key is a vec this becomes an `MGET`.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"keys","","Gets all keys matching pattern",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"set","","Set the string value of a key.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"set_multiple","","Sets multiple keys to their values.",15,null],[11,"set_ex","","Set the value and expiration of a key.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"},{"name":"usize"}],"output":{"name":"self"}}],[11,"set_nx","","Set the value of a key, only if the key does not exist",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"mset_nx","","Sets multiple keys to their values failing if at least one already exists.",15,null],[11,"getset","","Set the string value of a key and return its old value.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"del","","Delete one or more keys.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"exists","","Determine if a key exists.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"expire","","Set a key's time to live in seconds.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"}],"output":{"name":"self"}}],[11,"expire_at","","Set the expiration for a key as a UNIX timestamp.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"}],"output":{"name":"self"}}],[11,"pexpire","","Set a key's time to live in milliseconds.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"}],"output":{"name":"self"}}],[11,"pexpire_at","","Set the expiration for a key as a UNIX timestamp in milliseconds.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"}],"output":{"name":"self"}}],[11,"persist","","Remove the expiration from a key.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"rename","","Rename a key.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"rename_nx","","Rename a key, only if the new key does not exist.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"append","","Append a value to a key.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"incr","","Increment the numeric value of a key by the given amount.  This issues a `INCRBY` or `INCRBYFLOAT` depending on the type.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"setbit","","Sets or clears the bit at offset in the string value stored at key.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"},{"name":"bool"}],"output":{"name":"self"}}],[11,"getbit","","Returns the bit value at offset in the string value stored at key.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"}],"output":{"name":"self"}}],[11,"bitcount","","Count set bits in a string.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"bitcount_range","","Count set bits in a string in a range.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"bit_and","","Perform a bitwise AND between multiple keys (containing string values) and store the result in the destination key.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"bit_or","","Perform a bitwise OR between multiple keys (containing string values) and store the result in the destination key.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"bit_xor","","Perform a bitwise XOR between multiple keys (containing string values) and store the result in the destination key.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"bit_not","","Perform a bitwise NOT of the key (containing string values) and store the result in the destination key.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"strlen","","Get the length of the value stored in a key.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"hget","","Gets a single (or multiple) fields from a hash.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"f"}],"output":{"name":"self"}}],[11,"hdel","","Deletes a single (or multiple) fields from a hash.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"f"}],"output":{"name":"self"}}],[11,"hset","","Sets a single field in a hash.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"f"},{"name":"v"}],"output":{"name":"self"}}],[11,"hset_nx","","Sets a single field in a hash if it does not exist.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"f"},{"name":"v"}],"output":{"name":"self"}}],[11,"hset_multiple","","Sets a multiple fields in a hash.",15,null],[11,"hincr","","Increments a value.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"f"},{"name":"d"}],"output":{"name":"self"}}],[11,"hexists","","Checks if a field in a hash exists.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"f"}],"output":{"name":"self"}}],[11,"hkeys","","Gets all the keys in a hash.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"hvals","","Gets all the values in a hash.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"hgetall","","Gets all the fields and values in a hash.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"hlen","","Gets the length of a hash.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"blpop","","Remove and get the first element in a list, or block until one is available.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"}],"output":{"name":"self"}}],[11,"brpop","","Remove and get the last element in a list, or block until one is available.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"}],"output":{"name":"self"}}],[11,"brpoplpush","","Pop a value from a list, push it to another list and return it; or block until one is available.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"},{"name":"usize"}],"output":{"name":"self"}}],[11,"lindex","","Get an element from a list by its index.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"isize"}],"output":{"name":"self"}}],[11,"linsert_before","","Insert an element before another element in a list.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"p"},{"name":"v"}],"output":{"name":"self"}}],[11,"linsert_after","","Insert an element after another element in a list.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"p"},{"name":"v"}],"output":{"name":"self"}}],[11,"llen","","Returns the length of the list stored at key.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"lpop","","Removes and returns the first element of the list stored at key.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"lpush","","Insert all the specified values at the head of the list stored at key.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"lpush_exists","","Inserts a value at the head of the list stored at key, only if key already exists and holds a list.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"lrange","","Returns the specified elements of the list stored at key.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"lrem","","Removes the first count occurrences of elements equal to value from the list stored at key.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"isize"},{"name":"v"}],"output":{"name":"self"}}],[11,"ltrim","","Trim an existing list so that it will contain only the specified range of elements specified.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"rpop","","Removes and returns the last element of the list stored at key.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"rpoplpush","","Pop a value from a list, push it to another list and return it.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"rpush","","Insert all the specified values at the tail of the list stored at key.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"rpush_exists","","Inserts value at the tail of the list stored at key, only if key already exists and holds a list.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"sadd","","Add one or more members to a set.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"}],"output":{"name":"self"}}],[11,"scard","","Get the number of members in a set.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"sdiff","","Subtract multiple sets.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"sdiffstore","","Subtract multiple sets and store the resulting set in a key.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"sinter","","Intersect multiple sets.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"sdinterstore","","Intersect multiple sets and store the resulting set in a key.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"sismember","","Determine if a given value is a member of a set.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"}],"output":{"name":"self"}}],[11,"smembers","","Get all the members in a set.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"smove","","Move a member from one set to another.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"},{"name":"m"}],"output":{"name":"self"}}],[11,"spop","","Remove and return a random member from a set.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"srandmember","","Get one random member from a set.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"srandmember_multiple","","Get multiple random members from a set.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"}],"output":{"name":"self"}}],[11,"srem","","Remove one or more members from a set.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"}],"output":{"name":"self"}}],[11,"sunion","","Add multiple sets.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"sunionstore","","Add multiple sets and store the resulting set in a key.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"zadd","","Add one member to a sorted set, or update its score if it already exists.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"s"}],"output":{"name":"self"}}],[11,"zadd_multiple","","Add multiple members to a sorted set, or update its score if it already exists.",15,null],[11,"zcard","","Get the number of members in a sorted set.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"zcount","","Count the members in a sorted set with scores within the given values.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"self"}}],[11,"zincr","","Increments the member in a sorted set at key by delta. If the member does not exist, it is added with delta as its score.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"d"}],"output":{"name":"self"}}],[11,"zinterstore","","Intersect multiple sorted sets and store the resulting sorted set in a new key using SUM as aggregation function.",15,null],[11,"zinterstore_min","","Intersect multiple sorted sets and store the resulting sorted set in a new key using MIN as aggregation function.",15,null],[11,"zinterstore_max","","Intersect multiple sorted sets and store the resulting sorted set in a new key using MAX as aggregation function.",15,null],[11,"zlexcount","","Count the number of members in a sorted set between a given lexicographical range.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"l"},{"name":"l"}],"output":{"name":"self"}}],[11,"zrange","","Return a range of members in a sorted set, by index",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrange_withscores","","Return a range of members in a sorted set, by index with scores.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrangebylex","","Return a range of members in a sorted set, by lexicographical range.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"self"}}],[11,"zrangebylex_limit","","Return a range of members in a sorted set, by lexicographical range with offset and limit.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"mm"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrevrangebylex","","Return a range of members in a sorted set, by lexicographical range.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"mm"},{"name":"m"}],"output":{"name":"self"}}],[11,"zrevrangebylex_limit","","Return a range of members in a sorted set, by lexicographical range with offset and limit.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"mm"},{"name":"m"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrangebyscore","","Return a range of members in a sorted set, by score.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"self"}}],[11,"zrangebyscore_withscores","","Return a range of members in a sorted set, by score with scores.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"self"}}],[11,"zrangebyscore_limit","","Return a range of members in a sorted set, by score with limit.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"mm"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrangebyscore_limit_withscores","","Return a range of members in a sorted set, by score with limit with scores.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"mm"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrank","","Determine the index of a member in a sorted set.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"}],"output":{"name":"self"}}],[11,"zrem","","Remove one or more members from a sorted set.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"}],"output":{"name":"self"}}],[11,"zrembylex","","Remove all members in a sorted set between the given lexicographical range.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"self"}}],[11,"zrembyrank","","Remove all members in a sorted set within the given indexes.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrembyscore","","Remove all members in a sorted set within the given scores.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"self"}}],[11,"zrevrange","","Return a range of members in a sorted set, by index, with scores ordered from high to low.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrevrange_withscores","","Return a range of members in a sorted set, by index, with scores ordered from high to low.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrevrangebyscore","","Return a range of members in a sorted set, by score.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"mm"},{"name":"m"}],"output":{"name":"self"}}],[11,"zrevrangebyscore_withscores","","Return a range of members in a sorted set, by score with scores.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"mm"},{"name":"m"}],"output":{"name":"self"}}],[11,"zrevrangebyscore_limit","","Return a range of members in a sorted set, by score with limit.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"mm"},{"name":"m"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrevrangebyscore_limit_withscores","","Return a range of members in a sorted set, by score with limit with scores.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"mm"},{"name":"m"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrevrank","","Determine the index of a member in a sorted set, with scores ordered from high to low.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"}],"output":{"name":"self"}}],[11,"zscore","","Get the score associated with the given member in a sorted set.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"}],"output":{"name":"self"}}],[11,"zunionstore","","Unions multiple sorted sets and store the resulting sorted set in a new key using SUM as aggregation function.",15,null],[11,"zunionstore_min","","Unions multiple sorted sets and store the resulting sorted set in a new key using MIN as aggregation function.",15,null],[11,"zunionstore_max","","Unions multiple sorted sets and store the resulting sorted set in a new key using MAX as aggregation function.",15,null],[11,"pfadd","","Adds the specified elements to the specified HyperLogLog.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"e"}],"output":{"name":"self"}}],[11,"pfcount","","Return the approximated cardinality of the set(s) observed by the HyperLogLog at key(s).",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"pfmerge","","Merge N different HyperLogLogs into a single one.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"publish","","Posts a message to the given channel.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"e"}],"output":{"name":"self"}}],[11,"get","","Get the value of a key.  If key is a vec this becomes an `MGET`.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"keys","","Gets all keys matching pattern",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"set","","Set the string value of a key.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"set_multiple","","Sets multiple keys to their values.",14,null],[11,"set_ex","","Set the value and expiration of a key.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"set_nx","","Set the value of a key, only if the key does not exist",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"mset_nx","","Sets multiple keys to their values failing if at least one already exists.",14,null],[11,"getset","","Set the string value of a key and return its old value.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"del","","Delete one or more keys.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"exists","","Determine if a key exists.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"expire","","Set a key's time to live in seconds.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"expire_at","","Set the expiration for a key as a UNIX timestamp.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"pexpire","","Set a key's time to live in milliseconds.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"pexpire_at","","Set the expiration for a key as a UNIX timestamp in milliseconds.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"persist","","Remove the expiration from a key.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"rename","","Rename a key.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"rename_nx","","Rename a key, only if the new key does not exist.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"append","","Append a value to a key.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"incr","","Increment the numeric value of a key by the given amount.  This issues a `INCRBY` or `INCRBYFLOAT` depending on the type.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"setbit","","Sets or clears the bit at offset in the string value stored at key.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"},{"name":"bool"}],"output":{"name":"redisresult"}}],[11,"getbit","","Returns the bit value at offset in the string value stored at key.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"bitcount","","Count set bits in a string.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"bitcount_range","","Count set bits in a string in a range.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"bit_and","","Perform a bitwise AND between multiple keys (containing string values) and store the result in the destination key.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"bit_or","","Perform a bitwise OR between multiple keys (containing string values) and store the result in the destination key.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"bit_xor","","Perform a bitwise XOR between multiple keys (containing string values) and store the result in the destination key.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"bit_not","","Perform a bitwise NOT of the key (containing string values) and store the result in the destination key.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"strlen","","Get the length of the value stored in a key.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"hget","","Gets a single (or multiple) fields from a hash.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"f"}],"output":{"name":"redisresult"}}],[11,"hdel","","Deletes a single (or multiple) fields from a hash.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"f"}],"output":{"name":"redisresult"}}],[11,"hset","","Sets a single field in a hash.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"f"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"hset_nx","","Sets a single field in a hash if it does not exist.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"f"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"hset_multiple","","Sets a multiple fields in a hash.",14,null],[11,"hincr","","Increments a value.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"f"},{"name":"d"}],"output":{"name":"redisresult"}}],[11,"hexists","","Checks if a field in a hash exists.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"f"}],"output":{"name":"redisresult"}}],[11,"hkeys","","Gets all the keys in a hash.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"hvals","","Gets all the values in a hash.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"hgetall","","Gets all the fields and values in a hash.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"hlen","","Gets the length of a hash.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"blpop","","Remove and get the first element in a list, or block until one is available.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"brpop","","Remove and get the last element in a list, or block until one is available.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"brpoplpush","","Pop a value from a list, push it to another list and return it; or block until one is available.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"lindex","","Get an element from a list by its index.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"linsert_before","","Insert an element before another element in a list.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"p"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"linsert_after","","Insert an element after another element in a list.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"p"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"llen","","Returns the length of the list stored at key.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"lpop","","Removes and returns the first element of the list stored at key.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"lpush","","Insert all the specified values at the head of the list stored at key.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"lpush_exists","","Inserts a value at the head of the list stored at key, only if key already exists and holds a list.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"lrange","","Returns the specified elements of the list stored at key.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"lrem","","Removes the first count occurrences of elements equal to value from the list stored at key.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"isize"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"ltrim","","Trim an existing list so that it will contain only the specified range of elements specified.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"rpop","","Removes and returns the last element of the list stored at key.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"rpoplpush","","Pop a value from a list, push it to another list and return it.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"rpush","","Insert all the specified values at the tail of the list stored at key.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"rpush_exists","","Inserts value at the tail of the list stored at key, only if key already exists and holds a list.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"redisresult"}}],[11,"sadd","","Add one or more members to a set.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"scard","","Get the number of members in a set.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"sdiff","","Subtract multiple sets.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"sdiffstore","","Subtract multiple sets and store the resulting set in a key.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"sinter","","Intersect multiple sets.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"sdinterstore","","Intersect multiple sets and store the resulting set in a key.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"sismember","","Determine if a given value is a member of a set.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"smembers","","Get all the members in a set.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"smove","","Move a member from one set to another.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"spop","","Remove and return a random member from a set.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"srandmember","","Get one random member from a set.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"srandmember_multiple","","Get multiple random members from a set.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"}],"output":{"name":"redisresult"}}],[11,"srem","","Remove one or more members from a set.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"sunion","","Add multiple sets.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"sunionstore","","Add multiple sets and store the resulting set in a key.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"zadd","","Add one member to a sorted set, or update its score if it already exists.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"s"}],"output":{"name":"redisresult"}}],[11,"zadd_multiple","","Add multiple members to a sorted set, or update its score if it already exists.",14,null],[11,"zcard","","Get the number of members in a sorted set.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"zcount","","Count the members in a sorted set with scores within the given values.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"redisresult"}}],[11,"zincr","","Increments the member in a sorted set at key by delta. If the member does not exist, it is added with delta as its score.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"d"}],"output":{"name":"redisresult"}}],[11,"zinterstore","","Intersect multiple sorted sets and store the resulting sorted set in a new key using SUM as aggregation function.",14,null],[11,"zinterstore_min","","Intersect multiple sorted sets and store the resulting sorted set in a new key using MIN as aggregation function.",14,null],[11,"zinterstore_max","","Intersect multiple sorted sets and store the resulting sorted set in a new key using MAX as aggregation function.",14,null],[11,"zlexcount","","Count the number of members in a sorted set between a given lexicographical range.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"l"},{"name":"l"}],"output":{"name":"redisresult"}}],[11,"zrange","","Return a range of members in a sorted set, by index",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrange_withscores","","Return a range of members in a sorted set, by index with scores.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrangebylex","","Return a range of members in a sorted set, by lexicographical range.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"redisresult"}}],[11,"zrangebylex_limit","","Return a range of members in a sorted set, by lexicographical range with offset and limit.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"mm"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrevrangebylex","","Return a range of members in a sorted set, by lexicographical range.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"mm"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"zrevrangebylex_limit","","Return a range of members in a sorted set, by lexicographical range with offset and limit.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"mm"},{"name":"m"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrangebyscore","","Return a range of members in a sorted set, by score.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"redisresult"}}],[11,"zrangebyscore_withscores","","Return a range of members in a sorted set, by score with scores.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"redisresult"}}],[11,"zrangebyscore_limit","","Return a range of members in a sorted set, by score with limit.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"mm"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrangebyscore_limit_withscores","","Return a range of members in a sorted set, by score with limit with scores.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"mm"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrank","","Determine the index of a member in a sorted set.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"zrem","","Remove one or more members from a sorted set.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"zrembylex","","Remove all members in a sorted set between the given lexicographical range.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"redisresult"}}],[11,"zrembyrank","","Remove all members in a sorted set within the given indexes.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrembyscore","","Remove all members in a sorted set within the given scores.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"redisresult"}}],[11,"zrevrange","","Return a range of members in a sorted set, by index, with scores ordered from high to low.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrevrange_withscores","","Return a range of members in a sorted set, by index, with scores ordered from high to low.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrevrangebyscore","","Return a range of members in a sorted set, by score.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"mm"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"zrevrangebyscore_withscores","","Return a range of members in a sorted set, by score with scores.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"mm"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"zrevrangebyscore_limit","","Return a range of members in a sorted set, by score with limit.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"mm"},{"name":"m"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrevrangebyscore_limit_withscores","","Return a range of members in a sorted set, by score with limit with scores.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"mm"},{"name":"m"},{"name":"isize"},{"name":"isize"}],"output":{"name":"redisresult"}}],[11,"zrevrank","","Determine the index of a member in a sorted set, with scores ordered from high to low.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"zscore","","Get the score associated with the given member in a sorted set.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"}],"output":{"name":"redisresult"}}],[11,"zunionstore","","Unions multiple sorted sets and store the resulting sorted set in a new key using SUM as aggregation function.",14,null],[11,"zunionstore_min","","Unions multiple sorted sets and store the resulting sorted set in a new key using MIN as aggregation function.",14,null],[11,"zunionstore_max","","Unions multiple sorted sets and store the resulting sorted set in a new key using MAX as aggregation function.",14,null],[11,"pfadd","","Adds the specified elements to the specified HyperLogLog.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"e"}],"output":{"name":"redisresult"}}],[11,"pfcount","","Return the approximated cardinality of the set(s) observed by the HyperLogLog at key(s).",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"pfmerge","","Merge N different HyperLogLogs into a single one.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"publish","","Posts a message to the given channel.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"e"}],"output":{"name":"redisresult"}}],[11,"scan","","Incrementally iterate the keys space.",14,{"inputs":[{"name":"self"}],"output":{"name":"redisresult"}}],[11,"scan_match","","Incrementally iterate the keys space for keys matching a pattern.",14,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"redisresult"}}],[11,"hscan","","Incrementally iterate hash fields and associated values.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"hscan_match","","Incrementally iterate hash fields and associated values for field names matching a pattern.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"p"}],"output":{"name":"redisresult"}}],[11,"sscan","","Incrementally iterate set elements.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"sscan_match","","Incrementally iterate set elements for elements matching a pattern.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"p"}],"output":{"name":"redisresult"}}],[11,"zscan","","Incrementally iterate sorted set elements.",14,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"redisresult"}}],[11,"zscan_match","","Incrementally iterate sorted set elements for elements matching a pattern.",14,{"inputs":[{"name":"self"},{"name":"k"},{"name":"p"}],"output":{"name":"redisresult"}}],[11,"get","","Get the value of a key.  If key is a vec this becomes an `MGET`.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"keys","","Gets all keys matching pattern",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"set","","Set the string value of a key.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"set_multiple","","Sets multiple keys to their values.",15,null],[11,"set_ex","","Set the value and expiration of a key.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"},{"name":"usize"}],"output":{"name":"self"}}],[11,"set_nx","","Set the value of a key, only if the key does not exist",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"mset_nx","","Sets multiple keys to their values failing if at least one already exists.",15,null],[11,"getset","","Set the string value of a key and return its old value.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"del","","Delete one or more keys.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"exists","","Determine if a key exists.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"expire","","Set a key's time to live in seconds.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"}],"output":{"name":"self"}}],[11,"expire_at","","Set the expiration for a key as a UNIX timestamp.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"}],"output":{"name":"self"}}],[11,"pexpire","","Set a key's time to live in milliseconds.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"}],"output":{"name":"self"}}],[11,"pexpire_at","","Set the expiration for a key as a UNIX timestamp in milliseconds.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"}],"output":{"name":"self"}}],[11,"persist","","Remove the expiration from a key.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"rename","","Rename a key.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"rename_nx","","Rename a key, only if the new key does not exist.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"append","","Append a value to a key.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"incr","","Increment the numeric value of a key by the given amount.  This issues a `INCRBY` or `INCRBYFLOAT` depending on the type.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"setbit","","Sets or clears the bit at offset in the string value stored at key.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"},{"name":"bool"}],"output":{"name":"self"}}],[11,"getbit","","Returns the bit value at offset in the string value stored at key.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"}],"output":{"name":"self"}}],[11,"bitcount","","Count set bits in a string.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"bitcount_range","","Count set bits in a string in a range.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"bit_and","","Perform a bitwise AND between multiple keys (containing string values) and store the result in the destination key.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"bit_or","","Perform a bitwise OR between multiple keys (containing string values) and store the result in the destination key.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"bit_xor","","Perform a bitwise XOR between multiple keys (containing string values) and store the result in the destination key.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"bit_not","","Perform a bitwise NOT of the key (containing string values) and store the result in the destination key.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"strlen","","Get the length of the value stored in a key.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"hget","","Gets a single (or multiple) fields from a hash.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"f"}],"output":{"name":"self"}}],[11,"hdel","","Deletes a single (or multiple) fields from a hash.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"f"}],"output":{"name":"self"}}],[11,"hset","","Sets a single field in a hash.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"f"},{"name":"v"}],"output":{"name":"self"}}],[11,"hset_nx","","Sets a single field in a hash if it does not exist.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"f"},{"name":"v"}],"output":{"name":"self"}}],[11,"hset_multiple","","Sets a multiple fields in a hash.",15,null],[11,"hincr","","Increments a value.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"f"},{"name":"d"}],"output":{"name":"self"}}],[11,"hexists","","Checks if a field in a hash exists.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"f"}],"output":{"name":"self"}}],[11,"hkeys","","Gets all the keys in a hash.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"hvals","","Gets all the values in a hash.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"hgetall","","Gets all the fields and values in a hash.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"hlen","","Gets the length of a hash.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"blpop","","Remove and get the first element in a list, or block until one is available.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"}],"output":{"name":"self"}}],[11,"brpop","","Remove and get the last element in a list, or block until one is available.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"}],"output":{"name":"self"}}],[11,"brpoplpush","","Pop a value from a list, push it to another list and return it; or block until one is available.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"},{"name":"usize"}],"output":{"name":"self"}}],[11,"lindex","","Get an element from a list by its index.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"isize"}],"output":{"name":"self"}}],[11,"linsert_before","","Insert an element before another element in a list.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"p"},{"name":"v"}],"output":{"name":"self"}}],[11,"linsert_after","","Insert an element after another element in a list.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"p"},{"name":"v"}],"output":{"name":"self"}}],[11,"llen","","Returns the length of the list stored at key.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"lpop","","Removes and returns the first element of the list stored at key.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"lpush","","Insert all the specified values at the head of the list stored at key.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"lpush_exists","","Inserts a value at the head of the list stored at key, only if key already exists and holds a list.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"lrange","","Returns the specified elements of the list stored at key.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"lrem","","Removes the first count occurrences of elements equal to value from the list stored at key.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"isize"},{"name":"v"}],"output":{"name":"self"}}],[11,"ltrim","","Trim an existing list so that it will contain only the specified range of elements specified.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"rpop","","Removes and returns the last element of the list stored at key.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"rpoplpush","","Pop a value from a list, push it to another list and return it.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"rpush","","Insert all the specified values at the tail of the list stored at key.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"rpush_exists","","Inserts value at the tail of the list stored at key, only if key already exists and holds a list.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"self"}}],[11,"sadd","","Add one or more members to a set.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"}],"output":{"name":"self"}}],[11,"scard","","Get the number of members in a set.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"sdiff","","Subtract multiple sets.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"sdiffstore","","Subtract multiple sets and store the resulting set in a key.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"sinter","","Intersect multiple sets.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"sdinterstore","","Intersect multiple sets and store the resulting set in a key.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"sismember","","Determine if a given value is a member of a set.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"}],"output":{"name":"self"}}],[11,"smembers","","Get all the members in a set.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"smove","","Move a member from one set to another.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"},{"name":"m"}],"output":{"name":"self"}}],[11,"spop","","Remove and return a random member from a set.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"srandmember","","Get one random member from a set.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"srandmember_multiple","","Get multiple random members from a set.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"usize"}],"output":{"name":"self"}}],[11,"srem","","Remove one or more members from a set.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"}],"output":{"name":"self"}}],[11,"sunion","","Add multiple sets.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"sunionstore","","Add multiple sets and store the resulting set in a key.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"zadd","","Add one member to a sorted set, or update its score if it already exists.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"s"}],"output":{"name":"self"}}],[11,"zadd_multiple","","Add multiple members to a sorted set, or update its score if it already exists.",15,null],[11,"zcard","","Get the number of members in a sorted set.",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"zcount","","Count the members in a sorted set with scores within the given values.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"self"}}],[11,"zincr","","Increments the member in a sorted set at key by delta. If the member does not exist, it is added with delta as its score.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"d"}],"output":{"name":"self"}}],[11,"zinterstore","","Intersect multiple sorted sets and store the resulting sorted set in a new key using SUM as aggregation function.",15,null],[11,"zinterstore_min","","Intersect multiple sorted sets and store the resulting sorted set in a new key using MIN as aggregation function.",15,null],[11,"zinterstore_max","","Intersect multiple sorted sets and store the resulting sorted set in a new key using MAX as aggregation function.",15,null],[11,"zlexcount","","Count the number of members in a sorted set between a given lexicographical range.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"l"},{"name":"l"}],"output":{"name":"self"}}],[11,"zrange","","Return a range of members in a sorted set, by index",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrange_withscores","","Return a range of members in a sorted set, by index with scores.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrangebylex","","Return a range of members in a sorted set, by lexicographical range.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"self"}}],[11,"zrangebylex_limit","","Return a range of members in a sorted set, by lexicographical range with offset and limit.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"mm"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrevrangebylex","","Return a range of members in a sorted set, by lexicographical range.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"mm"},{"name":"m"}],"output":{"name":"self"}}],[11,"zrevrangebylex_limit","","Return a range of members in a sorted set, by lexicographical range with offset and limit.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"mm"},{"name":"m"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrangebyscore","","Return a range of members in a sorted set, by score.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"self"}}],[11,"zrangebyscore_withscores","","Return a range of members in a sorted set, by score with scores.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"self"}}],[11,"zrangebyscore_limit","","Return a range of members in a sorted set, by score with limit.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"mm"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrangebyscore_limit_withscores","","Return a range of members in a sorted set, by score with limit with scores.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"mm"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrank","","Determine the index of a member in a sorted set.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"}],"output":{"name":"self"}}],[11,"zrem","","Remove one or more members from a sorted set.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"}],"output":{"name":"self"}}],[11,"zrembylex","","Remove all members in a sorted set between the given lexicographical range.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"self"}}],[11,"zrembyrank","","Remove all members in a sorted set within the given indexes.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrembyscore","","Remove all members in a sorted set within the given scores.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"},{"name":"mm"}],"output":{"name":"self"}}],[11,"zrevrange","","Return a range of members in a sorted set, by index, with scores ordered from high to low.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrevrange_withscores","","Return a range of members in a sorted set, by index, with scores ordered from high to low.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrevrangebyscore","","Return a range of members in a sorted set, by score.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"mm"},{"name":"m"}],"output":{"name":"self"}}],[11,"zrevrangebyscore_withscores","","Return a range of members in a sorted set, by score with scores.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"mm"},{"name":"m"}],"output":{"name":"self"}}],[11,"zrevrangebyscore_limit","","Return a range of members in a sorted set, by score with limit.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"mm"},{"name":"m"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrevrangebyscore_limit_withscores","","Return a range of members in a sorted set, by score with limit with scores.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"mm"},{"name":"m"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"zrevrank","","Determine the index of a member in a sorted set, with scores ordered from high to low.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"}],"output":{"name":"self"}}],[11,"zscore","","Get the score associated with the given member in a sorted set.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"m"}],"output":{"name":"self"}}],[11,"zunionstore","","Unions multiple sorted sets and store the resulting sorted set in a new key using SUM as aggregation function.",15,null],[11,"zunionstore_min","","Unions multiple sorted sets and store the resulting sorted set in a new key using MIN as aggregation function.",15,null],[11,"zunionstore_max","","Unions multiple sorted sets and store the resulting sorted set in a new key using MAX as aggregation function.",15,null],[11,"pfadd","","Adds the specified elements to the specified HyperLogLog.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"e"}],"output":{"name":"self"}}],[11,"pfcount","","Return the approximated cardinality of the set(s) observed by the HyperLogLog at key(s).",15,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"self"}}],[11,"pfmerge","","Merge N different HyperLogLogs into a single one.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"self"}}],[11,"publish","","Posts a message to the given channel.",15,{"inputs":[{"name":"self"},{"name":"k"},{"name":"e"}],"output":{"name":"self"}}]],"paths":[[3,"ConnectionInfo"],[4,"ConnectionAddr"],[3,"Parser"],[3,"Client"],[3,"Connection"],[3,"PubSub"],[3,"Msg"],[3,"Script"],[3,"ScriptInvocation"],[3,"Cmd"],[3,"Iter"],[3,"Pipeline"],[8,"ConnectionLike"],[8,"IntoConnectionInfo"],[8,"Commands"],[8,"PipelineCommands"]]};
searchIndex["route_recognizer"] = {"doc":"","items":[[3,"Params","route_recognizer","",null,null],[3,"Iter","","",null,null],[3,"Match","","",null,null],[12,"handler","","",0,null],[12,"params","","",0,null],[3,"Router","","",null,null],[0,"nfa","","",null,null],[3,"CharSet","route_recognizer::nfa","",null,null],[3,"State","","",null,null],[12,"index","","",1,null],[12,"chars","","",1,null],[12,"next_states","","",1,null],[12,"acceptance","","",1,null],[12,"start_capture","","",1,null],[12,"end_capture","","",1,null],[12,"metadata","","",1,null],[3,"Match","","",null,null],[12,"state","","",2,null],[12,"captures","","",2,null],[3,"NFA","","",null,null],[4,"CharacterClass","","",null,null],[13,"Ascii","","",3,null],[13,"ValidChars","","",3,null],[13,"InvalidChars","","",3,null],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"charset"}}],[11,"new","","",4,{"inputs":[],"output":{"name":"charset"}}],[11,"insert","","",4,{"inputs":[{"name":"self"},{"name":"char"}],"output":null}],[11,"contains","","",4,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"characterclass"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"characterclass"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"characterclass"}}],[11,"any","","",3,{"inputs":[],"output":{"name":"characterclass"}}],[11,"valid","","",3,{"inputs":[{"name":"str"}],"output":{"name":"characterclass"}}],[11,"invalid","","",3,{"inputs":[{"name":"str"}],"output":{"name":"characterclass"}}],[11,"valid_char","","",3,{"inputs":[{"name":"char"}],"output":{"name":"characterclass"}}],[11,"invalid_char","","",3,{"inputs":[{"name":"char"}],"output":{"name":"characterclass"}}],[11,"matches","","",3,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"new","","",1,{"inputs":[{"name":"usize"},{"name":"characterclass"}],"output":{"name":"state"}}],[11,"new","","",2,{"inputs":[{"name":"usize"},{"name":"vec"}],"output":{"name":"match"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"nfa"}}],[11,"new","","",5,{"inputs":[],"output":{"name":"nfa"}}],[11,"process","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"get","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"state"}}],[11,"get_mut","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"state"}}],[11,"put","","",5,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"characterclass"}],"output":{"name":"usize"}}],[11,"put_state","","",5,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"acceptance","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"start_capture","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"end_capture","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"metadata","","",5,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"eq","route_recognizer","",6,{"inputs":[{"name":"self"},{"name":"params"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"params"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"params"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",6,{"inputs":[],"output":{"name":"params"}}],[11,"insert","","",6,{"inputs":[{"name":"self"},{"name":"string"},{"name":"string"}],"output":null}],[11,"find","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","",6,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"index","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"new","","",0,{"inputs":[{"name":"t"},{"name":"params"}],"output":{"name":"match"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"router"}}],[11,"new","","",8,{"inputs":[],"output":{"name":"router"}}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":null}],[11,"recognize","","",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}]],"paths":[[3,"Match"],[3,"State"],[3,"Match"],[4,"CharacterClass"],[3,"CharSet"],[3,"NFA"],[3,"Params"],[3,"Iter"],[3,"Router"]]};
searchIndex["router"] = {"doc":"`Router` provides fast and flexible routing for Iron.","items":[[3,"Params","router","",null,null],[3,"Router","","`Router` provides an interface for creating complex routes as middleware for the Iron framework.",null,null],[3,"NoRoute","","The error thrown by router if there is no matching route, it is always accompanied by a NotFound response.",null,null],[3,"TrailingSlash","","The error thrown by router if a request was redirected by adding or removing a trailing slash.",null,null],[5,"url_for","","Generate a URL based off of the currently requested URL.",null,{"inputs":[{"name":"request"},{"name":"str"},{"name":"hashmap"}],"output":{"name":"url"}}],[11,"new","","Construct a new, empty `Router`.",0,{"inputs":[],"output":{"name":"router"}}],[11,"route","","Add a new route to a `Router`, matching both a method and glob pattern.",0,{"inputs":[{"name":"self"},{"name":"method"},{"name":"s"},{"name":"h"},{"name":"i"}],"output":{"name":"router"}}],[11,"get","","Like route, but specialized to the `Get` method.",0,{"inputs":[{"name":"self"},{"name":"s"},{"name":"h"},{"name":"i"}],"output":{"name":"router"}}],[11,"post","","Like route, but specialized to the `Post` method.",0,{"inputs":[{"name":"self"},{"name":"s"},{"name":"h"},{"name":"i"}],"output":{"name":"router"}}],[11,"put","","Like route, but specialized to the `Put` method.",0,{"inputs":[{"name":"self"},{"name":"s"},{"name":"h"},{"name":"i"}],"output":{"name":"router"}}],[11,"delete","","Like route, but specialized to the `Delete` method.",0,{"inputs":[{"name":"self"},{"name":"s"},{"name":"h"},{"name":"i"}],"output":{"name":"router"}}],[11,"head","","Like route, but specialized to the `Head` method.",0,{"inputs":[{"name":"self"},{"name":"s"},{"name":"h"},{"name":"i"}],"output":{"name":"router"}}],[11,"patch","","Like route, but specialized to the `Patch` method.",0,{"inputs":[{"name":"self"},{"name":"s"},{"name":"h"},{"name":"i"}],"output":{"name":"router"}}],[11,"options","","Like route, but specialized to the `Options` method.",0,{"inputs":[{"name":"self"},{"name":"s"},{"name":"h"},{"name":"i"}],"output":{"name":"router"}}],[11,"any","","Route will match any method, including gibberish. In case of ambiguity, handlers specific to methods will be preferred.",0,{"inputs":[{"name":"self"},{"name":"s"},{"name":"h"},{"name":"i"}],"output":{"name":"router"}}],[11,"handle","","",0,{"inputs":[{"name":"self"},{"name":"request"}],"output":{"name":"ironresult"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"noroute"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"trailingslash"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[14,"router","","Create and populate a router.",null,null],[14,"url_for","","Generate a URL based off of the requested one.",null,null],[11,"new","","",3,{"inputs":[],"output":{"name":"params"}}],[11,"insert","","",3,null],[11,"find","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","",3,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"params"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"params"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"params"}}],[11,"index","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Router"],[3,"NoRoute"],[3,"TrailingSlash"],[3,"Params"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",0,null],[12,"newline","","Newline to use",0,null],[12,"pad","","True to pad output with `=` characters",0,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",0,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",1,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",2,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",2,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",3,null],[13,"InvalidBase64Length","","The input had an invalid length",3,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified format configuration, returning the owned string.",4,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into an owned vector of bytes, returning the vector.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"characterset"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"newline"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",6,null],[13,"InvalidHexLength","","The input had an invalid length",6,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",7,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical structure of the JSON stream. For example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming an iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",9,null],[13,"U64","","",9,null],[13,"F64","","",9,null],[13,"String","","",9,null],[13,"Boolean","","",9,null],[13,"Array","","",9,null],[13,"Object","","",9,null],[13,"Null","","",9,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",10,null],[13,"InvalidNumber","","",10,null],[13,"EOFWhileParsingObject","","",10,null],[13,"EOFWhileParsingArray","","",10,null],[13,"EOFWhileParsingValue","","",10,null],[13,"EOFWhileParsingString","","",10,null],[13,"KeyMustBeAString","","",10,null],[13,"ExpectedColon","","",10,null],[13,"TrailingCharacters","","",10,null],[13,"TrailingComma","","",10,null],[13,"InvalidEscape","","",10,null],[13,"InvalidUnicodeCodePoint","","",10,null],[13,"LoneLeadingSurrogateInHexEscape","","",10,null],[13,"UnexpectedEndOfHexEscape","","",10,null],[13,"UnrecognizedHex","","",10,null],[13,"NotFourDigit","","",10,null],[13,"ControlCharacterInString","","",10,null],[13,"NotUtf8","","",10,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",11,null],[13,"IoError","","",11,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",12,null],[13,"ExpectedError","","",12,null],[13,"MissingFieldError","","",12,null],[13,"UnknownVariantError","","",12,null],[13,"ApplicationError","","",12,null],[13,"EOF","","",12,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",13,null],[13,"BadHashmapKey","","",13,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",14,null],[13,"ObjectEnd","","",14,null],[13,"ArrayStart","","",14,null],[13,"ArrayEnd","","",14,null],[13,"BooleanValue","","",14,null],[13,"I64Value","","",14,null],[13,"U64Value","","",14,null],[13,"F64Value","","",14,null],[13,"StringValue","","",14,null],[13,"NullValue","","",14,null],[13,"Error","","",14,null],[4,"StackElement","","StackElements compose a Stack. For example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the StackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",15,null],[13,"Key","","",15,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",16,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"errorcode"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"encodererror"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",12,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",11,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",13,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level. This is safe to set during encoding.",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",17,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",17,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",17,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",17,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",9,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty representation for it via `Display`.",9,{"inputs":[{"name":"self"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key. Otherwise, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`. If any key is found not to exist, find_path will return None. Otherwise, it will return the Json value associated with the final key.",9,null],[11,"search","","If the Json value is an Object, performs a depth-first search until a value associated with the provided key is found. If no value is found or the Json value is not an Object, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns a reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns a mutable reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_object","","If the Json value is an Object, returns the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns a reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns a mutable reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_array","","If the Json value is an Array, returns the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns (). Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"json"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"stackelement"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",18,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index. lower indices are at the bottom of the stack while higher indices are at the top.",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",18,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"top","","Returns the top-most element (if any).",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",19,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the JSON stream.",19,{"inputs":[{"name":"self"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",20,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",21,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",21,null],[11,"read_enum_variant_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",21,null],[11,"read_enum_struct_variant_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"fmt","","Encodes a json value into a string",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",24,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","Trait for reading in an encoding for deserialization.",null,null],[16,"Error","","The error type for method results.",25,null],[10,"read_nil","","Read a nil value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_usize","","Read a usize value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u64","","Read a u64 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u32","","Read a u32 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u16","","Read a u16 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u8","","Read a u8 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_isize","","Read a isize value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i64","","Read a i64 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i32","","Read a i32 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i16","","Read a i16 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i8","","Read a i8 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_bool","","Read a bool value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_f64","","Read a f64 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_f32","","Read a f32 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_char","","Read a char value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_str","","Read a string value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_enum","","Read an enumeration value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","Read an enumeration value.",25,null],[10,"read_enum_variant_arg","","Read an unnamed data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","Read an enumeration value.",25,null],[10,"read_enum_struct_variant_field","","Read a named data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","Read an struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","Read a field for a struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","Read a tuple value.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","Read a data item for a tuple.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","Read a tuple struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","Read a data item for a tuple struct.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","Read an optional value.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","Read a sequence of values.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","Read an element in the sequence.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","Read an associative container (map).",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","Read the key for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","Read the value for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","Record a decoding error.",25,null],[8,"Encoder","","Trait for writing out an encoding when serializing.",null,null],[16,"Error","","The error type for method results.",26,null],[10,"emit_nil","","Emit a nil value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_usize","","Emit a usize value.",26,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","Emit a u64 value.",26,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","Emit a u32 value.",26,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","Emit a u16 value.",26,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","Emit a u8 value.",26,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","Emit a isize value.",26,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","Emit a i64 value.",26,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","Emit a i32 value.",26,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","Emit a i16 value.",26,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","Emit a i8 value.",26,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","Emit a bool value.",26,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","Emit a f64 value.",26,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","Emit a f32 value.",26,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","Emit a char value.",26,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","Emit a string value.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","Emit an enumeration value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","Emit a enumeration variant value with no or unnamed data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","Emit an unnamed data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","Emit a enumeration variant value with no or named data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","Emit a named data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","Emit a struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","Emit a field item for a struct.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","Emit a tuple value.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","Emit a data item for a tuple.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","Emit a tuple struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","Emit a data item for a tuple struct.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","Emit an optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","Emit the `None` optional value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_option_some","","Emit the `Some(x)` optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","Emit a sequence of values.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","Emit an element in a sequence.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","Emit an associative container (map).",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","Emit the key for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","Emit the value for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","Trait for deserializing a type.",null,null],[10,"decode","","Deserialize a value using a `Decoder`.",27,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","Trait for serializing a type.",null,null],[10,"encode","","Serialize a value using an `Encoder`.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","Trait with helper functions for implementing `Decodable`.",null,null],[10,"read_to_vec","","Read a sequence into a vector.",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","Trait with helper functions for implementing `Encodable`.",null,null],[10,"emit_from_vec","","Emit a vector as a sequence.",30,null]],"paths":[[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["scheduled_thread_pool"] = {"doc":"A thread pool to execute scheduled actions in parallel.","items":[[3,"ScheduledThreadPool","scheduled_thread_pool","A pool of threads which can run tasks at specific time intervals.",null,null],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new thread pool with the specified number of threads.",0,{"inputs":[{"name":"usize"}],"output":{"name":"scheduledthreadpool"}}],[11,"with_name","","Creates a new thread pool with the specified number of threads which will be named.",0,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"scheduledthreadpool"}}],[11,"execute","","Executes a closure as soon as possible in the pool.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"execute_after","","Executes a closure after a time delay in the pool.",0,{"inputs":[{"name":"self"},{"name":"duration"},{"name":"f"}],"output":null}],[11,"execute_at_fixed_rate","","Executes a closure after an initial delay at a fixed rate in the pool.",0,{"inputs":[{"name":"self"},{"name":"duration"},{"name":"duration"},{"name":"f"}],"output":null}],[11,"execute_with_fixed_delay","","Executes a closure after an initial delay at a fixed rate in the pool.",0,{"inputs":[{"name":"self"},{"name":"duration"},{"name":"duration"},{"name":"f"}],"output":null}]],"paths":[[3,"ScheduledThreadPool"]]};
searchIndex["serde"] = {"doc":"Serde","items":[[0,"ser","serde","Generic data structure serialization framework.",null,null],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support serializing one of the compound types.",null,null],[11,"serialize_element","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_element","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_key","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_value","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors belonging to the `Serializer` against which they are currently running.",null,null],[10,"custom","","Used when a [`Serialize`] implementation encounters any error while serializing a type.",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",3,null],[16,"Error","","The error type when some error occurs during serialization.",3,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",3,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",3,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",3,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",3,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",3,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",3,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",3,null],[10,"serialize_bool","","Serialize a `bool` value.",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",3,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",3,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",3,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"serialize_char","","Serialize a character.",3,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serialize a `&str`.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",3,null],[10,"serialize_none","","Serialize a [`None`] value.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serialize a [`Some(T)`] value.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_map","","Collect an iterator as a map.",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",4,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",4,null],[10,"serialize_element","","Serialize a sequence element.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a sequence.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",5,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",5,null],[10,"serialize_element","","Serialize a tuple element.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",6,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",6,null],[10,"serialize_field","","Serialize a tuple struct field.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple struct.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",7,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",7,null],[10,"serialize_field","","Serialize a tuple variant field.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple variant.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",8,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",8,null],[10,"serialize_key","","Serialize a map key.",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_value","","Serialize a map value.",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",8,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a map.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",9,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",9,null],[10,"serialize_field","","Serialize a struct field.",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a struct.",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",10,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",10,null],[10,"serialize_field","","Serialize a struct variant field.",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a struct variant.",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"de","serde","Generic data structure deserialization framework.",null,null],[3,"IgnoredAny","serde::de","An efficient way of discarding data from a deserializer.",null,null],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any one of the `Visitor` trait methods.",null,null],[13,"Bool","","The input contained a boolean value that was not expected.",11,null],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that was not expected.",11,null],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that was not expected.",11,null],[13,"Float","","The input contained a floating point `f32` or `f64` that was not expected.",11,null],[13,"Char","","The input contained a `char` that was not expected.",11,null],[13,"Str","","The input contained a `&str` or `String` that was not expected.",11,null],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not expected.",11,null],[13,"Unit","","The input contained a unit `()` that was not expected.",11,null],[13,"Option","","The input contained an `Option<T>` that was not expected.",11,null],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",11,null],[13,"Seq","","The input contained a sequence that was not expected.",11,null],[13,"Map","","The input contained a map that was not expected.",11,null],[13,"Enum","","The input contained an enum that was not expected.",11,null],[13,"UnitVariant","","The input contained a unit variant that was not expected.",11,null],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",11,null],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",11,null],[13,"StructVariant","","The input contained a struct variant that was not expected.",11,null],[13,"Other","","A message stating what uncategorized thing the input contained that was not expected.",11,null],[0,"value","","Building blocks for deserializing basic values using the `IntoDeserializer` trait.",null,null],[3,"Error","serde::de::value","A minimal representation of all possible errors that can occur using the `IntoDeserializer` trait.",null,null],[3,"UnitDeserializer","","A deserializer holding a `()`.",null,null],[3,"BoolDeserializer","","A deserializer holding a `bool`.",null,null],[3,"I8Deserializer","","A deserializer holding an `i8`.",null,null],[3,"I16Deserializer","","A deserializer holding an `i16`.",null,null],[3,"I32Deserializer","","A deserializer holding an `i32`.",null,null],[3,"I64Deserializer","","A deserializer holding an `i64`.",null,null],[3,"IsizeDeserializer","","A deserializer holding an `isize`.",null,null],[3,"U8Deserializer","","A deserializer holding a `u8`.",null,null],[3,"U16Deserializer","","A deserializer holding a `u16`.",null,null],[3,"U64Deserializer","","A deserializer holding a `u64`.",null,null],[3,"UsizeDeserializer","","A deserializer holding a `usize`.",null,null],[3,"F32Deserializer","","A deserializer holding an `f32`.",null,null],[3,"F64Deserializer","","A deserializer holding an `f64`.",null,null],[3,"CharDeserializer","","A deserializer holding a `char`.",null,null],[3,"U32Deserializer","","A deserializer holding a `u32`.",null,null],[3,"StrDeserializer","","A deserializer holding a `&str`.",null,null],[3,"BorrowedStrDeserializer","","A deserializer holding a `&str` with a lifetime tied to another deserializer.",null,null],[3,"StringDeserializer","","A deserializer holding a `String`.",null,null],[3,"CowStrDeserializer","","A deserializer holding a `Cow<str>`.",null,null],[3,"BorrowedBytesDeserializer","","A deserializer holding a `&[u8]` with a lifetime tied to another deserializer.",null,null],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",null,null],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",null,null],[3,"MapDeserializer","","A deserializer that iterates over a map.",null,null],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"custom","","",12,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"custom","","",12,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"unitdeserializer"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",13,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",13,null],[11,"deserialize_enum","","",13,null],[11,"deserialize_identifier","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"booldeserializer"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",14,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",14,null],[11,"deserialize_enum","","",14,null],[11,"deserialize_identifier","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"i8deserializer"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",15,null],[11,"deserialize_enum","","",15,null],[11,"deserialize_identifier","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"i16deserializer"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",16,null],[11,"deserialize_enum","","",16,null],[11,"deserialize_identifier","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"i32deserializer"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",17,null],[11,"deserialize_enum","","",17,null],[11,"deserialize_identifier","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"i64deserializer"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",18,null],[11,"deserialize_enum","","",18,null],[11,"deserialize_identifier","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"isizedeserializer"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",19,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",19,null],[11,"deserialize_enum","","",19,null],[11,"deserialize_identifier","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u8deserializer"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",20,null],[11,"deserialize_enum","","",20,null],[11,"deserialize_identifier","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u16deserializer"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",21,null],[11,"deserialize_enum","","",21,null],[11,"deserialize_identifier","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"u64deserializer"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",22,null],[11,"deserialize_enum","","",22,null],[11,"deserialize_identifier","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usizedeserializer"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",23,null],[11,"deserialize_enum","","",23,null],[11,"deserialize_identifier","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"f32deserializer"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",24,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",24,null],[11,"deserialize_enum","","",24,null],[11,"deserialize_identifier","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"f64deserializer"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",25,null],[11,"deserialize_enum","","",25,null],[11,"deserialize_identifier","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"chardeserializer"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",26,null],[11,"deserialize_enum","","",26,null],[11,"deserialize_identifier","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u32deserializer"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",27,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",27,null],[11,"deserialize_identifier","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",27,null],[11,"variant_seed","","",27,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"strdeserializer"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_any","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",28,null],[11,"deserialize_bool","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",28,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",28,null],[11,"deserialize_identifier","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",28,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"borrowedstrdeserializer"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new borrowed deserializer from the given string.",29,{"inputs":[{"name":"str"}],"output":{"name":"borrowedstrdeserializer"}}],[11,"deserialize_any","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",29,null],[11,"deserialize_bool","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",29,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",29,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",29,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",29,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",29,null],[11,"deserialize_identifier","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",29,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"stringdeserializer"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_any","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",30,null],[11,"deserialize_bool","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",30,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",30,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",30,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",30,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",30,null],[11,"deserialize_identifier","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",30,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"cowstrdeserializer"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_any","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",31,null],[11,"deserialize_bool","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",31,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",31,null],[11,"deserialize_identifier","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",31,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"borrowedbytesdeserializer"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new borrowed deserializer from the given byte slice.",32,null],[11,"deserialize_any","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",32,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",32,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",32,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",32,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",32,null],[11,"deserialize_identifier","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",32,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"seqdeserializer"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqDeserializer<I, E>`.",33,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to `Visitor::visit_seq`.",33,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize_any","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",33,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",33,null],[11,"deserialize_enum","","",33,null],[11,"deserialize_identifier","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_element_seed","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"size_hint","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"seqaccessdeserializer"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqAccessDeserializer<A>`.",34,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"deserialize_any","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",34,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",34,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",34,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",34,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",34,null],[11,"deserialize_enum","","",34,null],[11,"deserialize_identifier","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapDeserializer<I, E>`.",35,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to `Visitor::visit_map`.",35,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize_any","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",35,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",35,null],[11,"deserialize_enum","","",35,null],[11,"deserialize_identifier","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_key_seed","","",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"next_value_seed","","",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"next_entry_seed","","",35,{"inputs":[{"name":"self"},{"name":"tk"},{"name":"tv"}],"output":{"name":"result"}}],[11,"size_hint","","",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_element_seed","","",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"size_hint","","",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"mapaccessdeserializer"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapAccessDeserializer<A>`.",36,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"deserialize_any","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",36,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",36,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",36,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",36,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",36,null],[11,"deserialize_enum","","",36,null],[11,"deserialize_identifier","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","serde::de","",37,{"inputs":[{"name":"self"}],"output":{"name":"ignoredany"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",37,{"inputs":[],"output":{"name":"ignoredany"}}],[11,"expecting","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_bool","","",37,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_i64","","",37,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_u64","","",37,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f64","","",37,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_str","","",37,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_none","","",37,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","",37,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","",37,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_unit","","",37,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",37,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_map","","",37,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_bytes","","",37,null],[11,"deserialize","","",37,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Error","","The `Error` trait allows `Deserialize` implementations to create descriptive error messages belonging to the `Deserializer` against which they are currently running.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",38,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was expecting.",38,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that is wrong for some other reason.",38,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains too many or too few elements.",38,{"inputs":[{"name":"usize"},{"name":"expected"}],"output":{"name":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an unrecognized name.",38,null],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an unrecognized name.",38,null],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required field with a particular name but that field was not present in the input.",38,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same field.",38,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting to receive.",null,null],[10,"fmt","","Format an explanation of what data was being expected. Same signature as the `Display` and `Debug` traits.",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",40,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"DeserializeOwned","","A data structure that can be deserialized without borrowing any data from the deserializer.",null,null],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you ever find yourself looking for a way to pass data into a `Deserialize` impl, this trait is the way to do it.",null,null],[16,"Value","","The type produced by using this seed.",41,null],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except with some initial piece of data (the seed) passed in.",41,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",42,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",42,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",42,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",42,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",43,null],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_bool","","The input contains a boolean.",43,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_i8","","The input contains an `i8`.",43,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","The input contains an `i16`.",43,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","The input contains an `i32`.",43,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"visit_i64","","The input contains an `i32`.",43,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_u8","","The input contains a `u8`.",43,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","The input contains a `u16`.",43,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","The input contains a `u32`.",43,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"visit_u64","","The input contains a `u64`.",43,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f32","","The input contains an `f32`.",43,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"visit_f64","","The input contains an `f64`.",43,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","The input contains a `char`.",43,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"visit_str","","The input contains a string. The lifetime of the string is ephemeral and it may be destroyed after this method returns.",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as the `Deserializer`.",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_string","","The input contains a string and ownership of the string is being given to the `Visitor`.",43,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte array is ephemeral and it may be destroyed after this method returns.",43,null],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as long as the `Deserializer`.",43,null],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte array is being given to the `Visitor`.",43,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"visit_none","","The input contains an optional that is absent.",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","The input contains an optional that is present.",43,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_unit","","The input contains a unit `()`.",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","The input contains a newtype struct.",43,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_seq","","The input contains a sequence of elements.",43,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_map","","The input contains a key-value map.",43,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_enum","","The input contains an enum.",43,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",44,null],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",44,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",44,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","Returns the number of elements remaining in the sequence, if known.",44,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",45,null],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",45,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"result"}}],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",45,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",45,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","Returns the number of entries remaining in the map, if known.",45,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",46,null],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum variant.",46,null],[10,"variant_seed","","`variant` is called to identify which variant to deserialize.",46,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant","","`variant` is called to identify which variant to deserialize.",46,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` to deserialize the content of a particular enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization. Must match the error type of our `EnumAccess`.",47,null],[10,"unit_variant","","Called when deserializing a variant with no values.",47,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",47,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"newtype_variant","","Called when deserializing a variant with a single value.",47,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",47,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"struct_variant","","Called when deserializing a struct-like variant.",47,null],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from which other values can be deserialized.",null,null],[16,"Deserializer","","The type of the deserializer being converted into.",48,null],[10,"into_deserializer","","Convert this value into a deserializer.",48,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"unexpected"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"unexpected"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"unexpected"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Serialize","serde","A data structure that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",3,null],[16,"Error","","The error type when some error occurs during serialization.",3,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",3,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",3,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",3,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",3,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",3,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",3,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",3,null],[10,"serialize_bool","","Serialize a `bool` value.",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",3,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",3,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",3,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"serialize_char","","Serialize a character.",3,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serialize a `&str`.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",3,null],[10,"serialize_none","","Serialize a [`None`] value.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serialize a [`Some(T)`] value.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_map","","Collect an iterator as a map.",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",40,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",42,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",42,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",42,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",42,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[14,"forward_to_deserialize_any","","Helper macro when implementing the `Deserializer` part of a new data format for Serde.",null,null]],"paths":[[3,"Impossible"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"],[4,"Unexpected"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[3,"IgnoredAny"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"]]};
searchIndex["serde_derive"] = {"doc":"This crate provides Serde's two derive macros.","items":[[5,"derive_serialize","serde_derive","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_deserialize","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["serde_derive_internals"] = {"doc":"","items":[[3,"Ctxt","serde_derive_internals","",null,null],[0,"ast","","",null,null],[3,"Container","serde_derive_internals::ast","",null,null],[12,"ident","","",0,null],[12,"attrs","","",0,null],[12,"body","","",0,null],[12,"generics","","",0,null],[3,"Variant","","",null,null],[12,"ident","","",1,null],[12,"attrs","","",1,null],[12,"style","","",1,null],[12,"fields","","",1,null],[3,"Field","","",null,null],[12,"ident","","",2,null],[12,"attrs","","",2,null],[12,"ty","","",2,null],[4,"Body","","",null,null],[13,"Enum","","",3,null],[13,"Struct","","",3,null],[4,"Style","","",null,null],[13,"Struct","","",4,null],[13,"Tuple","","",4,null],[13,"Newtype","","",4,null],[13,"Unit","","",4,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"from_ast","","",0,{"inputs":[{"name":"ctxt"},{"name":"deriveinput"}],"output":{"name":"container"}}],[11,"all_fields","","",3,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"has_getter","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"attr","serde_derive_internals","",null,null],[3,"Name","serde_derive_internals::attr","",null,null],[3,"Container","","Represents container (e.g. struct) attribute information",null,null],[3,"Variant","","Represents variant attribute information",null,null],[3,"Field","","Represents field attribute information",null,null],[4,"RenameRule","","",null,null],[13,"None","","Don't apply a default rename rule.",5,null],[13,"LowerCase","","Rename direct children to \"lowercase\" style.",5,null],[13,"PascalCase","","Rename direct children to \"PascalCase\" style, as typically used for enum variants.",5,null],[13,"CamelCase","","Rename direct children to \"camelCase\" style.",5,null],[13,"SnakeCase","","Rename direct children to \"snake_case\" style, as commonly used for fields.",5,null],[13,"ScreamingSnakeCase","","Rename direct children to \"SCREAMING_SNAKE_CASE\" style, as commonly used for constants.",5,null],[13,"KebabCase","","Rename direct children to \"kebab-case\" style.",5,null],[4,"EnumTag","","Styles of representing an enum.",null,null],[13,"External","","The default.",6,null],[13,"Internal","","`#[serde(tag = \"type\")]`",6,null],[12,"tag","serde_derive_internals::attr::EnumTag","",6,null],[13,"Adjacent","serde_derive_internals::attr","`#[serde(tag = \"t\", content = \"c\")]`",6,null],[12,"tag","serde_derive_internals::attr::EnumTag","",6,null],[12,"content","","",6,null],[13,"None","serde_derive_internals::attr","`#[serde(untagged)]`",6,null],[4,"Identifier","","Whether this enum represents the fields of a struct or the variants of an enum.",null,null],[13,"No","","It does not.",7,null],[13,"Field","","This enum represents the fields of a struct. All of the variants must be unit variants, except possibly one which is annotated with `#[serde(other)]` and is a newtype variant.",7,null],[13,"Variant","","This enum represents the variants of an enum. All of the variants must be unit variants.",7,null],[4,"Default","","Represents the default to use for a field when deserializing.",null,null],[13,"None","","Field must always be specified because it does not have a default.",8,null],[13,"Default","","The default is given by `std::default::Default::default()`.",8,null],[13,"Path","","The default is given by this function.",8,null],[5,"get_serde_meta_items","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"option"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize_name","","Return the container name for the container when serializing.",9,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deserialize_name","","Return the container name for the container when deserializing.",9,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"identifier"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from an item.",10,{"inputs":[{"name":"ctxt"},{"name":"deriveinput"}],"output":{"name":"self"}}],[11,"name","","",10,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rename_all","","",10,{"inputs":[{"name":"self"}],"output":{"name":"renamerule"}}],[11,"deny_unknown_fields","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",10,{"inputs":[{"name":"self"}],"output":{"name":"default"}}],[11,"ser_bound","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"de_bound","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tag","","",10,{"inputs":[{"name":"self"}],"output":{"name":"enumtag"}}],[11,"from_type","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_type","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"remote","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"identifier","","",10,{"inputs":[{"name":"self"}],"output":{"name":"identifier"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ast","","",11,{"inputs":[{"name":"ctxt"},{"name":"variant"}],"output":{"name":"self"}}],[11,"name","","",11,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rename_by_rule","","",11,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":null}],[11,"rename_all","","",11,{"inputs":[{"name":"self"}],"output":{"name":"renamerule"}}],[11,"skip_deserializing","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_serializing","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"other","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"bool"}}],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from a struct field.",12,{"inputs":[{"name":"ctxt"},{"name":"usize"},{"name":"field"}],"output":{"name":"self"}}],[11,"name","","",12,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rename_by_rule","","",12,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":null}],[11,"skip_serializing","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_deserializing","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_serializing_if","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"default","","",12,{"inputs":[{"name":"self"}],"output":{"name":"default"}}],[11,"serialize_with","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deserialize_with","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"ser_bound","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"de_bound","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"borrowed_lifetimes","","",12,{"inputs":[{"name":"self"}],"output":{"name":"btreeset"}}],[11,"getter","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"default","serde_derive_internals","",13,{"inputs":[],"output":{"name":"ctxt"}}],[11,"new","","",13,{"inputs":[],"output":{"name":"self"}}],[11,"error","","",13,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"check","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","serde_derive_internals::attr","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":{"name":"bool"}}],[11,"apply_to_variant","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"apply_to_field","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}]],"paths":[[3,"Container"],[3,"Variant"],[3,"Field"],[4,"Body"],[4,"Style"],[4,"RenameRule"],[4,"EnumTag"],[4,"Identifier"],[4,"Default"],[3,"Name"],[3,"Container"],[3,"Variant"],[3,"Field"],[3,"Ctxt"]]};
searchIndex["serde_json"] = {"doc":"Serde JSON","items":[[3,"Deserializer","serde_json","A structure that deserializes JSON into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",null,null],[3,"Error","","This type represents all possible errors that can occur when serializing or deserializing JSON data.",null,null],[3,"Serializer","","A structure for serializing Rust values into JSON.",null,null],[3,"Map","","Represents a JSON key/value type.",null,null],[3,"Number","","Represents a JSON number, whether integer or floating point.",null,null],[4,"Value","","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",0,null],[13,"Bool","","Represents a JSON boolean.",0,null],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,null],[13,"String","","Represents a JSON string.",0,null],[13,"Array","","Represents a JSON array.",0,null],[13,"Object","","Represents a JSON object.",0,null],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",null,null],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"to_string","","Serialize the given data structure as a String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",null,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[0,"de","","Deserialize JSON data to a Rust data structure.",null,null],[3,"IoRead","serde_json::de","JSON input source that reads from a std::io input stream.",null,null],[3,"SliceRead","","JSON input source that reads from a slice of bytes.",null,null],[3,"StrRead","","JSON input source that reads from a UTF-8 string.",null,null],[3,"Deserializer","","A structure that deserializes JSON into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",null,null],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",null,null],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Read","","Trait used by the deserializer for iterating over input. This is manually \"specialized\" for iterating over &[u8]. Once feature(specialization) is stable we can use actual specialization.",null,null],[11,"new","","Create a JSON deserializer from one of the possible serde_json input sources.",1,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"from_reader","","Creates a JSON deserializer from an `io::Read`.",1,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"from_slice","","Creates a JSON deserializer from a `&[u8]`.",1,null],[11,"from_str","","Creates a JSON deserializer from a `&str`.",1,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized. This allows the `Deserializer` to validate that the input stream is at the end or that it only has trailing whitespace.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"into_iter","","Turn a JSON deserializer into an iterator over values of type T.",1,{"inputs":[{"name":"self"}],"output":{"name":"streamdeserializer"}}],[11,"new","","Create a JSON stream deserializer from one of the possible serde_json input sources.",2,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"byte_offset","","Returns the number of bytes so far deserialized into a successful `T`.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"error","serde_json","When serializing or deserializing JSON goes wrong.",null,null],[3,"Error","serde_json::error","This type represents all possible errors that can occur when serializing or deserializing JSON data.",null,null],[4,"Category","","Categorizes the cause of a `serde_json::Error`.",null,null],[13,"Io","","The error was caused by a failure to read or write bytes on an IO stream.",3,null],[13,"Syntax","","The error was caused by input that was not syntactically valid JSON.",3,null],[13,"Data","","The error was caused by input data that was semantically incorrect.",3,null],[13,"Eof","","The error was caused by prematurely reaching the end of the input data.",3,null],[6,"Result","","Alias for a `Result` with the error type `serde_json::Error`.",null,null],[11,"line","","One-based line number at which the error was detected.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"column","","One-based column number at which the error was detected.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"classify","","Categorizes the cause of this error.",4,{"inputs":[{"name":"self"}],"output":{"name":"category"}}],[11,"is_io","","Returns true if this error was caused by a failure to read or write bytes on an IO stream.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_syntax","","Returns true if this error was caused by input that was not syntactically valid JSON.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_data","","Returns true if this error was caused by input data that was semantically incorrect.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_eof","","Returns true if this error was caused by prematurely reaching the end of the input data.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"category"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"category"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"custom","","",4,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"custom","","",4,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[0,"map","serde_json","A map of String to serde_json::Value.",null,null],[3,"Map","serde_json::map","Represents a JSON key/value type.",null,null],[3,"VacantEntry","","A vacant Entry. It is part of the [`Entry`] enum.",null,null],[3,"OccupiedEntry","","An occupied Entry. It is part of the [`Entry`] enum.",null,null],[3,"Iter","","An iterator over a serde_json::Map's entries.",null,null],[3,"IterMut","","A mutable iterator over a serde_json::Map's entries.",null,null],[3,"IntoIter","","An owning iterator over a serde_json::Map's entries.",null,null],[3,"Keys","","An iterator over a serde_json::Map's keys.",null,null],[3,"Values","","An iterator over a serde_json::Map's values.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied. This enum is constructed from the [`entry`] method on [`Map`].",null,null],[13,"Vacant","","A vacant Entry.",5,null],[13,"Occupied","","An occupied Entry.",5,null],[11,"new","","Makes a new empty Map.",6,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Makes a new empty Map with the given initial capacity.",6,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"clear","","Clears the map, removing all values.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",6,{"inputs":[{"name":"self"},{"name":"string"},{"name":"value"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"entry"}}],[11,"len","","Returns the number of elements in the map.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","Gets an iterator over the entries of the map.",6,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",6,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map.",6,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map.",6,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"index","","",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"value"}}],[11,"index_mut","","",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"value"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_iter","","",6,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"extend","","",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"key","","Returns a reference to this entry's key.",5,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",5,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"value"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"value"}}],[11,"key","","Gets a reference to the key that would be used when inserting a value through the VacantEntry.",7,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",7,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"value"}}],[11,"key","","Gets a reference to the key in the entry.",8,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get","","Gets a reference to the value in the entry.",8,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",8,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",8,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s key, and returns the entry's old value.",8,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"value"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",8,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_iter","","",6,null],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"next_back","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"next_back","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"next_back","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"ser","serde_json","Serialize a Rust data structure into JSON data.",null,null],[3,"Serializer","serde_json::ser","A structure for serializing Rust values into JSON.",null,null],[3,"CompactFormatter","","This structure compacts a JSON value with no extra whitespace.",null,null],[3,"PrettyFormatter","","This structure pretty prints a JSON value to make it human readable.",null,null],[4,"CharEscape","","Represents a character escape code in a type-safe manner.",null,null],[13,"Quote","","An escaped quote `\"`",14,null],[13,"ReverseSolidus","","An escaped reverse solidus `\\`",14,null],[13,"Solidus","","An escaped solidus `/`",14,null],[13,"Backspace","","An escaped backspace character (usually escaped as `\\b`)",14,null],[13,"FormFeed","","An escaped form feed character (usually escaped as `\\f`)",14,null],[13,"LineFeed","","An escaped line feed character (usually escaped as `\\n`)",14,null],[13,"CarriageReturn","","An escaped carriage return character (usually escaped as `\\r`)",14,null],[13,"Tab","","An escaped tab character (usually escaped as `\\t`)",14,null],[13,"AsciiControl","","An escaped ASCII plane control character (usually escaped as `\\u00XX` where `XX` are two hex characters)",14,null],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string","","Serialize the given data structure as a String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[8,"Formatter","","This trait abstracts away serializing the JSON control characters, which allows the user to optionally pretty print the JSON output.",null,null],[11,"write_null","","Writes a `null` value to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"write_bool","","Writes a `true` or `false` value to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"write_i8","","Writes an integer value like `-123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_i16","","Writes an integer value like `-123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_i32","","Writes an integer value like `-123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_i64","","Writes an integer value like `-123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_u8","","Writes an integer value like `123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an integer value like `123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an integer value like `123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an integer value like `123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a floating point value like `-31.26e+12` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a floating point value like `-31.26e+12` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"f64"}],"output":{"name":"result"}}],[11,"begin_string","","Called before each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_string","","Called after each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"write_string_fragment","","Writes a string fragment that doesn't need any escaping to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char_escape","","Writes a character escape code to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"charescape"}],"output":{"name":"result"}}],[11,"begin_array","","Called before every array.  Writes a `[` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_array","","Called after every array.  Writes a `]` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_array_value","","Called before every array value.  Writes a `,` if needed to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"end_array_value","","Called after every array value.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object","","Called before every object.  Writes a `{` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object","","Called after every object.  Writes a `}` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object_key","","Called before every object key.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"end_object_key","","Called after every object key.  A `:` should be written to the specified writer by either this method or `begin_object_value`.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object_value","","Called before every object value.  A `:` should be written to the specified writer by either this method or `end_object_key`.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object_value","","Called after every object value.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"new","","Creates a new JSON serializer.",16,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"pretty","","Creates a new JSON pretty print serializer.",16,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"with_formatter","","Creates a new JSON visitor whose output will be written to the writer specified.",16,{"inputs":[{"name":"w"},{"name":"f"}],"output":{"name":"self"}}],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",16,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"compactformatter"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"prettyformatter"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a pretty printer formatter that defaults to using two spaces for indentation.",18,{"inputs":[],"output":{"name":"self"}}],[11,"with_indent","","Construct a pretty printer formatter that uses the `indent` string for indentation.",18,null],[11,"default","","",18,{"inputs":[],"output":{"name":"self"}}],[11,"begin_array","","",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_array","","",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_array_value","","",18,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"end_array_value","","",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object","","",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object","","",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object_key","","",18,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"begin_object_value","","",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object_value","","",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"value","serde_json","The Value enum, a loosely typed way of representing any valid JSON value.",null,null],[3,"Number","serde_json::value","Represents a JSON number, whether integer or floating point.",null,null],[4,"Value","","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",0,null],[13,"Bool","","Represents a JSON boolean.",0,null],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,null],[13,"String","","Represents a JSON string.",0,null],[13,"Array","","Represents a JSON array.",0,null],[13,"Object","","Represents a JSON object.",0,null],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",null,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[11,"index","","Index into a `serde_json::Value` using the syntax `value[0]` or `value[\"k\"]`.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"value"}}],[11,"index_mut","","Write into a `serde_json::Value` using the syntax `value[0] = ...` or `value[\"k\"] = ...`.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"value"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","Convert 32-bit floating point number to `Value`",0,{"inputs":[{"name":"f32"}],"output":{"name":"self"}}],[11,"from","","Convert 64-bit floating point number to `Value`",0,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"from","","Convert boolean to `Value`",0,{"inputs":[{"name":"bool"}],"output":{"name":"self"}}],[11,"from","","Convert `String` to `Value`",0,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","Convert string slice to `Value`",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","Convert copy-on-write string to `Value`",0,{"inputs":[{"name":"cow"}],"output":{"name":"self"}}],[11,"from","","Convert map (with string keys) to `Value`",0,{"inputs":[{"name":"map"}],"output":{"name":"self"}}],[11,"from","","Convert a `Vec` to `Value`",0,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","","Convert a slice to `Value`",0,null],[11,"from_iter","","Convert an iteratable type to a `Value`",0,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","Display a JSON value as a string.",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"deserialize_any","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",0,null],[11,"deserialize_newtype_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",0,null],[11,"deserialize_identifier","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[8,"Index","","A type that can be used to index into a `serde_json::Value`. See the `get` and `get_mut` methods of `Value`.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"get","","Index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"get_mut","","Mutably index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the `Value` is an integer between `i64::MIN` and `i64::MAX`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the `Value` is an integer between zero and `u64::MAX`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the `Value` is a number that can be represented by f64.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the `Value` is an integer, represent it as i64 if possible. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_u64","","If the `Value` is an integer, represent it as u64 if possible. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_f64","","If the `Value` is a number, represent it as f64 if possible. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pointer","","Looks up a value by a JSON Pointer.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable reference to that value.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"value"}}],[11,"clone","serde_json","",19,{"inputs":[{"name":"self"}],"output":{"name":"number"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the `Number` is an integer between `i64::MIN` and `i64::MAX`.",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the `Number` is an integer between zero and `u64::MAX`.",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the `Number` can be represented by f64.",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the `Number` is an integer, represent it as i64 if possible. Returns None otherwise.",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_u64","","If the `Number` is an integer, represent it as u64 if possible. Returns None otherwise.",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_f64","","Represents the number as f64 if possible. Returns None otherwise.",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_f64","","Converts a finite `f64` to a `Number`. Infinite or NaN values are not JSON numbers.",19,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",19,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",19,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize_any","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",19,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",19,null],[11,"deserialize_enum","","",19,null],[11,"deserialize_identifier","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"from","","",19,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"new","serde_json::de","Create a JSON input source to read from a std::io input stream.",20,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peek","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"discard","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"position","","",20,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"peek_position","","",20,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"byte_offset","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse_str","","",20,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"parse_str_raw","","",20,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"new","","Create a JSON input source to read from a slice of bytes.",21,null],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peek","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"discard","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"position","","",21,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"peek_position","","",21,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"byte_offset","","",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse_str","","",21,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"parse_str_raw","","",21,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"new","","Create a JSON input source to read from a UTF-8 string.",22,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peek","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"discard","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"position","","",22,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"peek_position","","",22,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"byte_offset","","",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse_str","","",22,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"parse_str_raw","","",22,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[6,"Result","serde_json","Alias for a `Result` with the error type `serde_json::Error`.",null,null],[14,"json","","Construct a `serde_json::Value` from a JSON literal.",null,null]],"paths":[[4,"Value"],[3,"Deserializer"],[3,"StreamDeserializer"],[4,"Category"],[3,"Error"],[4,"Entry"],[3,"Map"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[4,"CharEscape"],[8,"Formatter"],[3,"Serializer"],[3,"CompactFormatter"],[3,"PrettyFormatter"],[3,"Number"],[3,"IoRead"],[3,"SliceRead"],[3,"StrRead"]]};
searchIndex["sha1"] = {"doc":"A minimal implementation of SHA1 for rust.","items":[[3,"Sha1","sha1","Represents a Sha1 hash object in memory.",null,null],[3,"Digest","","Digest generated from a `Sha1` instance.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"sha1"}}],[11,"new","","Creates an fresh sha1 hash object.",0,{"inputs":[],"output":{"name":"sha1"}}],[11,"reset","","Resets the hash object to it's initial state.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"update","","Update hash with input data.",0,null],[11,"digest","","Retrieve digest result.",0,{"inputs":[{"name":"self"}],"output":{"name":"digest"}}],[11,"bytes","","Returns the 160 bit (20 byte) digest as a byte array.",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Sha1"],[3,"Digest"]]};
searchIndex["spaceapi"] = {"doc":"Space API definitions and serialization.","items":[[3,"Location","spaceapi","",null,null],[12,"address","","",0,null],[12,"lat","","",0,null],[12,"lon","","",0,null],[3,"Spacefed","","",null,null],[12,"spacenet","","",1,null],[12,"spacesaml","","",1,null],[12,"spacephone","","",1,null],[3,"Icon","","",null,null],[12,"open","","",2,null],[12,"close","","",2,null],[3,"State","","",null,null],[12,"open","","",3,null],[12,"lastchange","","",3,null],[12,"trigger_person","","",3,null],[12,"message","","",3,null],[12,"icon","","",3,null],[3,"Event","","",null,null],[12,"name","","",4,null],[12,"type_","","",4,null],[12,"timestamp","","",4,null],[12,"extra","","",4,null],[3,"Keymaster","","",null,null],[12,"name","","",5,null],[12,"irc_nick","","",5,null],[12,"phone","","",5,null],[12,"email","","",5,null],[12,"twitter","","",5,null],[3,"GoogleContact","","",null,null],[12,"plus","","",6,null],[3,"Contact","","",null,null],[12,"phone","","",7,null],[12,"sip","","",7,null],[12,"keymasters","","",7,null],[12,"irc","","",7,null],[12,"twitter","","",7,null],[12,"facebook","","",7,null],[12,"google","","",7,null],[12,"identica","","",7,null],[12,"foursquare","","",7,null],[12,"email","","",7,null],[12,"ml","","",7,null],[12,"jabber","","",7,null],[12,"issue_mail","","",7,null],[3,"Feed","","",null,null],[12,"type_","","",8,null],[12,"url","","",8,null],[3,"Feeds","","",null,null],[12,"blog","","",9,null],[12,"wiki","","",9,null],[12,"calendar","","",9,null],[12,"flickr","","",9,null],[3,"Cache","","",null,null],[12,"schedule","","",10,null],[3,"RadioShow","","",null,null],[12,"name","","",11,null],[12,"url","","",11,null],[12,"type_","","",11,null],[12,"start","","",11,null],[12,"end","","",11,null],[3,"Status","","The main Space API status object.",null,null],[12,"api","","",12,null],[12,"space","","",12,null],[12,"logo","","",12,null],[12,"url","","",12,null],[12,"location","","",12,null],[12,"contact","","",12,null],[12,"spacefed","","",12,null],[12,"projects","","",12,null],[12,"cam","","",12,null],[12,"feeds","","",12,null],[12,"events","","",12,null],[12,"radio_show","","",12,null],[12,"cache","","",12,null],[12,"issue_report_channels","","",12,null],[12,"state","","",12,null],[12,"sensors","","",12,null],[12,"extensions","","",12,null],[3,"StatusBuilder","","Builder for the `Status` object.",null,null],[5,"get_version","","Return own crate version. Used in API responses.",null,{"inputs":[],"output":{"name":"str"}}],[0,"sensors","","Module defining all sensor related structures.",null,null],[3,"PeopleNowPresentSensorTemplate","spaceapi::sensors","",null,null],[12,"location","","",13,null],[12,"name","","",13,null],[12,"names","","",13,null],[12,"description","","",13,null],[3,"TemperatureSensorTemplate","","",null,null],[12,"unit","","",14,null],[12,"location","","",14,null],[12,"name","","",14,null],[12,"description","","",14,null],[3,"PeopleNowPresentSensor","","",null,null],[12,"location","","",15,null],[12,"name","","",15,null],[12,"names","","",15,null],[12,"description","","",15,null],[12,"value","","",15,null],[3,"TemperatureSensor","","",null,null],[12,"unit","","",16,null],[12,"location","","",16,null],[12,"name","","",16,null],[12,"description","","",16,null],[12,"value","","",16,null],[3,"Sensors","","",null,null],[12,"people_now_present","","",17,null],[12,"temperature","","",17,null],[8,"SensorTemplate","","A trait for all possible sensor templates.",null,null],[10,"to_sensor","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"sensors"}],"output":null}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"peoplenowpresentsensortemplate"}}],[11,"to_sensor","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"sensors"}],"output":null}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"temperaturesensortemplate"}}],[11,"to_sensor","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"sensors"}],"output":null}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"peoplenowpresentsensor"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"peoplenowpresentsensor"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"peoplenowpresentsensor"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"temperaturesensor"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"temperaturesensor"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"temperaturesensor"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"sensors"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"sensors"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"sensors"}],"output":{"name":"bool"}}],[11,"default","spaceapi","",0,{"inputs":[],"output":{"name":"location"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"location"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"spacefed"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"spacefed"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"spacefed"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"spacefed"}],"output":{"name":"bool"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"icon"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"icon"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"icon"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"icon"}],"output":{"name":"bool"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"state"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"event"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"keymaster"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"keymaster"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"keymaster"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"keymaster"}],"output":{"name":"bool"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"googlecontact"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"googlecontact"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"googlecontact"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"googlecontact"}],"output":{"name":"bool"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"contact"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"contact"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"contact"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"contact"}],"output":{"name":"bool"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"feed"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"feed"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"feed"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"feed"}],"output":{"name":"bool"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"feeds"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"feeds"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"feeds"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"feeds"}],"output":{"name":"bool"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"cache"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"cache"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"cache"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"cache"}],"output":{"name":"bool"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"radioshow"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"radioshow"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"radioshow"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"radioshow"}],"output":{"name":"bool"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"status"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"status"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"new","","Create a new Status object with only the absolutely required fields.",12,{"inputs":[{"name":"s"},{"name":"s"},{"name":"s"},{"name":"location"},{"name":"contact"},{"name":"vec"}],"output":{"name":"status"}}],[11,"serialize","","",12,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",12,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"statusbuilder"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"statusbuilder"}}],[11,"new","","",19,{"inputs":[{"name":"s"}],"output":{"name":"statusbuilder"}}],[11,"logo","","",19,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"url","","",19,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"location","","",19,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"self"}}],[11,"contact","","",19,{"inputs":[{"name":"self"},{"name":"contact"}],"output":{"name":"self"}}],[11,"spacefed","","",19,{"inputs":[{"name":"self"},{"name":"spacefed"}],"output":{"name":"self"}}],[11,"add_event","","",19,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"self"}}],[11,"add_cam","","",19,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"feeds","","",19,{"inputs":[{"name":"self"},{"name":"feeds"}],"output":{"name":"self"}}],[11,"add_radio_show","","",19,{"inputs":[{"name":"self"},{"name":"radioshow"}],"output":{"name":"self"}}],[11,"add_project","","",19,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"add_issue_report_channel","","",19,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"add_extension","","Add an extension to the `Status` object.",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"self"}}],[11,"build","","",19,{"inputs":[{"name":"self"}],"output":{"name":"result"}}]],"paths":[[3,"Location"],[3,"Spacefed"],[3,"Icon"],[3,"State"],[3,"Event"],[3,"Keymaster"],[3,"GoogleContact"],[3,"Contact"],[3,"Feed"],[3,"Feeds"],[3,"Cache"],[3,"RadioShow"],[3,"Status"],[3,"PeopleNowPresentSensorTemplate"],[3,"TemperatureSensorTemplate"],[3,"PeopleNowPresentSensor"],[3,"TemperatureSensor"],[3,"Sensors"],[8,"SensorTemplate"],[3,"StatusBuilder"]]};
searchIndex["spaceapi_server"] = {"doc":"The main entry point for the Space API server.","items":[[6,"HttpResult","spaceapi_server","Result type often returned from methods that can have hyper `Error`s.",null,null],[3,"Listening","","A listening server, which can later be closed.",null,null],[12,"socket","","The socket addresses that the server is bound to.",0,null],[3,"SpaceapiServer","","A Space API server instance.",null,null],[3,"SpaceapiServerBuilder","","",null,null],[4,"SpaceapiServerError","","",null,null],[13,"Redis","","",1,null],[13,"R2d2","","",1,null],[13,"IoError","","",1,null],[13,"Message","","",1,null],[5,"get_version","","Return own crate version. Used in API responses.",null,{"inputs":[],"output":{"name":"str"}}],[11,"new","","",2,{"inputs":[{"name":"status"}],"output":{"name":"spaceapiserverbuilder"}}],[11,"redis_connection_info","","",2,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"self"}}],[11,"add_status_modifier","","",2,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"self"}}],[11,"add_sensor","","Add a new sensor.",2,{"inputs":[{"name":"self"},{"name":"t"},{"name":"string"}],"output":{"name":"self"}}],[11,"build","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serve","","Start a HTTP server listening on `self.host:self.port`.",3,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"httpresult"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"rediserror"}],"output":{"name":"spaceapiservererror"}}],[11,"from","","",1,{"inputs":[{"name":"initializationerror"}],"output":{"name":"spaceapiservererror"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"spaceapiservererror"}}],[11,"from","","",1,{"inputs":[{"name":"cow"}],"output":{"name":"spaceapiservererror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",1,{"inputs":[{"name":"string"}],"output":{"name":"spaceapiservererror"}}],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"spaceapiservererror"}}],[0,"sensors","","Sensor related stuff.",null,null],[3,"SensorSpec","spaceapi_server::sensors","A specification of a sensor.",null,null],[12,"template","","",4,null],[12,"data_key","","",4,null],[4,"SensorError","","A `SensorError` wraps problems that can occur when reading or updating sensor values.",null,null],[13,"UnknownSensor","","",5,null],[13,"Redis","","",5,null],[13,"R2d2","","",5,null],[6,"SafeSensorSpecs","","A vector of sensor specs, wrapped in an Arc. Safe for use in multithreaded situations.",null,null],[8,"ErrorDisplay","","",null,null],[10,"error_fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"ErrorDescription","","",null,null],[10,"error_desc","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[8,"ErrorCause","","",null,null],[10,"error_cause","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",5,{"inputs":[{"name":"string"}],"output":{"name":"sensorerror"}}],[11,"from","","",5,{"inputs":[{"name":"rediserror"}],"output":{"name":"sensorerror"}}],[11,"from","","",5,{"inputs":[{"name":"gettimeout"}],"output":{"name":"sensorerror"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_sensor_value","","Retrieve sensor value from Redis.",4,{"inputs":[{"name":"self"},{"name":"pool"}],"output":{"name":"result"}}],[11,"set_sensor_value","","Set sensor value in Redis.",4,{"inputs":[{"name":"self"},{"name":"pool"},{"name":"str"}],"output":{"name":"result"}}],[0,"modifiers","spaceapi_server","",null,null],[3,"StateFromPeopleNowPresent","spaceapi_server::modifiers","This modifier updates the opening state based on the people now present sensor.",null,null],[8,"StatusModifier","","`StatusModifier`s are used to modify the status",null,null],[10,"modify","","Called after all registered sensors are read",9,{"inputs":[{"name":"self"},{"name":"status"}],"output":null}],[11,"modify","","",10,{"inputs":[{"name":"self"},{"name":"status"}],"output":null}],[11,"fmt","spaceapi_server","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",0,null],[11,"close","","Warning: This function doesn't work. The server remains listening after you called it. See https://github.com/hyperium/hyper/issues/338 for more details.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}]],"paths":[[3,"Listening"],[4,"SpaceapiServerError"],[3,"SpaceapiServerBuilder"],[3,"SpaceapiServer"],[3,"SensorSpec"],[4,"SensorError"],[8,"ErrorDisplay"],[8,"ErrorDescription"],[8,"ErrorCause"],[8,"StatusModifier"],[3,"StateFromPeopleNowPresent"]]};
searchIndex["syn"] = {"doc":"","items":[[3,"Attribute","syn","Doc-comments are promoted to attributes that have `is_sugared_doc` = true",null,null],[12,"style","","",0,null],[12,"value","","",0,null],[12,"is_sugared_doc","","",0,null],[3,"Field","","A field of a struct or enum variant.",null,null],[12,"ident","","Name of the field, if any.",1,null],[12,"vis","","Visibility of the field.",1,null],[12,"attrs","","Attributes tagged on the field.",1,null],[12,"ty","","Type of the field.",1,null],[3,"Variant","","An enum variant.",null,null],[12,"ident","","Name of the variant.",2,null],[12,"attrs","","Attributes tagged on the variant.",2,null],[12,"data","","Type of variant.",2,null],[12,"discriminant","","Explicit discriminant, e.g. `Foo = 1`",2,null],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lifetimes","","",3,null],[12,"ty_params","","",3,null],[12,"where_clause","","",3,null],[3,"Lifetime","","",null,null],[12,"ident","","",4,null],[3,"LifetimeDef","","A lifetime definition, e.g. `'a: 'b+'c+'d`",null,null],[12,"attrs","","",5,null],[12,"lifetime","","",5,null],[12,"bounds","","",5,null],[3,"TyParam","","A generic type parameter, e.g. `T: Into<String>`.",null,null],[12,"attrs","","",6,null],[12,"ident","","",6,null],[12,"bounds","","",6,null],[12,"default","","",6,null],[3,"WhereBoundPredicate","","A type bound.",null,null],[12,"bound_lifetimes","","Any lifetimes from a `for` binding",7,null],[12,"bounded_ty","","The type being bounded",7,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",7,null],[3,"WhereClause","","A `where` clause in a definition",null,null],[12,"predicates","","",8,null],[3,"WhereEqPredicate","","An equality predicate (unsupported).",null,null],[12,"lhs_ty","","",9,null],[12,"rhs_ty","","",9,null],[3,"WhereRegionPredicate","","A lifetime predicate.",null,null],[12,"lifetime","","",10,null],[12,"bounds","","",10,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Turbofish","","Returned by `TyGenerics::as_turbofish`.",null,null],[3,"TyGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Ident","","",null,null],[3,"ByteStrLit","","",null,null],[12,"value","","",11,null],[12,"style","","",11,null],[3,"FloatLit","","",null,null],[12,"value","","",12,null],[12,"suffix","","",12,null],[3,"IntLit","","",null,null],[12,"value","","",13,null],[12,"suffix","","",13,null],[3,"StrLit","","",null,null],[12,"value","","",14,null],[12,"style","","",14,null],[3,"Delimited","","",null,null],[12,"delim","","The type of delimiter",15,null],[12,"tts","","The delimited sequence of token trees",15,null],[3,"Mac","","Represents a macro invocation. The Path indicates which macro is being invoked, and the vector of token-trees contains the source of the macro invocation.",null,null],[12,"path","","",16,null],[12,"tts","","",16,null],[3,"DeriveInput","","Struct or enum sent to a `proc_macro_derive` macro.",null,null],[12,"ident","","Name of the struct or enum.",17,null],[12,"vis","","Visibility of the struct or enum.",17,null],[12,"attrs","","Attributes tagged on the whole struct or enum.",17,null],[12,"generics","","Generics required to complete the definition.",17,null],[12,"body","","Data within the struct or enum.",17,null],[3,"AngleBracketedParameterData","","A path like `Foo<'a, T>`",null,null],[12,"lifetimes","","The lifetime parameters for this path segment.",18,null],[12,"types","","The type parameters for this path segment, if present.",18,null],[12,"bindings","","Bindings (equality constraints) on associated types, if present.",18,null],[3,"BareFnArg","","An argument in a function type.",null,null],[12,"name","","",19,null],[12,"ty","","",19,null],[3,"BareFnTy","","",null,null],[12,"unsafety","","",20,null],[12,"abi","","",20,null],[12,"lifetimes","","",20,null],[12,"inputs","","",20,null],[12,"output","","",20,null],[12,"variadic","","",20,null],[3,"MutTy","","",null,null],[12,"ty","","",21,null],[12,"mutability","","",21,null],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -> C`",null,null],[12,"inputs","","`(A, B)`",22,null],[12,"output","","`C`",22,null],[3,"Path","","A \"Path\" is essentially Rust's notion of a name.",null,null],[12,"global","","A `::foo` path, is relative to the crate root rather than current module (like paths in an import).",23,null],[12,"segments","","The segments in the path: the things separated by `::`.",23,null],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of types.",null,null],[12,"ident","","The identifier portion of this path segment.",24,null],[12,"parameters","","Type/lifetime parameters attached to this path. They come in two flavors: `Path<A,B,C>` and `Path(A,B) -> C`. Note that this is more than just simple syntactic sugar; the use of parens affects the region binding rules, so we preserve the distinction.",24,null],[3,"PolyTraitRef","","",null,null],[12,"bound_lifetimes","","The `'a` in `<'a> Foo<&'a T>`",25,null],[12,"trait_ref","","The `Foo<&'a T>` in `<'a> Foo<&'a T>`",25,null],[3,"QSelf","","The explicit Self type in a \"qualified path\". The actual path, including the trait and the associated item, is stored separately. `position` represents the index of the associated item qualified with this Self type.",null,null],[12,"ty","","",26,null],[12,"position","","",26,null],[3,"TypeBinding","","Bind a type to an associated type: `A=Foo`.",null,null],[12,"ident","","",27,null],[12,"ty","","",27,null],[4,"AttrStyle","","Distinguishes between Attributes that decorate items and Attributes that are contained as statements within items. These two cases need to be distinguished for pretty-printing.",null,null],[13,"Outer","","Attribute of the form `#![...]`.",28,null],[13,"Inner","","Attribute of the form `#[...]`.",28,null],[4,"MetaItem","","A compile-time attribute item.",null,null],[13,"Word","","Word meta item.",29,null],[13,"List","","List meta item.",29,null],[13,"NameValue","","Name-value meta item.",29,null],[4,"NestedMetaItem","","Possible values inside of compile-time attribute lists.",null,null],[13,"MetaItem","","A full `MetaItem`.",30,null],[13,"Literal","","A Rust literal.",30,null],[4,"ConstExpr","","",null,null],[13,"Call","","A function call",31,null],[13,"Binary","","A binary operation (For example: `a + b`, `a * b`)",31,null],[13,"Unary","","A unary operation (For example: `!x`, `*x`)",31,null],[13,"Lit","","A literal (For example: `1`, `\"foo\"`)",31,null],[13,"Cast","","A cast (`foo as f64`)",31,null],[13,"Path","","Variable reference, possibly containing `::` and/or type parameters, e.g. foo::bar::.",31,null],[13,"Index","","An indexing operation (`foo[2]`)",31,null],[13,"Paren","","No-op: used solely so we can pretty-print faithfully",31,null],[13,"Other","","If compiling with full support for expression syntax, any expression is allowed",31,null],[4,"VariantData","","Data stored within an enum variant or struct.",null,null],[13,"Struct","","Struct variant, e.g. `Point { x: f64, y: f64 }`.",32,null],[13,"Tuple","","Tuple variant, e.g. `Some(T)`.",32,null],[13,"Unit","","Unit variant, e.g. `None`.",32,null],[4,"Visibility","","Visibility level of an item.",null,null],[13,"Public","","Public, i.e. `pub`.",33,null],[13,"Crate","","Crate-visible, i.e. `pub(crate)`.",33,null],[13,"Restricted","","Restricted, e.g. `pub(some::module)`.",33,null],[13,"Inherited","","Inherited, i.e. private.",33,null],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the modifier is `Maybe`. Negative bounds should also be handled here.",null,null],[13,"None","","",34,null],[13,"Maybe","","",34,null],[4,"TyParamBound","","The AST represents all type param bounds as types. `typeck::collect::compute_bounds` matches these against the \"special\" built-in traits (see `middle::lang_items`) and detects Copy, Send and Sync.",null,null],[13,"Trait","","",35,null],[13,"Region","","",35,null],[4,"WherePredicate","","A single predicate in a `where` clause",null,null],[13,"BoundPredicate","","A type binding, e.g. `for<'c> Foo: Send+Clone+'c`",36,null],[13,"RegionPredicate","","A lifetime predicate, e.g. `'a: 'b+'c`",36,null],[13,"EqPredicate","","An equality predicate (unsupported)",36,null],[4,"FloatTy","","",null,null],[13,"F32","","",37,null],[13,"F64","","",37,null],[13,"Unsuffixed","","",37,null],[4,"IntTy","","",null,null],[13,"Isize","","",38,null],[13,"I8","","",38,null],[13,"I16","","",38,null],[13,"I32","","",38,null],[13,"I64","","",38,null],[13,"Usize","","",38,null],[13,"U8","","",38,null],[13,"U16","","",38,null],[13,"U32","","",38,null],[13,"U64","","",38,null],[13,"Unsuffixed","","",38,null],[4,"Lit","","Literal kind.",null,null],[13,"Str","","A string literal (`\"foo\"`)",39,null],[13,"ByteStr","","A byte string (`b\"foo\"`)",39,null],[13,"Byte","","A byte char (`b'f'`)",39,null],[13,"Char","","A character literal (`'a'`)",39,null],[13,"Int","","An integer literal (`1`)",39,null],[13,"Float","","A float literal (`1f64` or `1E10f64` or `1.0E10`)",39,null],[13,"Bool","","A boolean literal",39,null],[4,"StrStyle","","",null,null],[13,"Cooked","","A regular string, like `\"foo\"`",40,null],[13,"Raw","","A raw string, like `r##\"foo\"##`",40,null],[4,"BinOpToken","","",null,null],[13,"Plus","","",41,null],[13,"Minus","","",41,null],[13,"Star","","",41,null],[13,"Slash","","",41,null],[13,"Percent","","",41,null],[13,"Caret","","",41,null],[13,"And","","",41,null],[13,"Or","","",41,null],[13,"Shl","","",41,null],[13,"Shr","","",41,null],[4,"DelimToken","","A delimiter token",null,null],[13,"Paren","","A round parenthesis: `(` or `)`",42,null],[13,"Bracket","","A square bracket: `[` or `]`",42,null],[13,"Brace","","A curly brace: `{` or `}`",42,null],[4,"Token","","",null,null],[13,"Eq","","",43,null],[13,"Lt","","",43,null],[13,"Le","","",43,null],[13,"EqEq","","",43,null],[13,"Ne","","",43,null],[13,"Ge","","",43,null],[13,"Gt","","",43,null],[13,"AndAnd","","",43,null],[13,"OrOr","","",43,null],[13,"Not","","",43,null],[13,"Tilde","","",43,null],[13,"BinOp","","",43,null],[13,"BinOpEq","","",43,null],[13,"At","","",43,null],[13,"Dot","","",43,null],[13,"DotDot","","",43,null],[13,"DotDotDot","","",43,null],[13,"Comma","","",43,null],[13,"Semi","","",43,null],[13,"Colon","","",43,null],[13,"ModSep","","",43,null],[13,"RArrow","","",43,null],[13,"LArrow","","",43,null],[13,"FatArrow","","",43,null],[13,"Pound","","",43,null],[13,"Dollar","","",43,null],[13,"Question","","",43,null],[13,"Literal","","",43,null],[13,"Ident","","",43,null],[13,"Underscore","","",43,null],[13,"Lifetime","","",43,null],[13,"DocComment","","",43,null],[4,"TokenTree","","When the main rust parser encounters a syntax-extension invocation, it parses the arguments to the invocation as a token-tree. This is a very loose structure, such that all sorts of different AST-fragments can be passed to syntax extensions using a uniform type.",null,null],[13,"Token","","A single token",44,null],[13,"Delimited","","A delimited sequence of token trees",44,null],[4,"Body","","Body of a derived struct or enum.",null,null],[13,"Enum","","It's an enum.",45,null],[13,"Struct","","It's a struct.",45,null],[4,"BinOp","","",null,null],[13,"Add","","The `+` operator (addition)",46,null],[13,"Sub","","The `-` operator (subtraction)",46,null],[13,"Mul","","The `*` operator (multiplication)",46,null],[13,"Div","","The `/` operator (division)",46,null],[13,"Rem","","The `%` operator (modulus)",46,null],[13,"And","","The `&&` operator (logical and)",46,null],[13,"Or","","The `||` operator (logical or)",46,null],[13,"BitXor","","The `^` operator (bitwise xor)",46,null],[13,"BitAnd","","The `&` operator (bitwise and)",46,null],[13,"BitOr","","The `|` operator (bitwise or)",46,null],[13,"Shl","","The `<<` operator (shift left)",46,null],[13,"Shr","","The `>>` operator (shift right)",46,null],[13,"Eq","","The `==` operator (equality)",46,null],[13,"Lt","","The `<` operator (less than)",46,null],[13,"Le","","The `<=` operator (less than or equal to)",46,null],[13,"Ne","","The `!=` operator (not equal to)",46,null],[13,"Ge","","The `>=` operator (greater than or equal to)",46,null],[13,"Gt","","The `>` operator (greater than)",46,null],[4,"UnOp","","",null,null],[13,"Deref","","The `*` operator for dereferencing",47,null],[13,"Not","","The `!` operator for logical inversion",47,null],[13,"Neg","","The `-` operator for negation",47,null],[4,"Abi","","",null,null],[13,"Named","","",48,null],[13,"Rust","","",48,null],[4,"FunctionRetTy","","",null,null],[13,"Default","","Return type is not specified.",49,null],[13,"Ty","","Everything else",49,null],[4,"Mutability","","",null,null],[13,"Mutable","","",50,null],[13,"Immutable","","",50,null],[4,"PathParameters","","Parameters of a path segment.",null,null],[13,"AngleBracketed","","The `<'a, A, B, C>` in `foo::bar::baz::<'a, A, B, C>`",51,null],[13,"Parenthesized","","The `(A, B)` and `C` in `Foo(A, B) -> C`",51,null],[4,"Ty","","The different kinds of types recognized by the compiler",null,null],[13,"Slice","","A variable-length array (`[T]`)",52,null],[13,"Array","","A fixed length array (`[T; n]`)",52,null],[13,"Ptr","","A raw pointer (`*const T` or `*mut T`)",52,null],[13,"Rptr","","A reference (`&'a T` or `&'a mut T`)",52,null],[13,"BareFn","","A bare function (e.g. `fn(usize) -> bool`)",52,null],[13,"Never","","The never type (`!`)",52,null],[13,"Tup","","A tuple (`(A, B, C, D, ...)`)",52,null],[13,"Path","","A path (`module::module::...::Type`), optionally \"qualified\", e.g. `<Vec<T> as SomeTrait>::SomeType`.",52,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",52,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",52,null],[13,"Paren","","No-op; kept solely so that we can pretty-print faithfully",52,null],[13,"Infer","","TyKind::Infer means the type should be inferred instead of it having been specified. This can appear anywhere in a type.",52,null],[13,"Mac","","A macro in the type position.",52,null],[4,"Unsafety","","",null,null],[13,"Unsafe","","",53,null],[13,"Normal","","",53,null],[5,"parse_derive_input","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_type","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_path","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_where_clause","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_token_trees","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_ident","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_ty_param_bound","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_outer_attr","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",29,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",30,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"name","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"attrstyle"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":{"name":"bool"}}],[11,"hash","","",28,null],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"metaitem"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"hash","","",29,null],[11,"name","","Name of the item.",29,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"nestedmetaitem"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"bool"}}],[11,"hash","","",30,null],[11,"to_tokens","","",31,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"constexpr"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":{"name":"bool"}}],[11,"hash","","",31,null],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",32,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",33,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"variantdata"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"hash","","",32,null],[11,"fields","","Slice containing the fields stored in the variant.",32,null],[11,"fields_mut","","Mutable slice containing the fields stored in the variant.",32,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"hash","","",33,null],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",54,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",55,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",56,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",5,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",6,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",35,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",8,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",36,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",7,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",10,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",9,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"generics"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"generics"}}],[11,"hash","","",3,null],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",3,null],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",55,{"inputs":[{"name":"self"}],"output":{"name":"turbofish"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"new","","",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"new","","",5,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"typaram"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"from","","",6,{"inputs":[{"name":"ident"}],"output":{"name":"self"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"typarambound"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"hash","","",35,null],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"traitboundmodifier"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"hash","","",34,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"whereclause"}}],[11,"hash","","",8,null],[11,"none","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicate"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"hash","","",36,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"whereboundpredicate"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"whereregionpredicate"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"whereeqpredicate"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"to_tokens","","",57,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"hash","","",57,null],[11,"cmp","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"option"}}],[11,"lt","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"le","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"gt","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"ge","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"new","","",57,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"as_ref","","",57,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_tokens","","",39,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"hash","","",39,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"strstyle"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"hash","","",40,null],[11,"from","","",39,{"inputs":[{"name":"string"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"str"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"vec"}],"output":{"name":"lit"}}],[11,"from","","",39,null],[11,"from","","",39,{"inputs":[{"name":"char"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"bool"}],"output":{"name":"lit"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"intty"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"intty"}],"output":{"name":"bool"}}],[11,"hash","","",38,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"floatty"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"floatty"}],"output":{"name":"bool"}}],[11,"hash","","",37,null],[11,"from","","",39,{"inputs":[{"name":"isize"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i8"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i16"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i32"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i64"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"usize"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u8"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u16"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u32"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u64"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"f32"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"f64"}],"output":{"name":"lit"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"strlit"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bytestrlit"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"intlit"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"floatlit"}}],[11,"to_tokens","","",16,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",44,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",15,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",43,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",41,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"mac"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"hash","","",44,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"delimited"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"hash","","",43,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"binoptoken"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"binoptoken"}],"output":{"name":"bool"}}],[11,"hash","","",41,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"delimtoken"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"delimtoken"}],"output":{"name":"bool"}}],[11,"hash","","",42,null],[11,"to_tokens","","",17,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"deriveinput"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"body"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"hash","","",45,null],[11,"op","","",46,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"assign_op","","",46,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_tokens","","",46,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"op","","",47,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_tokens","","",47,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"binop"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"binop"}],"output":{"name":"bool"}}],[11,"hash","","",46,null],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"unop"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"hash","","",47,null],[11,"to_tokens","","",52,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",50,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",23,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",24,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",51,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",18,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",27,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",22,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",25,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",20,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",19,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",53,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",48,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"hash","","",52,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"mutty"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"hash","","",21,null],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"mutability"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"bool"}}],[11,"hash","","",50,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"hash","","",23,null],[11,"from","","",23,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"pathsegment"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"hash","","",24,null],[11,"from","","",24,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"pathparameters"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"hash","","",51,null],[11,"none","","",51,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"anglebracketedparameterdata"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"anglebracketedparameterdata"}}],[11,"hash","","",18,null],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"typebinding"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"hash","","",27,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"parenthesizedparameterdata"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"hash","","",22,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"polytraitref"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"hash","","",25,null],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"qself"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"hash","","",26,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"barefnty"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"hash","","",20,null],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"unsafety"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"unsafety"}],"output":{"name":"bool"}}],[11,"hash","","",53,null],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"abi"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"hash","","",48,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"barefnarg"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"functionretty"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"hash","","",49,null],[0,"visit","","AST walker. Each overridden visit method has full control over what happens with its node, it can do its own traversal of the node's children, call `visit::walk_*` to apply the default traversal algorithm, or prevent deeper traversal by doing nothing.",null,null],[5,"walk_opt_ident","syn::visit","",null,{"inputs":[{"name":"v"},{"name":"option"}],"output":null}],[5,"walk_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"walk_poly_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[5,"walk_derive_input","","",null,{"inputs":[{"name":"v"},{"name":"deriveinput"}],"output":null}],[5,"walk_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"},{"name":"generics"}],"output":null}],[5,"walk_ty","","",null,{"inputs":[{"name":"v"},{"name":"ty"}],"output":null}],[5,"walk_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"walk_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"pathsegment"}],"output":null}],[5,"walk_path_parameters","","",null,{"inputs":[{"name":"v"},{"name":"pathparameters"}],"output":null}],[5,"walk_assoc_type_binding","","",null,{"inputs":[{"name":"v"},{"name":"typebinding"}],"output":null}],[5,"walk_ty_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typarambound"}],"output":null}],[5,"walk_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"walk_fn_ret_ty","","",null,{"inputs":[{"name":"v"},{"name":"functionretty"}],"output":null}],[5,"walk_variant_data","","",null,{"inputs":[{"name":"v"},{"name":"variantdata"}],"output":null}],[5,"walk_field","","",null,{"inputs":[{"name":"v"},{"name":"field"}],"output":null}],[5,"walk_const_expr","","",null,{"inputs":[{"name":"v"},{"name":"constexpr"}],"output":null}],[5,"walk_mac","","",null,{"inputs":[{"name":"v"},{"name":"mac"}],"output":null}],[8,"Visitor","","Each method of the Visitor trait is a hook to be potentially overridden.  Each method's default implementation recursively visits the substructure of the input via the corresponding `walk` method; e.g. the `visit_mod` method by default calls `visit::walk_mod`.",null,null],[11,"visit_ident","","",58,{"inputs":[{"name":"self"},{"name":"ident"}],"output":null}],[11,"visit_derive_input","","",58,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":null}],[11,"visit_ty","","",58,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_generics","","",58,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_ty_param_bound","","",58,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":null}],[11,"visit_poly_trait_ref","","",58,{"inputs":[{"name":"self"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_variant_data","","",58,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"ident"},{"name":"generics"}],"output":null}],[11,"visit_field","","",58,{"inputs":[{"name":"self"},{"name":"field"}],"output":null}],[11,"visit_variant","","",58,{"inputs":[{"name":"self"},{"name":"variant"},{"name":"generics"}],"output":null}],[11,"visit_lifetime","","",58,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",58,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_path","","",58,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"visit_path_segment","","",58,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":null}],[11,"visit_path_parameters","","",58,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":null}],[11,"visit_assoc_type_binding","","",58,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":null}],[11,"visit_attribute","","",58,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_fn_ret_ty","","",58,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":null}],[11,"visit_const_expr","","",58,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":null}],[11,"visit_lit","","",58,{"inputs":[{"name":"self"},{"name":"lit"}],"output":null}],[11,"visit_mac","","",58,{"inputs":[{"name":"self"},{"name":"mac"}],"output":null}],[0,"parse","syn","This module contains a set of exported nom parsers which can be used to parse custom grammars when used alongside the `synom` crate.",null,null],[4,"IResult","syn::parse","The result of a parser.",null,null],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",59,null],[13,"Error","","Parsing failed.",59,null],[5,"lit","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"string","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"byte_string","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"byte","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"character","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"float","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"int","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"boolean","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"ty","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"path","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"tt","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"ident","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"lifetime","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",59,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"o"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"iresult"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Attribute"],[3,"Field"],[3,"Variant"],[3,"Generics"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"TyParam"],[3,"WhereBoundPredicate"],[3,"WhereClause"],[3,"WhereEqPredicate"],[3,"WhereRegionPredicate"],[3,"ByteStrLit"],[3,"FloatLit"],[3,"IntLit"],[3,"StrLit"],[3,"Delimited"],[3,"Mac"],[3,"DeriveInput"],[3,"AngleBracketedParameterData"],[3,"BareFnArg"],[3,"BareFnTy"],[3,"MutTy"],[3,"ParenthesizedParameterData"],[3,"Path"],[3,"PathSegment"],[3,"PolyTraitRef"],[3,"QSelf"],[3,"TypeBinding"],[4,"AttrStyle"],[4,"MetaItem"],[4,"NestedMetaItem"],[4,"ConstExpr"],[4,"VariantData"],[4,"Visibility"],[4,"TraitBoundModifier"],[4,"TyParamBound"],[4,"WherePredicate"],[4,"FloatTy"],[4,"IntTy"],[4,"Lit"],[4,"StrStyle"],[4,"BinOpToken"],[4,"DelimToken"],[4,"Token"],[4,"TokenTree"],[4,"Body"],[4,"BinOp"],[4,"UnOp"],[4,"Abi"],[4,"FunctionRetTy"],[4,"Mutability"],[4,"PathParameters"],[4,"Ty"],[4,"Unsafety"],[3,"ImplGenerics"],[3,"TyGenerics"],[3,"Turbofish"],[3,"Ident"],[8,"Visitor"],[4,"IResult"]]};
searchIndex["synom"] = {"doc":"Adapted from `nom` by removing the `IResult::Incomplete` variant which:","items":[[4,"IResult","synom","The result of a parser.",null,null],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",0,null],[13,"Error","","Parsing failed.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"iresult"}}],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"o"}}],[14,"punct","","Parse a piece of punctuation like \"+\" or \"+=\".",null,null],[14,"keyword","","Parse a keyword like \"fn\" or \"struct\".",null,null],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",null,null],[14,"opt_vec","","Turn a failed parse into an empty vector. The argument parser must itself return a vector.",null,null],[14,"epsilon","","Parses nothing and always succeeds.",null,null],[14,"separated_list","","Zero or more values separated by some separator. Does not allow a trailing seperator.",null,null],[14,"terminated_list","","Zero or more values separated by some separator. A trailing separator is allowed.",null,null],[14,"named","","Define a function from a parser combination.",null,null],[14,"call","","Invoke the given parser function with the passed in arguments.",null,null],[14,"map","","Transform the result of a parser by applying a function or closure.",null,null],[14,"not","","Parses successfully if the given parser fails to parse. Does not consume any of the input.",null,null],[14,"cond","","Conditionally execute the given parser.",null,null],[14,"cond_reduce","","Fail to parse if condition is false, otherwise parse the given parser.",null,null],[14,"preceded","","Parse two things, returning the value of the second.",null,null],[14,"terminated","","Parse two things, returning the value of the first.",null,null],[14,"many0","","Parse zero or more values using the given parser.",null,null],[14,"peek","","Parse a value without consuming it from the input data.",null,null],[14,"take_until","","Parse the part of the input up to but not including the given string. Fail to parse if the given string is not present in the input.",null,null],[14,"tag","","Parse the given string from exactly the current position in the input. You almost always want `punct!` or `keyword!` instead of this.",null,null],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",null,null],[14,"value","","Produce the given value without parsing anything. Useful as an argument to `switch!`.",null,null],[14,"delimited","","Value surrounded by a pair of delimiters.",null,null],[14,"separated_nonempty_list","","One or more values separated by some separator. Does not allow a trailing separator.",null,null],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",null,null],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",null,null],[14,"do_parse","","Run a series of parsers, one after another, optionally assigning the results a name. Fail if any of the parsers fails.",null,null]],"paths":[[4,"IResult"]]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library implementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where nanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any adjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example, for U.S. Pacific Daylight Time, the value is -76060 = -25200.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 109 - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and nanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter in nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter in seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",4,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 2^63 microseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 2^63 nanoseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"inputs":[{"name":"stdduration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"neg","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"outofrangeerror"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"new","","",0,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of `self` to the value of `later`.",6,{"inputs":[{"name":"self"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"steadytime"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"add","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C, in the local timezone.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is compatible with ISO 8601.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["traitobject"] = {"doc":"traitobject","items":[[5,"data","traitobject","Get the data pointer from this trait object.",null,null],[5,"data_mut","","Get the data pointer from this trait object, mutably.",null,null],[8,"Trait","","A trait implemented for all trait objects.",null,null]],"paths":[]};
searchIndex["typeable"] = {"doc":"Exposes `Typeable`, which exposes the `get_type` method, which gives the `TypeId` of any 'static type.","items":[[8,"Typeable","typeable","Universal mixin trait for adding a `get_type` method.",null,null],[11,"get_type","","Get the `TypeId` of this object.",0,{"inputs":[{"name":"self"}],"output":{"name":"typeid"}}]],"paths":[[8,"Typeable"]]};
searchIndex["typemap"] = {"doc":"A type-based key value store where one value type is allowed for each key.","items":[[3,"TypeMap","typemap","A map keyed by types.",null,null],[3,"OccupiedEntry","","A view onto an occupied entry in a TypeMap.",null,null],[3,"VacantEntry","","A view onto an unoccupied entry in a TypeMap.",null,null],[4,"Entry","","A view onto an entry in a TypeMap.",null,null],[13,"Occupied","","A view onto an occupied entry in a TypeMap.",0,null],[13,"Vacant","","A view onto an unoccupied entry in a TypeMap.",0,null],[6,"SendMap","","A version of `TypeMap` containing only `Send` types.",null,null],[6,"SyncMap","","A version of `TypeMap` containing only `Sync` types.",null,null],[6,"ShareMap","","A version of `TypeMap` containing only `Send + Sync` types.",null,null],[6,"CloneMap","","A version of `TypeMap` containing only `Clone` types.",null,null],[6,"ShareCloneMap","","A version of `TypeMap` containing only `Clone + Send + Sync` types.",null,null],[6,"DebugMap","","A version of `TypeMap` containing only `Debug` types.",null,null],[6,"ShareDebugMap","","A version of `TypeMap` containing only `Debug + Send + Sync` types.",null,null],[8,"CloneAny","","A marker trait meant for use as the `A` parameter in `TypeMap`.",null,null],[8,"DebugAny","","A marker trait meant for use as the `A` parameter in `TypeMap`.",null,null],[8,"Key","","This trait defines the relationship between keys and values in a TypeMap.",null,null],[16,"Value","","The value type associated with this key type.",1,null],[11,"default","","",2,{"inputs":[],"output":{"name":"typemap"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"typemap"}}],[11,"new","","Create a new, empty TypeMap.",2,{"inputs":[],"output":{"name":"typemap"}}],[11,"custom","","Create a new, empty TypeMap.",2,{"inputs":[],"output":{"name":"typemap"}}],[11,"insert","","Insert a value into the map with a specified key type.",2,null],[11,"get","","Find a value in the map and get a reference to it.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_mut","","Find a value in the map and get a mutable reference to it.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"contains","","Check if a key has an associated value stored in the map.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remove","","Remove a value from the map.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"entry","","Get the given key's corresponding entry in the map for in-place manipulation.",2,{"inputs":[{"name":"self"}],"output":{"name":"entry"}}],[11,"data","","Read the underlying HashMap",2,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"data_mut","","Get a mutable reference to the underlying HashMap",2,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"len","","Get the number of values stored in the map.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Return true if the map contains no values.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Remove all entries from the map.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",0,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",0,null],[11,"get","","Get a reference to the entry's value.",3,null],[11,"get_mut","","Get a mutable reference to the entry's value.",3,null],[11,"into_mut","","Transform the entry into a mutable reference with the same lifetime as the map.",3,null],[11,"insert","","Set the entry's value and return the previous value.",3,null],[11,"remove","","Move the entry's value out of the map, consuming the entry.",3,null],[11,"insert","","Set the entry's value and return a mutable reference to it.",4,null]],"paths":[[4,"Entry"],[8,"Key"],[3,"TypeMap"],[3,"OccupiedEntry"],[3,"VacantEntry"]]};
searchIndex["unicase"] = {"doc":"Case","items":[[3,"UniCase","unicase","Case Insensitive wrapper of strings.",null,null],[12,"0","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"unicase"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"s2"}],"output":{"name":"bool"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}]],"paths":[[3,"UniCase"]]};
searchIndex["unicode_bidi"] = {"doc":"This crate implements the [Unicode Bidirectional Algorithm][tr9] for display of mixed right-to-left and left-to-right text.  It is written in safe Rust, compatible with the current stable release.","items":[[3,"ParagraphInfo","unicode_bidi","Bidi information about a single paragraph",null,null],[12,"range","","The paragraphs boundaries within the text, as byte indices.",0,null],[12,"level","","The paragraph embedding level.",0,null],[3,"InitialInfo","","Initial bidi information of the text",null,null],[12,"text","","The text",1,null],[12,"original_classes","","The BidiClass of the character at each byte in the text. If a character is multiple bytes, its class will appear multiple times in the vector.",1,null],[12,"paragraphs","","The boundaries and level of each paragraph within the text.",1,null],[3,"BidiInfo","","Bidi information of the text",null,null],[12,"text","","The text",2,null],[12,"original_classes","","The BidiClass of the character at each byte in the text.",2,null],[12,"levels","","The directional embedding level of each byte in the text.",2,null],[12,"paragraphs","","The boundaries and paragraph embedding level of each paragraph within the text.",2,null],[4,"BidiClass","","Represents values of the Unicode character property Bidi_Class, also known as the bidirectional character type.",null,null],[13,"AL","","",3,null],[13,"AN","","",3,null],[13,"B","","",3,null],[13,"BN","","",3,null],[13,"CS","","",3,null],[13,"EN","","",3,null],[13,"ES","","",3,null],[13,"ET","","",3,null],[13,"FSI","","",3,null],[13,"L","","",3,null],[13,"LRE","","",3,null],[13,"LRI","","",3,null],[13,"LRO","","",3,null],[13,"NSM","","",3,null],[13,"ON","","",3,null],[13,"PDF","","",3,null],[13,"PDI","","",3,null],[13,"R","","",3,null],[13,"RLE","","",3,null],[13,"RLI","","",3,null],[13,"RLO","","",3,null],[13,"S","","",3,null],[13,"WS","","",3,null],[5,"bidi_class","","Find the BidiClass of a single char.",null,{"inputs":[{"name":"char"}],"output":{"name":"bidiclass"}}],[0,"deprecated","","This module holds deprecated assets only.",null,null],[5,"visual_runs","unicode_bidi::deprecated","Find the level runs within a line and return them in visual order.",null,null],[0,"format_chars","unicode_bidi","Directional Formatting Characters",null,null],[17,"ALM","unicode_bidi::format_chars","ARABIC LETTER MARK",null,null],[17,"LRM","","LEFT-TO-RIGHT MARK",null,null],[17,"RLM","","RIGHT-TO-LEFT MARK",null,null],[17,"LRI","","LEFT‑TO‑RIGHT ISOLATE",null,null],[17,"RLI","","RIGHT‑TO‑LEFT ISOLATE",null,null],[17,"FSI","","FIRST STRONG ISOLATE",null,null],[17,"PDI","","POP DIRECTIONAL ISOLATE",null,null],[17,"LRE","","LEFT-TO-RIGHT EMBEDDING",null,null],[17,"RLE","","RIGHT-TO-LEFT EMBEDDING",null,null],[17,"PDF","","POP DIRECTIONAL FORMATTING",null,null],[17,"LRO","","LEFT-TO-RIGHT OVERRIDE",null,null],[17,"RLO","","RIGHT-TO-LEFT OVERRIDE",null,null],[0,"level","unicode_bidi","Bidi Embedding Level",null,null],[3,"Level","unicode_bidi::level","Embedding Level",null,null],[4,"Error","","Errors that can occur on Level creation or mutation",null,null],[13,"OutOfRangeNumber","","Out-of-range (invalid) embedding level number.",4,null],[5,"has_rtl","","If levels has any RTL (odd) level",null,null],[17,"LTR_LEVEL","","",null,null],[17,"RTL_LEVEL","","",null,null],[17,"MAX_EXPLICIT_DEPTH","","During explicit level resolution, embedding level can go as high as `max_depth`.",null,null],[17,"MAX_IMPLICIT_DEPTH","","During implicit level resolution, embedding level can go as high as `max_depth + 1`.",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"ordering"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ltr","","New LTR level with smallest number value (0).",5,{"inputs":[],"output":{"name":"level"}}],[11,"rtl","","New RTL level with smallest number value (1).",5,{"inputs":[],"output":{"name":"level"}}],[11,"max_implicit_depth","","Maximum depth of the directional status stack during implicit resolutions.",5,{"inputs":[],"output":{"name":"u8"}}],[11,"max_explicit_depth","","Maximum depth of the directional status stack during explicit resolutions.",5,{"inputs":[],"output":{"name":"u8"}}],[11,"new","","Create new level, fail if number is larger than `max_depth + 1`.",5,{"inputs":[{"name":"u8"}],"output":{"name":"result"}}],[11,"new_explicit","","Create new level, fail if number is larger than `max_depth`.",5,{"inputs":[{"name":"u8"}],"output":{"name":"result"}}],[11,"number","","The level number.",5,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"is_ltr","","If this level is left-to-right.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_rtl","","If this level is right-to-left.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raise","","Raise level by `amount`, fail if number is larger than `max_depth + 1`.",5,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"raise_explicit","","Raise level by `amount`, fail if number is larger than `max_depth`.",5,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"lower","","Lower level by `amount`, fail if number goes below zero.",5,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"new_explicit_next_ltr","","The next LTR (even) level greater than this, or fail if number is larger than `max_depth`.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new_explicit_next_rtl","","The next RTL (odd) level greater than this, or fail if number is larger than `max_depth`.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new_lowest_ge_rtl","","The lowest RTL (odd) level greater than or equal to this, or fail if number is larger than `max_depth + 1`.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"bidi_class","","Generate a character type based on a level (as specified in steps X10 and N2).",5,{"inputs":[{"name":"self"}],"output":{"name":"bidiclass"}}],[11,"vec","","",5,null],[11,"into","","Convert to the level number",5,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from","","Create level by number",5,{"inputs":[{"name":"u8"}],"output":{"name":"level"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"clone","unicode_bidi","",3,{"inputs":[{"name":"self"}],"output":{"name":"bidiclass"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bidiclass"}],"output":{"name":"bool"}}],[6,"LevelRun","","A maximal substring of characters with the same embedding level.",null,null],[17,"UNICODE_VERSION","","The Unicode version of data",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"paragraphinfo"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"paragraphinfo"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"initialinfo"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"initialinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Find the paragraphs and BidiClasses in a string of text.",1,{"inputs":[{"name":"str"},{"name":"option"}],"output":{"name":"initialinfo"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"bidiinfo"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"bidiinfo"}],"output":{"name":"bool"}}],[11,"new","","Split the text into paragraphs and determine the bidi embedding levels for each paragraph.",2,{"inputs":[{"name":"str"},{"name":"option"}],"output":{"name":"bidiinfo"}}],[11,"reordered_levels","","Re-order a line based on resolved levels and return only the embedding levels, one `Level` per byte.",2,{"inputs":[{"name":"self"},{"name":"paragraphinfo"},{"name":"range"}],"output":{"name":"vec"}}],[11,"reordered_levels_per_char","","Re-order a line based on resolved levels and return only the embedding levels, one `Level` per character.",2,{"inputs":[{"name":"self"},{"name":"paragraphinfo"},{"name":"range"}],"output":{"name":"vec"}}],[11,"reorder_line","","Re-order a line based on resolved levels and return the line in display order.",2,{"inputs":[{"name":"self"},{"name":"paragraphinfo"},{"name":"range"}],"output":{"name":"cow"}}],[11,"visual_runs","","Find the level runs within a line and return them in visual order.",2,null],[11,"has_rtl","","If processed text has any computed RTL levels",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[3,"ParagraphInfo"],[3,"InitialInfo"],[3,"BidiInfo"],[4,"BidiClass"],[4,"Error"],[3,"Level"]]};
searchIndex["unicode_normalization"] = {"doc":"Unicode character composition and decomposition utilities as described in Unicode Standard Annex #15.","items":[[3,"Decompositions","unicode_normalization","External iterator for a string decomposition's characters.",null,null],[3,"Recompositions","","External iterator for a string recomposition's characters.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"decompositions"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"recompositions"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"char","","Methods for composing and decomposing characters.",null,null],[5,"decompose_canonical","unicode_normalization::char","Compute canonical Unicode decomposition for character. See Unicode Standard Annex #15 for more information.",null,{"inputs":[{"name":"char"},{"name":"f"}],"output":null}],[5,"decompose_compatible","","Compute canonical or compatible Unicode decomposition for character. See Unicode Standard Annex #15 for more information.",null,{"inputs":[{"name":"char"},{"name":"f"}],"output":null}],[5,"compose","","Compose two characters into a single character, if possible. See Unicode Standard Annex #15 for more information.",null,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"option"}}],[5,"canonical_combining_class","","",null,{"inputs":[{"name":"char"}],"output":{"name":"u8"}}],[5,"is_combining_mark","","Return whether the given character is a combining mark (`General_Category=Mark`)",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[17,"UNICODE_VERSION","unicode_normalization","The version of Unicode that this version of unicode-normalization is based on.",null,null],[8,"UnicodeNormalization","","Methods for iterating over strings while applying Unicode normalizations as described in Unicode Standard Annex #15.",null,null],[10,"nfd","","Returns an iterator over the string in Unicode Normalization Form D (canonical decomposition).",2,{"inputs":[{"name":"self"}],"output":{"name":"decompositions"}}],[10,"nfkd","","Returns an iterator over the string in Unicode Normalization Form KD (compatibility decomposition).",2,{"inputs":[{"name":"self"}],"output":{"name":"decompositions"}}],[10,"nfc","","An Iterator over the string in Unicode Normalization Form C (canonical decomposition followed by canonical composition).",2,{"inputs":[{"name":"self"}],"output":{"name":"recompositions"}}],[10,"nfkc","","An Iterator over the string in Unicode Normalization Form KC (compatibility decomposition followed by canonical composition).",2,{"inputs":[{"name":"self"}],"output":{"name":"recompositions"}}]],"paths":[[3,"Decompositions"],[3,"Recompositions"],[8,"UnicodeNormalization"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[8,"UnicodeXID"]]};
searchIndex["unsafe_any"] = {"doc":"Traits for unsafe downcasting from trait objects to & or &mut references of concrete types. These should only be used if you are absolutely certain of the type of the data in said trait object - there be dragons etc.","items":[[8,"UnsafeAny","unsafe_any","A trait providing unchecked downcasting to its contents when stored in a trait object.",null,null],[8,"UnsafeAnyExt","","An extension trait for unchecked downcasting of trait objects.",null,null],[11,"downcast_ref_unchecked","","Returns a reference to the contained value, assuming that it is of type `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast_mut_unchecked","","Returns a mutable reference to the contained value, assuming that it is of type `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast_unchecked","","Returns a the contained value, assuming that it is of type `T`.",0,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"downcast_ref_unchecked","","Returns a reference to the contained value, assuming that it is of type `T`.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast_mut_unchecked","","Returns a mutable reference to the contained value, assuming that it is of type `T`.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast_unchecked","","Returns a the contained value, assuming that it is of type `T`.",1,{"inputs":[{"name":"box"}],"output":{"name":"box"}}]],"paths":[[8,"UnsafeAnyExt"],[8,"UnsafeAny"]]};
searchIndex["url"] = {"doc":"rust-url is an implementation of the URL Standard for the Rust programming language.","items":[[3,"OpaqueOrigin","url","Opaque identifier for URLs that have file or other schemes",null,null],[3,"HostAndPort","","This mostly exists because coherence rules don’t allow us to implement `ToSocketAddrs for (Host<S>, u16)`.",null,null],[12,"host","","",0,null],[12,"port","","",0,null],[3,"SocketAddrs","","Socket addresses for an URL.",null,null],[3,"PathSegmentsMut","","Exposes methods to manipulate the path of an URL that is not cannot-be-base.",null,null],[3,"Url","","A parsed URL record.",null,null],[3,"ParseOptions","","Full configuration for the URL parser.",null,null],[3,"UrlQuery","","Implementation detail of `Url::query_pairs_mut`. Typically not used directly.",null,null],[4,"Origin","","The origin of an URL",null,null],[13,"Opaque","","A globally unique identifier",1,null],[13,"Tuple","","Consists of the URL's scheme, host and port",1,null],[4,"Host","","The host name of an URL.",null,null],[13,"Domain","","A DNS domain name, as '.' dot-separated labels. Non-ASCII labels are encoded in punycode per IDNA.",2,null],[13,"Ipv4","","An IPv4 address. `Url::host_str` returns the serialization of this address, as four decimal integers separated by `.` dots.",2,null],[13,"Ipv6","","An IPv6 address. `Url::host_str` returns the serialization of that address between `[` and `]` brackets, in the format per RFC 5952 A Recommendation for IPv6 Address Text Representation: lowercase hexadecimal with maximal `::` compression.",2,null],[4,"ParseError","","Errors that can occur during parsing.",null,null],[13,"EmptyHost","","",3,null],[13,"IdnaError","","",3,null],[13,"InvalidPort","","",3,null],[13,"InvalidIpv4Address","","",3,null],[13,"InvalidIpv6Address","","",3,null],[13,"InvalidDomainCharacter","","",3,null],[13,"RelativeUrlWithoutBase","","",3,null],[13,"RelativeUrlWithCannotBeABaseBase","","",3,null],[13,"SetHostOnCannotBeABaseUrl","","",3,null],[13,"Overflow","","",3,null],[4,"Position","","Indicates a position within a URL based on its components.",null,null],[13,"BeforeScheme","","",4,null],[13,"AfterScheme","","",4,null],[13,"BeforeUsername","","",4,null],[13,"AfterUsername","","",4,null],[13,"BeforePassword","","",4,null],[13,"AfterPassword","","",4,null],[13,"BeforeHost","","",4,null],[13,"AfterHost","","",4,null],[13,"BeforePort","","",4,null],[13,"AfterPort","","",4,null],[13,"BeforePath","","",4,null],[13,"AfterPath","","",4,null],[13,"BeforeQuery","","",4,null],[13,"AfterQuery","","",4,null],[13,"BeforeFragment","","",4,null],[13,"AfterFragment","","",4,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"host"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.",2,{"inputs":[{"name":"self"}],"output":{"name":"host"}}],[11,"parse","","Parse a host: either an IPv6 address in [] square brackets, or a domain.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"hostandport"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.",0,{"inputs":[{"name":"self"}],"output":{"name":"hostandport"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_opaque","","Creates a new opaque origin that is only equal to itself.",1,{"inputs":[],"output":{"name":"origin"}}],[11,"is_tuple","","Return whether this origin is a (scheme, host, port) tuple (as opposed to an opaque origin).",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ascii_serialization","","https://html.spec.whatwg.org/multipage/#ascii-serialisation-of-an-origin",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"unicode_serialization","","https://html.spec.whatwg.org/multipage/#unicode-serialisation-of-an-origin",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"opaqueorigin"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"opaqueorigin"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"opaqueorigin"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"clear","","Remove all segments in the path, leaving the minimal `url.path() == \"/\"`.",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pop_if_empty","","Remove the last segment of this URL’s path if it is empty, except if these was only one segment to begin with.",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pop","","Remove the last segment of this URL’s path.",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"push","","Append the given segment at the end of this URL’s path.",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"extend","","Append each segment from the given iterator at the end of this URL’s path.",7,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"errors"}],"output":{"name":"parseerror"}}],[11,"index","","",8,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","","",8,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",8,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",8,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"str"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"form_urlencoded","","Parser and serializer for the `application/x-www-form-urlencoded` syntax, as used by HTML forms.",null,null],[3,"Parse","url::form_urlencoded","The return type of `parse()`.",null,null],[3,"ParseIntoOwned","","Like `Parse`, but yields pairs of `String` instead of pairs of `Cow<str>`.",null,null],[3,"ByteSerialize","","Return value of `byte_serialize()`.",null,null],[3,"Serializer","","The `application/x-www-form-urlencoded` serializer.",null,null],[5,"parse","","Convert a byte string in the `application/x-www-form-urlencoded` syntax into a iterator of (name, value) pairs.",null,null],[5,"byte_serialize","","The `application/x-www-form-urlencoded` byte serializer.",null,null],[8,"Target","","",null,null],[10,"as_mut_string","","",9,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"finish","","",9,null],[16,"Finished","","",9,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"parse"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_owned","","Return a new iterator that yields pairs of `String` instead of pairs of `Cow<str>`.",10,{"inputs":[{"name":"self"}],"output":{"name":"parseintoowned"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_mut_string","url","",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"finish","","",14,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"new","url::form_urlencoded","Create a new `application/x-www-form-urlencoded` serializer for the given target.",13,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"for_suffix","","Create a new `application/x-www-form-urlencoded` serializer for a suffix of the given target.",13,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"self"}}],[11,"clear","","Remove any existing name/value pair.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"append_pair","","Serialize and append a name/value pair.",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"extend_pairs","","Serialize and append a number of name/value pairs.",13,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"finish","","If this serializer was constructed with a string, take and return that string.",13,null],[0,"quirks","url","Getters and setters for URL components implemented per https://url.spec.whatwg.org/#api",null,null],[5,"domain_to_ascii","url::quirks","https://url.spec.whatwg.org/#dom-url-domaintoascii",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"domain_to_unicode","","https://url.spec.whatwg.org/#dom-url-domaintounicode",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"href","","Getter for https://url.spec.whatwg.org/#dom-url-href",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_href","","Setter for https://url.spec.whatwg.org/#dom-url-href",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"origin","","Getter for https://url.spec.whatwg.org/#dom-url-origin",null,{"inputs":[{"name":"url"}],"output":{"name":"string"}}],[5,"protocol","","Getter for https://url.spec.whatwg.org/#dom-url-protocol",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_protocol","","Setter for https://url.spec.whatwg.org/#dom-url-protocol",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"username","","Getter for https://url.spec.whatwg.org/#dom-url-username",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_username","","Setter for https://url.spec.whatwg.org/#dom-url-username",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"password","","Getter for https://url.spec.whatwg.org/#dom-url-password",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_password","","Setter for https://url.spec.whatwg.org/#dom-url-password",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"host","","Getter for https://url.spec.whatwg.org/#dom-url-host",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_host","","Setter for https://url.spec.whatwg.org/#dom-url-host",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"hostname","","Getter for https://url.spec.whatwg.org/#dom-url-hostname",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_hostname","","Setter for https://url.spec.whatwg.org/#dom-url-hostname",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"port","","Getter for https://url.spec.whatwg.org/#dom-url-port",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_port","","Setter for https://url.spec.whatwg.org/#dom-url-port",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"pathname","","Getter for https://url.spec.whatwg.org/#dom-url-pathname",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_pathname","","Setter for https://url.spec.whatwg.org/#dom-url-pathname",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":null}],[5,"search","","Getter for https://url.spec.whatwg.org/#dom-url-search",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_search","","Setter for https://url.spec.whatwg.org/#dom-url-search",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":null}],[5,"hash","","Getter for https://url.spec.whatwg.org/#dom-url-hash",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_hash","","Setter for https://url.spec.whatwg.org/#dom-url-hash",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":null}],[11,"clone","url","",8,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"parseoptions"}}],[11,"base_url","","Change the base URL",15,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"log_syntax_violation","","Call the provided function or closure on non-fatal parse errors.",15,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"parse","","Parse an URL string with the configuration so far.",15,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"parse","","Parse an absolute URL from a string.",8,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"parse_with_params","","Parse an absolute URL from a string and add params to its query string.",8,{"inputs":[{"name":"str"},{"name":"i"}],"output":{"name":"result"}}],[11,"join","","Parse a string as an URL, with this URL as the base URL.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"options","","Return a default `ParseOptions` that can fully configure the URL parser.",8,{"inputs":[],"output":{"name":"parseoptions"}}],[11,"as_str","","Return the serialization of this URL.",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_string","","Return the serialization of this URL.",8,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"origin","","Return the origin of this URL (https://url.spec.whatwg.org/#origin)",8,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"scheme","","Return the scheme of this URL, lower-cased, as an ASCII string without the ':' delimiter.",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"has_authority","","Return whether the URL has an 'authority', which can contain a username, password, host, and port number.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cannot_be_a_base","","Return whether this URL is a cannot-be-a-base URL, meaning that parsing a relative URL string with this URL as the base will return an error.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"username","","Return the username for this URL (typically the empty string) as a percent-encoded ASCII string.",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"password","","Return the password for this URL, if any, as a percent-encoded ASCII string.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"has_host","","Equivalent to `url.host().is_some()`.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"host_str","","Return the string representation of the host (domain or IP address) for this URL, if any.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"host","","Return the parsed representation of the host for this URL. Non-ASCII domain labels are punycode-encoded per IDNA.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"domain","","If this URL has a host and it is a domain name (not an IP address), return it.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"port","","Return the port number for this URL, if any.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"port_or_known_default","","Return the port number for this URL, or the default port number if it is known.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"with_default_port","","If the URL has a host, return something that implements `ToSocketAddrs`.",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"path","","Return the path for this URL, as a percent-encoded ASCII string. For cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with '/'. For other URLs, this starts with a '/' slash and continues with slash-separated path segments.",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"path_segments","","Unless this URL is cannot-be-a-base, return an iterator of '/' slash-separated path segments, each as a percent-encoded ASCII string.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"query","","Return this URL’s query string, if any, as a percent-encoded ASCII string.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded` and return an iterator of (key, value) pairs.",8,{"inputs":[{"name":"self"}],"output":{"name":"parse"}}],[11,"fragment","","Return this URL’s fragment identifier, if any.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_fragment","","Change this URL’s fragment identifier.",8,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"set_query","","Change this URL’s query string.",8,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"query_pairs_mut","","Manipulate this URL’s query string, viewed as a sequence of name/value pairs in `application/x-www-form-urlencoded` syntax.",8,{"inputs":[{"name":"self"}],"output":{"name":"serializer"}}],[11,"set_path","","Change this URL’s path.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"path_segments_mut","","Return an object with methods to manipulate this URL’s path segments.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_port","","Change this URL’s port number.",8,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_host","","Change this URL’s host.",8,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_ip_host","","Change this URL’s host to the given IP address.",8,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_password","","Change this URL’s password.",8,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_username","","Change this URL’s username.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"set_scheme","","Change this URL’s scheme.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",8,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",8,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar, convert its path to an absolute `std::path::Path`.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_str","","",8,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",8,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"as_ref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",14,{"inputs":[{"name":"self"}],"output":null}],[14,"define_encode_set","","Define a new struct that implements the `EncodeSet` trait, for use in `percent_decode()` and related functions.",null,null]],"paths":[[3,"HostAndPort"],[4,"Origin"],[4,"Host"],[4,"ParseError"],[4,"Position"],[3,"SocketAddrs"],[3,"OpaqueOrigin"],[3,"PathSegmentsMut"],[3,"Url"],[8,"Target"],[3,"Parse"],[3,"ParseIntoOwned"],[3,"ByteSerialize"],[3,"Serializer"],[3,"UrlQuery"],[3,"ParseOptions"]]};
searchIndex["urlencoded"] = {"doc":"URL Encoded Plugin for Iron.","items":[[3,"UrlEncodedQuery","urlencoded","Plugin for `Request` that extracts URL encoded data from the URL query string.",null,null],[3,"UrlEncodedBody","","Plugin for `Request` that extracts URL encoded data from the request body.",null,null],[4,"UrlDecodingError","","An error representing the two possible errors that can occur during URL decoding.",null,null],[13,"BodyError","","An error parsing the request body",0,null],[13,"EmptyQuery","","An empty query string, either in body or url query",0,null],[6,"QueryMap","","Hashmap mapping strings to vectors of strings.",null,null],[6,"QueryResult","","Result type for decoding query parameters.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eval","","",1,{"inputs":[{"name":"request"}],"output":{"name":"queryresult"}}],[11,"eval","","",2,{"inputs":[{"name":"request"}],"output":{"name":"queryresult"}}]],"paths":[[4,"UrlDecodingError"],[3,"UrlEncodedQuery"],[3,"UrlEncodedBody"]]};
initSearch(searchIndex);
